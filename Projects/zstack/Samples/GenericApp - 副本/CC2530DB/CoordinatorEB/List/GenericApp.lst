###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             09/Dec/2016  17:18:48 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\GenericApp -        #
#                          ¸±±¾\Source\GenericApp.c                           #
#    Command line       =  -f "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg #
#                          " (-DCPU32MHZ -DROOT=__near_func                   #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cf #
#                          g" (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0   #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00100000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "E:\Lib\micro-electromechan #
#                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp - ¸±±¾\Source\GenericApp.c" -D     #
#                          ZAPP_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC   #
#                          -D LCD_SUPPORTED=DEBUG -D HAL_UART_ISR -lC         #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\CoordinatorEB\List\" -lA             #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\CoordinatorEB\List\"                 #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\CoordinatorEB\Obj\" -e               #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾\CC2530DB\" -I "E:\Lib\micro-electromechanical #
#                          \Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples #
#                          \GenericApp - ¸±±¾\CC2530DB\..\Source\" -I         #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\..\..\..\ZMain\TI2530DB\" -I         #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\..\..\..\..\..\Components\hal\includ #
#                          e\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack #
#                          -CC2530-2.5.1a\Projects\zstack\Samples\GenericApp  #
#                          - ¸±±¾\CC2530DB\..\..\..\..\..\Components\hal\targ #
#                          et\CC2530EB\" -I "E:\Lib\micro-electromechanical\Ê #
#                          ±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\G #
#                          enericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\include\" -I "E:\Lib\micro-electromechanical #
#                          \Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples #
#                          \GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Compone #
#                          nts\mac\high_level\" -I "E:\Lib\micro-electromecha #
#                          nical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Co #
#                          mponents\mac\low_level\srf04\" -I                  #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\..\..\..\..\..\Components\mac\low_le #
#                          vel\srf04\single_chip\" -I                         #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\..\..\..\..\..\Components\mt\" -I    #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\..\..\..\..\..\Components\osal\inclu #
#                          de\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStac #
#                          k-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp #
#                           - ¸±±¾\CC2530DB\..\..\..\..\..\Components\service #
#                          s\saddr\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gener #
#                          icApp - ¸±±¾\CC2530DB\..\..\..\..\..\Components\se #
#                          rvices\sdata\" -I "E:\Lib\micro-electromechanical\ #
#                          Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\af\" -I "E:\Lib\micro-electromechanical\Ê #
#                          ±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\G #
#                          enericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\nwk\" -I "E:\Lib\micro-electromechanical\Ê #
#                          ±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\G #
#                          enericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\sapi\" -I "E:\Lib\micro-electromechanical\ #
#                          Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sec\" -I "E:\Lib\micro-electromechanical\ #
#                          Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sys\" -I "E:\Lib\micro-electromechanical\ #
#                          Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\zdo\" -I "E:\Lib\micro-electromechanical\ #
#                          Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gener #
#                          icApp - ¸±±¾\CC2530DB\..\..\..\..\..\Components\zm #
#                          ac\f8w\" -Ohz                                      #
#    List file          =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\GenericApp -        #
#                          ¸±±¾\CC2530DB\CoordinatorEB\List\GenericApp.lst    #
#    Object file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\GenericApp -        #
#                          ¸±±¾\CC2530DB\CoordinatorEB\Obj\GenericApp.r51     #
#                                                                             #
#                                                                             #
###############################################################################

E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾\Source\GenericApp.c
      1          /******************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
      4            Revision:       $Revision: 29656 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends "Hello World" to another "Generic"
     45            application every 5 seconds.  The application will also
     46            receives "Hello World" packets.
     47          
     48            The "Hello World" messages are sent/received as MSG type message.
     49          
     50            This applications doesn't have a profile, so it handles everything
     51            directly - itself.
     52          
     53            Key control:
     54              SW1:
     55              SW2:  initiates end device binding
     56              SW3:
     57              SW4:  initiates a match description request
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include "OSAL.h"
     64          #include "AF.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          
     69          #include "GenericApp.h"
     70          #include "DebugTrace.h"
     71          
     72          #if !defined( WIN32 )
     73            #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     74          #endif
     75          
     76          /* HAL */
     77          #include "hal_lcd.h"
     78          #include "hal_led.h"
     79          #include "hal_key.h"
     80          #include "hal_uart.h"
     81          
     82          /* RTOS */
     83          #if defined( IAR_ARMCM3_LM )
     84          #include "RTOS_App.h"
     85          #endif  
     86          
     87          /*********************************************************************
     88           * MACROS
     89           */
     90          
     91          /*********************************************************************
     92           * CONSTANTS
     93           */
     94          
     95          /*********************************************************************
     96           * TYPEDEFS
     97           */
     98          
     99          /*********************************************************************
    100           * GLOBAL VARIABLES
    101           */
    102          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    103          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0700         DW 7
   \   000004   0600         DW 6
   \   000006   0800         DW 8
   \   000008   0500         DW 5
   \   00000A   0400         DW 4
   \   00000C   0200         DW 2
   \   00000E   0000         DW 0
    104          {
    105            GENERICAPP_CLUSTERID_TEMHUM,
    106            GENERICAPP_CLUSTERID_LINGHT,
    107            GENERICAPP_CLUSTERID_SOUND,
    108            GENERICAPP_CLUSTERID_POSTURE,
    109            GENERICAPP_CLUSTERID_DISTANCE,
    110            GENERICAPP_CLUSTERID_GPS,
    111            GENERICAPP_CLUSTERID_GAS
    112          };
    113          

   \                                 In  segment XDATA_ROM_C, align 1
    114          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   08           DB 8
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   08           DB 8
   \   00000A   ....         DW GenericApp_ClusterList
    115          {
    116            GENERICAPP_ENDPOINT,              //  int Endpoint;
    117            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    118            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    119            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    120            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    121            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    122            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    123            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    124            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    125          };
    126          
    127          // This is the Endpoint/Interface description.  It is defined here, but
    128          // filled-in in GenericApp_Init().  Another way to go would be to fill
    129          // in the structure here and make it a "const" (in code space).  The
    130          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    132          
    133          /*********************************************************************
    134           * EXTERNAL VARIABLES
    135           */
    136          
    137          /*********************************************************************
    138           * EXTERNAL FUNCTIONS
    139           */
    140          
    141          /*********************************************************************
    142           * LOCAL VARIABLES
    143           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    145                                    // This variable will be received when
    146                                    // GenericApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148          
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    153          
    154          /*********************************************************************
    155           * LOCAL FUNCTIONS
    156           */
    157          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    158          static void GenericApp_HandleKeys( byte shift, byte keys );
    159          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    160          static void GenericApp_SendTheMessage( void );
    161          static void GenericApp_SendPeriodMessage(void);
    162          void UART_MessageMSGCB(MSGfrom_UART * buf);
    163          
    164          #if defined( IAR_ARMCM3_LM )
    165          static void GenericApp_ProcessRtosMessage( void );
    166          #endif
    167          
    168          /*********************************************************************
    169           * NETWORK LAYER CALLBACKS
    170           */
    171          
    172          /*********************************************************************
    173           * PUBLIC FUNCTIONS
    174           */
    175          
    176          
    177          //×Ô¼ºÌí¼ÓµÄº¯Êý
    178           

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          unsigned int  AdcValue;
   \                     AdcValue:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180          unsigned int  value;
   \                     value:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          unsigned int ADCValue;
   \                     ADCValue:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          unsigned char ADCV[]="";
   \                     ADCV:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183          uint16 i = 0;
   \                     i:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          MSGfrom_UART MSGfromUart;
   \                     MSGfromUart:
   \   000000                DS 40
   \   000028                REQUIRE __INIT_XDATA_Z
    185          
    186          
    187          void GenericApp_start_usrt_test();
    188          
    189          static void rxCB(uint8 port,uint8 event);
    190          void atoMSG(char * buf, MSGfrom_UART * temp);
    191          
    192          
    193          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    194          void Delays(void) {
   \                     Delays:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    195            unsigned int itemp;
    196            for(itemp=0;itemp<500;itemp++) {
   \   000000   78F4         MOV     R0,#-0xc
   \   000002   7901         MOV     R1,#0x1
    197              asm("nop");
   \                     ??Delays_0:
   \   000004   00           nop
    198            }
   \   000005   E8           MOV     A,R0
   \   000006   24FF         ADD     A,#-0x1
   \   000008   18           DEC     R0
   \   000009   E9           MOV     A,R1
   \   00000A   34FF         ADDC    A,#-0x1
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   70F3         JNZ     ??Delays_0
    199          }
   \   000011   02....       LJMP    ?BRET
    200          
    201          
    202          /*********************************************************************
    203           * @fn      GenericApp_Init
    204           *
    205           * @brief   Initialization function for the Generic App Task.
    206           *          This is called during initialization and should contain
    207           *          any application specific initialization (ie. hardware
    208           *          initialization/setup, table initialization, power up
    209           *          notificaiton ... ).
    210           *
    211           * @param   task_id - the ID assigned by OSAL.  This ID should be
    212           *                    used to send messages and set timers.
    213           *
    214           * @return  none
    215           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    216          void GenericApp_Init( uint8 task_id )
   \                     GenericApp_Init:
    217          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    218            GenericApp_TaskID = task_id;
   \   00000C   90....       MOV     DPTR,#GenericApp_TaskID
   \   00000F   F0           MOVX    @DPTR,A
    219            GenericApp_NwkState = DEV_INIT;
   \   000010   90....       MOV     DPTR,#GenericApp_NwkState
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    220            GenericApp_TransID = 0;
   \   000016   90....       MOV     DPTR,#GenericApp_TransID
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
    221            // Device hardware initialization can be added here or in main() (Zmain.c).
    222            // If the hardware is application specific - add it here.
    223            // If the hardware is other parts of the device add it in main().
    224          
    225            GenericApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00001B   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   00001E   F0           MOVX    @DPTR,A
    226            GenericApp_DstAddr.endPoint = 0;
   \   00001F   A3           INC     DPTR
   \   000020   F0           MOVX    @DPTR,A
    227            GenericApp_DstAddr.addr.shortAddr = 0;
   \   000021   90....       MOV     DPTR,#GenericApp_DstAddr
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   F0           MOVX    @DPTR,A
    228          
    229            // Fill out the endpoint description.
    230            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000027   90....       MOV     DPTR,#GenericApp_epDesc
   \   00002A   740A         MOV     A,#0xa
   \   00002C   F0           MOVX    @DPTR,A
    231            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00002D   A3           INC     DPTR
   \   00002E   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000034   F0           MOVX    @DPTR,A
    232            GenericApp_epDesc.simpleDesc
    233                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000035   A3           INC     DPTR
   \   000036   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00003C   F0           MOVX    @DPTR,A
    234            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00003D   A3           INC     DPTR
   \   00003E   E4           CLR     A
   \   00003F   F0           MOVX    @DPTR,A
    235          
    236            // Register the endpoint description with the AF
    237            afRegister( &GenericApp_epDesc );
   \   000040                ; Setup parameters for call to function afRegister
   \   000040   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000042   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000044   12....       LCALL   ??afRegister?relay
    238          
    239            // Register for all key events - This app will handle all key events
    240            RegisterForKeys( GenericApp_TaskID );
   \   000047                ; Setup parameters for call to function RegisterForKeys
   \   000047   90....       MOV     DPTR,#GenericApp_TaskID
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   12....       LCALL   ??RegisterForKeys?relay
    241          
    242            //uart×¢²á
    243            MT_UartRegisterTaskID(task_id);
                   ^
Warning[Pe223]: function "MT_UartRegisterTaskID" declared implicitly
   \   00004F                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00004F   8E..         MOV     ?V0 + 0,R6
   \   000051   AA..         MOV     R2,?V0 + 0
   \   000053   7B00         MOV     R3,#0x0
   \   000055   12....       LCALL   ??MT_UartRegisterTaskID?relay
    244            // Update the display
    245          #if defined ( LCD_SUPPORTED )
    246            HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
   \   000058                ; Setup parameters for call to function HalLcdWriteString
   \   000058   7901         MOV     R1,#0x1
   \   00005A   7A..         MOV     R2,#`?<Constant "GenericApp">` & 0xff
   \   00005C   7B..         MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
   \   00005E   12....       LCALL   ??HalLcdWriteString?relay
    247          #endif
    248          
    249            ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
   \   000061                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000061   7A20         MOV     R2,#0x20
   \   000063   7B80         MOV     R3,#-0x80
   \   000065   90....       MOV     DPTR,#GenericApp_TaskID
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    250            ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
   \   00006D                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00006D   7A06         MOV     R2,#0x6
   \   00006F   7B80         MOV     R3,#-0x80
   \   000071   90....       MOV     DPTR,#GenericApp_TaskID
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F9           MOV     R1,A
   \   000076   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    251          
    252          #if defined( IAR_ARMCM3_LM )
    253            // Register this task with RTOS task initiator
    254            RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
    255          #endif
    256            
    257            MT_UartInit();
                   ^
Warning[Pe223]: function "MT_UartInit" declared implicitly
   \   000079                ; Setup parameters for call to function MT_UartInit
   \   000079   12....       LCALL   ??MT_UartInit?relay
    258            halUARTCfg_t uartConfig;
    259            uartConfig.configured = TRUE;
   \   00007C   85..82       MOV     DPL,?XSP + 0
   \   00007F   85..83       MOV     DPH,?XSP + 1
   \   000082   7401         MOV     A,#0x1
   \   000084   F0           MOVX    @DPTR,A
    260            uartConfig.baudRate = HAL_UART_BR_9600;
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   E4           CLR     A
   \   000089   F0           MOVX    @DPTR,A
    261            uartConfig.flowControl = FALSE;
   \   00008A   7402         MOV     A,#0x2
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   E4           CLR     A
   \   000090   F0           MOVX    @DPTR,A
    262            uartConfig.callBackFunc = rxCB;
   \   000091   741B         MOV     A,#0x1b
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   74..         MOV     A,#??rxCB?relay & 0xff
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   74..         MOV     A,#(??rxCB?relay >> 8) & 0xff
   \   00009C   12....       LCALL   ?Subroutine2 & 0xFFFF
    263            HalUARTOpen(0,&uartConfig);
   \                     ??CrossCallReturnLabel_2:
   \   00009F   AA82         MOV     R2,DPL
   \   0000A1   AB83         MOV     R3,DPH
   \   0000A3   7900         MOV     R1,#0x0
   \   0000A5   12....       LCALL   ??HalUARTOpen?relay
    264          }
   \   0000A8   741D         MOV     A,#0x1d
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AD   7F02         MOV     R7,#0x2
   \   0000AF   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    265          
    266          /*********************************************************************
    267           * @fn      GenericApp_ProcessEvent
    268           *
    269           * @brief   Generic Application Task event processor.  This function
    270           *          is called to process all events for the task.  Events
    271           *          include timers, messages and any other user defined events.
    272           *
    273           * @param   task_id  - The OSAL assigned task ID.
    274           * @param   events - events to process.  This is a bit map and can
    275           *                   contain more than one event.
    276           *
    277           * @return  none
    278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     GenericApp_ProcessEvent:
    280          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    281            afIncomingMSGPacket_t *MSGpkt;
    282            afDataConfirm_t *afDataConfirm;
    283          
    284            // Data Confirmation message fields
    285            byte sentEP;
    286            ZStatus_t sentStatus;
    287            byte sentTransID;       // This should match the value sent
    288            (void)task_id;  // Intentionally unreferenced parameter
    289          
    290            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
    291            {
    292              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000015                ; Setup parameters for call to function osal_msg_receive
   \   000015   802E         SJMP    ??GenericApp_ProcessEvent_1
    293              while ( MSGpkt )
    294              {
    295                switch ( MSGpkt->hdr.event )
    296                {
    297                  case ZDO_CB_MSG:
    298                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    299                    break;
    300          
    301                  case KEY_CHANGE:
    302                    GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    303                    break;
    304          
    305                  case AF_DATA_CONFIRM_CMD:
    306                    // This message is received as a confirmation of a data packet sent.
    307                    // The status is of ZStatus_t type [defined in ZComDef.h]
    308                    // The message fields are defined in AF.h
    309                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    310                    sentEP = afDataConfirm->endpoint;
    311                    sentStatus = afDataConfirm->hdr.status;
    312                    sentTransID = afDataConfirm->transID;
    313                    (void)sentEP;
    314                    (void)sentTransID;
    315          
    316                    // Action taken when confirmation is received.
    317                    if ( sentStatus != ZSuccess )
    318                    {
    319                      // The data wasn't delivered -- Do something
    320                    }
    321                    break;
    322          
    323                  case AF_INCOMING_MSG_CMD:
    324                    GenericApp_MessageMSGCB( MSGpkt );
    325                    break;
    326          
    327                  case ZDO_STATE_CHANGE:
    328                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??GenericApp_ProcessEvent_2:
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   90....       MOV     DPTR,#GenericApp_NwkState
   \   00001C   F0           MOVX    @DPTR,A
    329                    if ( (GenericApp_NwkState == DEV_ZB_COORD)
    330                        || (GenericApp_NwkState == DEV_ROUTER)
    331                        || (GenericApp_NwkState == DEV_END_DEVICE) )
   \   00001D   6409         XRL     A,#0x9
   \   00001F   600A         JZ      ??GenericApp_ProcessEvent_3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6407         XRL     A,#0x7
   \   000024   6005         JZ      ??GenericApp_ProcessEvent_3
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6406         XRL     A,#0x6
   \   000029   7013         JNZ     ??GenericApp_ProcessEvent_4
    332                    {
    333                      GenericApp_start_usrt_test();
   \                     ??GenericApp_ProcessEvent_3:
   \   00002B                ; Setup parameters for call to function GenericApp_start_usrt_test
   \   00002B   12....       LCALL   ??GenericApp_start_usrt_test?relay
    334                      // Start sending "the" message in a regular interval.
    335                      //¿ªÆô¶¨Ê±Æ÷
    336                      osal_start_timerEx( GenericApp_TaskID,
    337                                          GENERICAPP_SEND_MSG_EVT,//ÊÂ¼þ
    338                                          GENERICAPP_SEND_MSG_TIMEOUT );//Ê±¼ä
   \   00002E                ; Setup parameters for call to function osal_start_timerEx
   \   00002E   7C88         MOV     R4,#-0x78
   \   000030   7D13         MOV     R5,#0x13
   \   000032   7A01         MOV     R2,#0x1
   \   000034   7B00         MOV     R3,#0x0
   \   000036   90....       MOV     DPTR,#GenericApp_TaskID
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
   \   00003B   12....       LCALL   ??osal_start_timerEx?relay
    339                    }
    340                    break;
    341          
    342                 /* case  SPI_INCOMING_ZAPP_DATA: //DMA UART·½Ê½
    343                    HalUARTWrite(0,"I get",5);
    344                  break;*/
    345                  default:
    346                    break;
    347                }
    348          
    349                // Release the memory
    350                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_4:
   \   00003E                ; Setup parameters for call to function osal_msg_deallocate
   \   00003E   AA..         MOV     R2,?V0 + 0
   \   000040   AB..         MOV     R3,?V0 + 1
   \   000042   12....       LCALL   ??osal_msg_deallocate?relay
    351          
    352                // Next
    353                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000045                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   000045   90....       MOV     DPTR,#GenericApp_TaskID
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
   \   00004A   12....       LCALL   ??osal_msg_receive?relay
   \   00004D   8A..         MOV     ?V0 + 0,R2
   \   00004F   8B..         MOV     ?V0 + 1,R3
   \   000051   E5..         MOV     A,?V0 + 0
   \   000053   45..         ORL     A,?V0 + 1
   \   000055   7003         JNZ     $+5
   \   000057   02....       LJMP    ??GenericApp_ProcessEvent_5 & 0xFFFF
   \   00005A   85..82       MOV     DPL,?V0 + 0
   \   00005D   85..83       MOV     DPH,?V0 + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   24E6         ADD     A,#-0x1a
   \   000063   7003         JNZ     $+5
   \   000065   02....       LJMP    ??GenericApp_ProcessEvent_6 & 0xFFFF
   \   000068   245A         ADD     A,#0x5a
   \   00006A   7003         JNZ     $+5
   \   00006C   02....       LJMP    ??GenericApp_ProcessEvent_7 & 0xFFFF
   \   00006F   24EF         ADD     A,#-0x11
   \   000071   60A4         JZ      ??GenericApp_ProcessEvent_2
   \   000073   24FE         ADD     A,#-0x2
   \   000075   70C7         JNZ     ??GenericApp_ProcessEvent_4
   \   000077   E5..         MOV     A,?V0 + 0
   \   000079   240C         ADD     A,#0xc
   \   00007B   F582         MOV     DPL,A
   \   00007D   E5..         MOV     A,?V0 + 1
   \   00007F   3400         ADDC    A,#0x0
   \   000081   F583         MOV     DPH,A
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F5..         MOV     ?V0 + 2,A
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F5..         MOV     ?V0 + 3,A
   \   00008A   78..         MOV     R0,#?V0 + 2
   \   00008C   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessEvent>_0`:
   \   00008F   0000         DW        0
   \   000091   0200         DW        2
   \   000093   0680         DW        32774
   \   000095   ....         DW        ??GenericApp_ProcessEvent_8
   \   000097   2080         DW        32800
   \   000099   ....         DW        ??GenericApp_ProcessEvent_9
   \   00009B   ....         DW        ??GenericApp_ProcessEvent_4
   \                     ??GenericApp_ProcessEvent_8:
   \   00009D                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00009D   AA..         MOV     R2,?V0 + 0
   \   00009F   AB..         MOV     R3,?V0 + 1
   \   0000A1   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   0000A4   8A..         MOV     ?V0 + 2,R2
   \   0000A6   8B..         MOV     ?V0 + 3,R3
   \   0000A8   EA           MOV     A,R2
   \   0000A9   45..         ORL     A,?V0 + 3
   \   0000AB   6091         JZ      ??GenericApp_ProcessEvent_4
   \   0000AD   8A82         MOV     DPL,R2
   \   0000AF   8B83         MOV     DPH,R3
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   7032         JNZ     ??GenericApp_ProcessEvent_10
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   602C         JZ      ??GenericApp_ProcessEvent_10
   \   0000BA   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   0000BD   7402         MOV     A,#0x2
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   8A82         MOV     DPL,R2
   \   0000C2   8B83         MOV     DPH,R3
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F8           MOV     R0,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F9           MOV     R1,A
   \   0000CA   90....       MOV     DPTR,#GenericApp_DstAddr
   \   0000CD   E8           MOV     A,R0
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   E9           MOV     A,R1
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   8A82         MOV     DPL,R2
   \   0000D4   8B83         MOV     DPH,R3
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   0000DE   F0           MOVX    @DPTR,A
   \   0000DF                ; Setup parameters for call to function HalLedSet
   \   0000DF   7A01         MOV     R2,#0x1
   \   0000E1   7908         MOV     R1,#0x8
   \   0000E3   12....       LCALL   ??HalLedSet?relay
   \                     ??GenericApp_ProcessEvent_10:
   \   0000E6                ; Setup parameters for call to function osal_mem_free
   \   0000E6   AA..         MOV     R2,?V0 + 2
   \   0000E8   AB..         MOV     R3,?V0 + 3
   \   0000EA   12....       LCALL   ??osal_mem_free?relay
   \   0000ED   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_9:
   \   0000F0   E5..         MOV     A,?V0 + 0
   \   0000F2   2413         ADD     A,#0x13
   \   0000F4   F582         MOV     DPL,A
   \   0000F6   E5..         MOV     A,?V0 + 1
   \   0000F8   3400         ADDC    A,#0x0
   \   0000FA   F583         MOV     DPH,A
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F8           MOV     R0,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F583         MOV     DPH,A
   \   000102   8882         MOV     DPL,R0
   \   000104   E0           MOVX    A,@DPTR
   \   000105   700A         JNZ     ??GenericApp_ProcessEvent_11
   \   000107                ; Setup parameters for call to function HalLedSet
   \   000107   7A01         MOV     R2,#0x1
   \                     ??GenericApp_ProcessEvent_12:
   \   000109   7908         MOV     R1,#0x8
   \   00010B   12....       LCALL   ??HalLedSet?relay
   \   00010E   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_11:
   \   000111                ; Setup parameters for call to function HalLedSet
   \   000111   7A04         MOV     R2,#0x4
   \   000113   80F4         SJMP    ??GenericApp_ProcessEvent_12
   \                     ??GenericApp_ProcessEvent_7:
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   E0           MOVX    A,@DPTR
   \   000119   F5..         MOV     ?V0 + 4,A
   \   00011B   85..82       MOV     DPL,?V0 + 0
   \   00011E   85..83       MOV     DPH,?V0 + 1
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   E0           MOVX    A,@DPTR
   \   000124   6003         JZ      $+5
   \   000126   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   000129   E5..         MOV     A,?V0 + 4
   \   00012B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00012D   5069         JNC     ??GenericApp_ProcessEvent_13
   \   00012F                ; Setup parameters for call to function HalLedSet
   \   00012F   7A00         MOV     R2,#0x0
   \   000131   7908         MOV     R1,#0x8
   \   000133   12....       LCALL   ??HalLedSet?relay
   \   000136   7408         MOV     A,#0x8
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   7402         MOV     A,#0x2
   \   00013D   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000140   E4           CLR     A
   \   000141   F0           MOVX    @DPTR,A
   \   000142   A3           INC     DPTR
   \   000143   F0           MOVX    @DPTR,A
   \   000144                ; Setup parameters for call to function NLME_GetShortAddr
   \   000144   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000147   8A..         MOV     ?V0 + 2,R2
   \   000149   8B..         MOV     ?V0 + 3,R3
   \   00014B   AC..         MOV     R4,?V0 + 2
   \   00014D   AD..         MOV     R5,?V0 + 3
   \   00014F   75....       MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
   \   000152   75....       MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
   \   000155                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000155   75..00       MOV     ?V0 + 5,#0x0
   \   000158   78..         MOV     R0,#?V0 + 5
   \   00015A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015D   78..         MOV     R0,#?V0 + 2
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000162   75..08       MOV     ?V0 + 5,#0x8
   \   000165   78..         MOV     R0,#?V0 + 5
   \   000167   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00016A   78..         MOV     R0,#?V0 + 2
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016F   75..08       MOV     ?V0 + 2,#0x8
   \   000172   78..         MOV     R0,#?V0 + 2
   \   000174   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000177   75..04       MOV     ?V0 + 2,#0x4
   \   00017A   75..0F       MOV     ?V0 + 3,#0xf
   \   00017D   78..         MOV     R0,#?V0 + 2
   \   00017F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000182   90....       MOV     DPTR,#GenericApp_epDesc
   \   000185   E0           MOVX    A,@DPTR
   \   000186   F9           MOV     R1,A
   \   000187   7409         MOV     A,#0x9
   \   000189   12....       LCALL   ?XSTACK_DISP0_8
   \   00018C   AA82         MOV     R2,DPL
   \   00018E   AB83         MOV     R3,DPH
   \   000190   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   000193   7409         MOV     A,#0x9
   \   000195   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??GenericApp_ProcessEvent_13:
   \   000198   E5..         MOV     A,?V0 + 4
   \   00019A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00019C   4003         JC      $+5
   \   00019E   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   0001A1                ; Setup parameters for call to function HalLedSet
   \   0001A1   7A00         MOV     R2,#0x0
   \   0001A3   7908         MOV     R1,#0x8
   \   0001A5   12....       LCALL   ??HalLedSet?relay
   \   0001A8   7408         MOV     A,#0x8
   \   0001AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AD   740F         MOV     A,#0xf
   \   0001AF   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0001B2   74FF         MOV     A,#-0x1
   \   0001B4   F0           MOVX    @DPTR,A
   \   0001B5   A3           INC     DPTR
   \   0001B6   F0           MOVX    @DPTR,A
   \   0001B7   75....       MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
   \   0001BA   75....       MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
   \   0001BD                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0001BD   75..00       MOV     ?V0 + 4,#0x0
   \   0001C0   78..         MOV     R0,#?V0 + 4
   \   0001C2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C5   78..         MOV     R0,#?V0 + 2
   \   0001C7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CA   75..08       MOV     ?V0 + 4,#0x8
   \   0001CD   78..         MOV     R0,#?V0 + 4
   \   0001CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D2   78..         MOV     R0,#?V0 + 2
   \   0001D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D7   75..04       MOV     ?V0 + 2,#0x4
   \   0001DA   75..0F       MOV     ?V0 + 3,#0xf
   \   0001DD   78..         MOV     R0,#?V0 + 2
   \   0001DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E2   7908         MOV     R1,#0x8
   \   0001E4   7CFF         MOV     R4,#-0x1
   \   0001E6   7DFF         MOV     R5,#-0x1
   \   0001E8   E9           MOV     A,R1
   \   0001E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EC   AA82         MOV     R2,DPL
   \   0001EE   AB83         MOV     R3,DPH
   \   0001F0   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0001F3   7408         MOV     A,#0x8
   \   0001F5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F8   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_6:
   \   0001FB                ; Setup parameters for call to function GenericApp_MessageMSGCB
   \   0001FB   AA..         MOV     R2,?V0 + 0
   \   0001FD   AB..         MOV     R3,?V0 + 1
   \   0001FF   12....       LCALL   ??GenericApp_MessageMSGCB?relay
   \   000202   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
    354              }
    355          
    356              // return unprocessed events
    357              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_5:
   \   000205   EE           MOV     A,R6
   \   000206   FA           MOV     R2,A
   \   000207   EF           MOV     A,R7
   \   000208   6480         XRL     A,#0x80
   \   00020A   801D         SJMP    ??GenericApp_ProcessEvent_14
    358            }
    359          
    360            // Send a message out - This event is generated by a timer
    361            //  (setup in GenericApp_Init()).
    362            //´¥·¢¶¨Ê±Æ÷ÊÂ¼þ
    363            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_0:
   \   00020C   EE           MOV     A,R6
   \   00020D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00020F   501B         JNC     ??GenericApp_ProcessEvent_15
    364            {
    365              // Send "the" message
    366              GenericApp_SendPeriodicMessage();
                     ^
Warning[Pe223]: function "GenericApp_SendPeriodicMessage" declared implicitly
   \   000211                ; Setup parameters for call to function GenericApp_SendPeriodicMessage
   \   000211   12....       LCALL   ??GenericApp_SendPeriodicMessage?relay
    367          
    368              // Setup to send message again
    369              osal_start_timerEx( GenericApp_TaskID,
    370                                  GENERICAPP_SEND_MSG_EVT,
    371                                  GENERICAPP_SEND_MSG_TIMEOUT );
   \   000214                ; Setup parameters for call to function osal_start_timerEx
   \   000214   7C88         MOV     R4,#-0x78
   \   000216   7D13         MOV     R5,#0x13
   \   000218   7A01         MOV     R2,#0x1
   \   00021A   7B00         MOV     R3,#0x0
   \   00021C   90....       MOV     DPTR,#GenericApp_TaskID
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   F9           MOV     R1,A
   \   000221   12....       LCALL   ??osal_start_timerEx?relay
    372          
    373              // return unprocessed events
    374              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \   000224   EE           MOV     A,R6
   \   000225   6401         XRL     A,#0x1
   \   000227   FA           MOV     R2,A
   \   000228   EF           MOV     A,R7
   \                     ??GenericApp_ProcessEvent_14:
   \   000229   FB           MOV     R3,A
   \   00022A   8004         SJMP    ??GenericApp_ProcessEvent_16
    375            }
    376          
    377            
    378          #if defined( IAR_ARMCM3_LM )
    379            // Receive a message from the RTOS queue
    380            if ( events & GENERICAPP_RTOS_MSG_EVT )
    381            {
    382              // Process message from RTOS queue
    383              GenericApp_ProcessRtosMessage();
    384              // return unprocessed events
    385              return (events ^ GENERICAPP_RTOS_MSG_EVT);
    386            }
    387          #endif
    388          
    389            // Discard unknown events
    390            return 0;
   \                     ??GenericApp_ProcessEvent_15:
   \   00022C   7A00         MOV     R2,#0x0
   \   00022E   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_16:
   \   000230   7409         MOV     A,#0x9
   \   000232   12....       LCALL   ?DEALLOC_XSTACK8
   \   000235   7F06         MOV     R7,#0x6
   \   000237   02....       LJMP    ?BANKED_LEAVE_XDATA
    391          }
    392          
    393          /*********************************************************************
    394           * Event Generation Functions
    395           */
    396          
    397          /*********************************************************************
    398           * @fn      GenericApp_ProcessZDOMsgs()
    399           *
    400           * @brief   Process response messages
    401           *
    402           * @param   none
    403           *
    404           * @return  none
    405           */
    406          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    407          {
    408            switch ( inMsg->clusterID )
    409            {
    410              case End_Device_Bind_rsp:
    411                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    412                {
    413                  // Light LED
    414                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    415                }
    416          #if defined( BLINK_LEDS )
    417                else
    418                {
    419                  // Flash LED to show failure
    420                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
    421                }
    422          #endif
    423                break;
    424          
    425              case Match_Desc_rsp:
    426                {
    427                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    428                  if ( pRsp )
    429                  {
    430                    if ( pRsp->status == ZSuccess && pRsp->cnt )
    431                    {
    432                      GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    433                      GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    434                      // Take the first endpoint, Can be changed to search through endpoints
    435                      GenericApp_DstAddr.endPoint = pRsp->epList[0];
    436          
    437                      // Light LED
    438                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    439                    }
    440                    osal_mem_free( pRsp );
    441                  }
    442                }
    443                break;
    444            }
    445          }
    446          
    447          /*********************************************************************
    448           * @fn      GenericApp_HandleKeys
    449           *
    450           * @brief   Handles all key events for this device.
    451           *
    452           * @param   shift - true if in shift/alt.
    453           * @param   keys - bit field for key events. Valid entries:
    454           *                 HAL_KEY_SW_4
    455           *                 HAL_KEY_SW_3
    456           *                 HAL_KEY_SW_2
    457           *                 HAL_KEY_SW_1
    458           *
    459           * @return  none
    460           */
    461          static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
    462          {
    463            zAddrType_t dstAddr;
    464          
    465            // Shift is used to make each button/switch dual purpose.
    466            if ( shift )
    467            {
    468              if ( keys & HAL_KEY_SW_1 )
    469              {
    470              }
    471              if ( keys & HAL_KEY_SW_2 )
    472              {
    473              }
    474              if ( keys & HAL_KEY_SW_3 )
    475              {
    476              }
    477              if ( keys & HAL_KEY_SW_4 )
    478              {
    479              }
    480            }
    481            else
    482            {
    483              if ( keys & HAL_KEY_SW_1 )
    484              {
    485                // Since SW1 isn't used for anything else in this application...
    486          #if defined( SWITCH1_BIND )
    487                // we can use SW1 to simulate SW2 for devices that only have one switch,
    488                keys |= HAL_KEY_SW_2;
    489          #elif defined( SWITCH1_MATCH )
    490                // or use SW1 to simulate SW4 for devices that only have one switch
    491                keys |= HAL_KEY_SW_4;
    492          #endif
    493              }
    494          
    495              if ( keys & HAL_KEY_SW_2 )
    496              {
    497                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    498          
    499                // Initiate an End Device Bind Request for the mandatory endpoint
    500                dstAddr.addrMode = Addr16Bit;
    501                dstAddr.addr.shortAddr = 0x0000; // Coordinator
    502                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    503                                      GenericApp_epDesc.endPoint,
    504                                      GENERICAPP_PROFID,
    505                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    506                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    507                                      FALSE );
    508              }
    509          
    510              if ( keys & HAL_KEY_SW_3 )
    511              {
    512              }
    513          
    514              if ( keys & HAL_KEY_SW_4 )
    515              {
    516                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    517                // Initiate a Match Description Request (Service Discovery)
    518                dstAddr.addrMode = AddrBroadcast;
    519                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    520                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    521                                  GENERICAPP_PROFID,
    522                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    523                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    524                                  FALSE );
    525              }
    526            }
    527          }
    528          
    529          /*********************************************************************
    530           * LOCAL FUNCTIONS
    531           */
    532          
    533          /*********************************************************************
    534           * @fn      GenericApp_MessageMSGCB
    535           *
    536           * @brief   Data message processor callback.  This function processes
    537           *          any incoming data - probably from other devices.  So, based
    538           *          on cluster ID, perform the intended action.
    539           *
    540           * @param   none
    541           *
    542           * @return  none
    543           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    544          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     GenericApp_MessageMSGCB:
    545          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    546            unsigned char buffer[24];
    547            unsigned char WenDuChars[2];
                                 ^
Warning[Pe550]: variable "WenDuChars" was set but never used
    548            unsigned char ShiDuChars[2]; 
                                 ^
Warning[Pe550]: variable "ShiDuChars" was set but never used
    549            switch ( pkt->clusterId )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 1,A
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_MessageMSGCB>_0`:
   \   00001E   0000         DW        0
   \   000020   0200         DW        2
   \   000022   0100         DW        1
   \   000024   ....         DW        ??GenericApp_MessageMSGCB_0
   \   000026   0700         DW        7
   \   000028   ....         DW        ??GenericApp_MessageMSGCB_1
   \   00002A   ....         DW        ??GenericApp_MessageMSGCB_2
    550            {
    551             case GENERICAPP_CLUSTERID_LINGHT:
    552              P1_0=~P1_0;
   \                     ??GenericApp_MessageMSGCB_1:
   \   00002C   A290         MOV     C,0x90.0
   \   00002E   D2F0         SETB    B.0
   \   000030   A290         MOV     C,0x90.0
   \   000032   30F001       JNB     B.0,??GenericApp_MessageMSGCB_3
   \   000035   B3           CPL     C
   \                     ??GenericApp_MessageMSGCB_3:
   \   000036   9290         MOV     0x90.0,C
    553              P1_1=~P1_1;
   \   000038   A291         MOV     C,0x90.1
   \   00003A   A291         MOV     C,0x90.1
   \   00003C   30F001       JNB     B.0,??GenericApp_MessageMSGCB_4
   \   00003F   B3           CPL     C
   \                     ??GenericApp_MessageMSGCB_4:
   \   000040   9291         MOV     0x90.1,C
    554          
    555              P1_4=~P1_4;
   \   000042   A294         MOV     C,0x90.4
   \   000044   A294         MOV     C,0x90.4
   \   000046   30F001       JNB     B.0,??GenericApp_MessageMSGCB_5
   \   000049   B3           CPL     C
   \                     ??GenericApp_MessageMSGCB_5:
   \   00004A   9294         MOV     0x90.4,C
    556              
    557              osal_memcpy(buffer,pkt->cmd.Data,3);
   \   00004C                ; Setup parameters for call to function osal_memcpy
   \   00004C   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000052   7C03         MOV     R4,#0x3
   \   000054   7D00         MOV     R5,#0x0
   \   000056   EC           MOV     A,R4
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   AA82         MOV     R2,DPL
   \   00005C   AB83         MOV     R3,DPH
   \   00005E   12....       LCALL   ??osal_memcpy?relay
   \   000061   7403         MOV     A,#0x3
   \   000063   12....       LCALL   ?DEALLOC_XSTACK8
    558              //char Txdata[25];
    559             // strcpy(Txdata,"HELLO");
    560              if(buffer[0]!=0)
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   7003         JNZ     $+5
   \   00006F   02....       LJMP    ??GenericApp_MessageMSGCB_2 & 0xFFFF
    561                {
    562                  HalUARTWrite(0,"Light",5);
   \   000072                ; Setup parameters for call to function HalUARTWrite
   \   000072   7C05         MOV     R4,#0x5
   \   000074   7D00         MOV     R5,#0x0
   \   000076   7A..         MOV     R2,#`?<Constant "Light">` & 0xff
   \   000078   7B..         MOV     R3,#(`?<Constant "Light">` >> 8) & 0xff
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   12....       LCALL   ??HalUARTWrite?relay
    563                  HalUARTWrite(0,buffer,3);
   \   00007F                ; Setup parameters for call to function HalUARTWrite
   \   00007F   7C03         MOV     R4,#0x3
   \   000081   805B         SJMP    ??GenericApp_MessageMSGCB_6
    564                  HalUARTWrite(0,"\n",1);
    565                 /*HalUARTWrite(0,"guang",5);*/
    566                }
    567              break;
    568              case GENERICAPP_CLUSTERID_TEMHUM:
    569                
    570              osal_memcpy(buffer,pkt->cmd.Data,2);
   \                     ??GenericApp_MessageMSGCB_0:
   \   000083                ; Setup parameters for call to function osal_memcpy
   \   000083   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000089   7C02         MOV     R4,#0x2
   \   00008B   7D00         MOV     R5,#0x0
   \   00008D   7403         MOV     A,#0x3
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   AA82         MOV     R2,DPL
   \   000094   AB83         MOV     R3,DPH
   \   000096   12....       LCALL   ??osal_memcpy?relay
   \   000099   7403         MOV     A,#0x3
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
    571              if(buffer[0]!=0)
   \   00009E   85..82       MOV     DPL,?XSP + 0
   \   0000A1   85..83       MOV     DPH,?XSP + 1
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   6020         JZ      ??GenericApp_MessageMSGCB_7
    572                {
    573                  WenDuChars[0]=buffer[0]/10+'0';
    574                  WenDuChars[1]=buffer[0]%10+'0';
    575                  HalUARTWrite(0,"tem",3);
   \   0000A7                ; Setup parameters for call to function HalUARTWrite
   \   0000A7   7C03         MOV     R4,#0x3
   \   0000A9   7D00         MOV     R5,#0x0
   \   0000AB   7A..         MOV     R2,#`?<Constant "tem">` & 0xff
   \   0000AD   7B..         MOV     R3,#(`?<Constant "tem">` >> 8) & 0xff
   \   0000AF   7900         MOV     R1,#0x0
   \   0000B1   12....       LCALL   ??HalUARTWrite?relay
    576                  HalUARTWrite(0,buffer,1);
   \   0000B4                ; Setup parameters for call to function HalUARTWrite
   \   0000B4   7C01         MOV     R4,#0x1
   \   0000B6   7D00         MOV     R5,#0x0
   \   0000B8   85..82       MOV     DPL,?XSP + 0
   \   0000BB   85..83       MOV     DPH,?XSP + 1
   \   0000BE   AA82         MOV     R2,DPL
   \   0000C0   AB83         MOV     R3,DPH
   \   0000C2   7900         MOV     R1,#0x0
   \   0000C4   12....       LCALL   ??HalUARTWrite?relay
    577                  /*HalUARTWrite(1,"$u,01,00,",9);*/
    578                }
    579                else
    580                {
    581                  //HalUARTWrite(1,"It's Wrong",10);
    582                }
    583                if(buffer[1]!=0)
   \                     ??GenericApp_MessageMSGCB_7:
   \   0000C7   7401         MOV     A,#0x1
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   602D         JZ      ??GenericApp_MessageMSGCB_2
    584                { 
    585                  ShiDuChars[0]=buffer[1]/10+'0';
    586                  ShiDuChars[1]=buffer[1]%10+'0';
    587                  HalUARTWrite(0,"hum",3);
   \   0000CF                ; Setup parameters for call to function HalUARTWrite
   \   0000CF   7C03         MOV     R4,#0x3
   \   0000D1   7D00         MOV     R5,#0x0
   \   0000D3   7A..         MOV     R2,#`?<Constant "hum">` & 0xff
   \   0000D5   7B..         MOV     R3,#(`?<Constant "hum">` >> 8) & 0xff
   \   0000D7   7900         MOV     R1,#0x0
   \   0000D9   12....       LCALL   ??HalUARTWrite?relay
    588                  HalUARTWrite(0,buffer,1);
   \   0000DC                ; Setup parameters for call to function HalUARTWrite
   \   0000DC   7C01         MOV     R4,#0x1
   \                     ??GenericApp_MessageMSGCB_6:
   \   0000DE   7D00         MOV     R5,#0x0
   \   0000E0   85..82       MOV     DPL,?XSP + 0
   \   0000E3   85..83       MOV     DPH,?XSP + 1
   \   0000E6   AA82         MOV     R2,DPL
   \   0000E8   AB83         MOV     R3,DPH
   \   0000EA   7900         MOV     R1,#0x0
   \   0000EC   12....       LCALL   ??HalUARTWrite?relay
    589                  HalUARTWrite(0,"\n",1);
   \   0000EF                ; Setup parameters for call to function HalUARTWrite
   \   0000EF   7C01         MOV     R4,#0x1
   \   0000F1   7D00         MOV     R5,#0x0
   \   0000F3   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   0000F5   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   0000F7   7900         MOV     R1,#0x0
   \   0000F9   12....       LCALL   ??HalUARTWrite?relay
    590                 /* HalUARTWrite(1,"\n",1);*/
    591                }
    592                else
    593                {
    594                  //HalUARTWrite(1,"It's Wrong",10);
    595                } 
    596              break;
    597            }
    598          }
   \                     ??GenericApp_MessageMSGCB_2:
   \   0000FC   7418         MOV     A,#0x18
   \   0000FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000101   7F04         MOV     R7,#0x4
   \   000103   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000106                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 1,A
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   22           RET
    599          
    600          /*********************************************************************
    601           * @fn      GenericApp_SendTheMessage
    602           *
    603           * @brief   Send "the" message.
    604           *
    605           * @param   none
    606           *
    607           * @return  none
    608           */
    609          static void GenericApp_SendTheMessage( void )
                             ^
Warning[Pe177]: function "GenericApp_SendTheMessage" was declared but never
          referenced
    610          {
    611            char theMessageData[] = "Hello World";
    612          
    613            if ( AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    614                                 GENERICAPP_CLUSTERID_TEMHUM,
    615                                 (byte)osal_strlen( theMessageData ) + 1,
    616                                 (byte *)&theMessageData,
    617                                 &GenericApp_TransID,
    618                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    619            {
    620              // Successfully requested to be sent.
    621            }
    622            else
    623            {
    624              // Error occurred in request to send.
    625            }
    626          }
    627          static void GenericApp_SendPeriodMessage( void )
                             ^
Warning[Pe177]: function "GenericApp_SendPeriodMessage" was declared but never
          referenced
    628          {
    629            char theMessageData[] = "Hello World";
    630          
    631            if ( AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    632                                 GENERICAPP_CLUSTERID_TEMHUM,
    633                                 (byte)osal_strlen( theMessageData ) + 1,
    634                                 (byte *)&theMessageData,
    635                                 &GenericApp_TransID,
    636                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    637            {
    638              // Successfully requested to be sent.
    639            }
    640            else
    641            {
    642              // Error occurred in request to send.
    643            }
    644          }
    645          
    646          
    647          #if defined( IAR_ARMCM3_LM )
    648          /*********************************************************************
    649           * @fn      GenericApp_ProcessRtosMessage
    650           *
    651           * @brief   Receive message from RTOS queue, send response back.
    652           *
    653           * @param   none
    654           *
    655           * @return  none
    656           */
    657          static void GenericApp_ProcessRtosMessage( void )
    658          {
    659            osalQueue_t inMsg;
    660          
    661            if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
    662            {
    663              uint8 cmndId = inMsg.cmnd;
    664              uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
    665          
    666              switch ( cmndId )
    667              {
    668                case CMD_INCR:
    669                  counter += 1;  /* Increment the incoming counter */
    670                                 /* Intentionally fall through next case */
    671          
    672                case CMD_ECHO:
    673                {
    674                  userQueue_t outMsg;
    675          
    676                  outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
    677                  osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
    678                  osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
    679                  break;
    680                }
    681                
    682                default:
    683                  break;  /* Ignore unknown command */    
    684              }
    685            }
    686          }
    687          #endif
    688          
    689          /*********************************************************************
    690           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    691          void GenericApp_start_usrt_test(void)
   \                     GenericApp_start_usrt_test:
    692          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    693            HalUARTWrite(0," UART SUCCESS",12);
   \   000004                ; Setup parameters for call to function HalUARTWrite
   \   000004   7C0C         MOV     R4,#0xc
   \   000006   7D00         MOV     R5,#0x0
   \   000008   7A..         MOV     R2,#`?<Constant " UART SUCCESS">` & 0xff
   \   00000A   7B..         MOV     R3,#(`?<Constant " UART SUCCESS">` >> 8) & 0xff
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   12....       LCALL   ??HalUARTWrite?relay
    694          }
   \   000011                REQUIRE ?Subroutine0
   \   000011                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    695          static void rxCB(uint8 port,uint8 event)
   \                     rxCB:
    696          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 40
   \   000004   74D8         MOV     A,#-0x28
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    697            //HalUARTWrite(0,"I get",5);
    698            unsigned  char Uartbuf[40];
    699            unsigned char len;
    700            len=HalUARTRead(0,Uartbuf,40);
    701            //HalUARTWrite(0,""+len,1);
    702            if(len)
   \   000009                ; Setup parameters for call to function HalUARTRead
   \   000009   7C28         MOV     R4,#0x28
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
   \   000017   7900         MOV     R1,#0x0
   \   000019   12....       LCALL   ??HalUARTRead?relay
   \   00001C   EA           MOV     A,R2
   \   00001D   6013         JZ      ??rxCB_0
    703            {
    704              HalUARTWrite(0,Uartbuf,40);
   \   00001F                ; Setup parameters for call to function HalUARTWrite
   \   00001F   7C28         MOV     R4,#0x28
   \   000021   7D00         MOV     R5,#0x0
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   AA82         MOV     R2,DPL
   \   00002B   AB83         MOV     R3,DPH
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   12....       LCALL   ??HalUARTWrite?relay
    705              len=0;
    706            }
    707          }
   \                     ??rxCB_0:
   \   000032   7428         MOV     A,#0x28
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   80..         SJMP    ?Subroutine0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delays?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delays

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_start_usrt_test?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_start_usrt_test

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GenericApp">`:
   \   000000   47656E65     DB "GenericApp"
   \            72696341
   \            707000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Light">`:
   \   000000   4C696768     DB "Light"
   \            7400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "tem">`:
   \   000000   74656D00     DB "tem"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "hum">`:
   \   000000   68756D00     DB "hum"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " UART SUCCESS">`:
   \   000000   20554152     DB " UART SUCCESS"
   \            54205355
   \            43434553
   \            5300    
    708          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  Delays
       0      0     39  GenericApp_Init
                          0 0 39 -> HalLcdWriteString
                          0 0 39 -> HalUARTOpen
                          0 0 39 -> MT_UartInit
                          0 0 39 -> MT_UartRegisterTaskID
                          0 0 39 -> RegisterForKeys
                          0 0 39 -> ZDO_RegisterForZDOMsg
                          0 0 39 -> afRegister
       0      0     62  GenericApp_MessageMSGCB
                          0 0 36 -> HalUARTWrite
                          0 0 39 -> osal_memcpy
       0      0     32  GenericApp_ProcessEvent
                          0 0 23 -> GenericApp_MessageMSGCB
                          0 0 23 -> GenericApp_SendPeriodicMessage
                          0 0 23 -> GenericApp_start_usrt_test
                          0 0 23 -> HalLedSet
                          0 0 23 -> NLME_GetShortAddr
                          0 0 23 -> ZDO_ParseEPListRsp
                          0 0 32 -> ZDP_EndDeviceBindReq
                          0 0 31 -> ZDP_MatchDescReq
                          0 0 23 -> osal_mem_free
                          0 0 23 -> osal_msg_deallocate
                          0 0 23 -> osal_msg_receive
                          0 0 23 -> osal_start_timerEx
       2      0     23  GenericApp_start_usrt_test
                          2 0  0 -> HalUARTWrite
       2      0     40  rxCB
                          2 0 40 -> HalUARTRead
                          2 0 40 -> HalUARTWrite


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?<Constant " UART SUCCESS">
      11  ?<Constant "GenericApp">
       6  ?<Constant "Light">
       2  ?<Constant "\n">
       4  ?<Constant "hum">
       4  ?<Constant "tem">
       6  ??Delays?relay
       6  ??GenericApp_Init?relay
       6  ??GenericApp_MessageMSGCB?relay
       6  ??GenericApp_ProcessEvent?relay
       6  ??GenericApp_start_usrt_test?relay
       6  ??rxCB?relay
       7  ?Subroutine0
      23  ?Subroutine1
       8  ?Subroutine2
       1  ADCV
       2  ADCValue
       2  AdcValue
      20  Delays
      16  GenericApp_ClusterList
      12  GenericApp_DstAddr
     178  GenericApp_Init
     262  GenericApp_MessageMSGCB
       1  GenericApp_NwkState
     570  GenericApp_ProcessEvent
      12  GenericApp_SimpleDesc
       1  GenericApp_TaskID
       1  GenericApp_TransID
       6  GenericApp_epDesc
      17  GenericApp_start_usrt_test
      40  MSGfromUart
       1  _A_P1
       2  i
      57  rxCB
       2  value

 
 1 142 bytes in segment BANKED_CODE
    36 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    69 bytes in segment XDATA_ROM_C
    70 bytes in segment XDATA_Z
 
 1 178 bytes of CODE  memory
    69 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
    70 bytes of XDATA memory

Errors: none
Warnings: 7
