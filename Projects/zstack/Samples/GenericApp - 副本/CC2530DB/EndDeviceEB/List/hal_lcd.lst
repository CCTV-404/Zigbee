###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             07/Dec/2016  11:04:11 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Components\hal\target\CC2530EB\hal_lcd.c    #
#    Command line       =  -f "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg #
#                          " (-DCPU32MHZ -DROOT=__near_func                   #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "E:\Lib\micro-electromechan #
#                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp - ¸±±¾\CC2530DB\..\..\..\Tools\CC2 #
#                          530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00100000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 E:\Lib\micro-electromechani #
#                          cal\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Components\hal\targe #
#                          t\CC2530EB\hal_lcd.c -D NWK_AUTO_POLL -D ZTOOL_P1  #
#                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC           #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\EndDeviceEB\List\" -lA               #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\EndDeviceEB\List\" --diag_suppress   #
#                          Pe001,Pa010 -o "E:\Lib\micro-electromechanical\Ê±Ñ #
#                          Ó\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gen #
#                          ericApp - ¸±±¾\CC2530DB\EndDeviceEB\Obj\" -e       #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾\CC2530DB\" -I "E:\Lib\micro-electromechanical #
#                          \Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples #
#                          \GenericApp - ¸±±¾\CC2530DB\..\Source\" -I         #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\..\..\..\ZMain\TI2530DB\" -I         #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\..\..\..\..\..\Components\hal\includ #
#                          e\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack #
#                          -CC2530-2.5.1a\Projects\zstack\Samples\GenericApp  #
#                          - ¸±±¾\CC2530DB\..\..\..\..\..\Components\hal\targ #
#                          et\CC2530EB\" -I "E:\Lib\micro-electromechanical\Ê #
#                          ±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\G #
#                          enericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\include\" -I "E:\Lib\micro-electromechanical #
#                          \Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples #
#                          \GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Compone #
#                          nts\mac\high_level\" -I "E:\Lib\micro-electromecha #
#                          nical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Co #
#                          mponents\mac\low_level\srf04\" -I                  #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\..\..\..\..\..\Components\mac\low_le #
#                          vel\srf04\single_chip\" -I                         #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\..\..\..\..\..\Components\mt\" -I    #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp -       #
#                          ¸±±¾\CC2530DB\..\..\..\..\..\Components\osal\inclu #
#                          de\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStac #
#                          k-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp #
#                           - ¸±±¾\CC2530DB\..\..\..\..\..\Components\service #
#                          s\saddr\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gener #
#                          icApp - ¸±±¾\CC2530DB\..\..\..\..\..\Components\se #
#                          rvices\sdata\" -I "E:\Lib\micro-electromechanical\ #
#                          Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\af\" -I "E:\Lib\micro-electromechanical\Ê #
#                          ±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\G #
#                          enericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\nwk\" -I "E:\Lib\micro-electromechanical\Ê #
#                          ±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\G #
#                          enericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Component #
#                          s\stack\sapi\" -I "E:\Lib\micro-electromechanical\ #
#                          Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sec\" -I "E:\Lib\micro-electromechanical\ #
#                          Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sys\" -I "E:\Lib\micro-electromechanical\ #
#                          Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\zdo\" -I "E:\Lib\micro-electromechanical\ #
#                          Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp - ¸±±¾\CC2530DB\..\..\..\..\..\Componen #
#                          ts\zmac\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gener #
#                          icApp - ¸±±¾\CC2530DB\..\..\..\..\..\Components\zm #
#                          ac\f8w\" -Ohz                                      #
#    List file          =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\GenericApp -        #
#                          ¸±±¾\CC2530DB\EndDeviceEB\List\hal_lcd.lst         #
#    Object file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\GenericApp -        #
#                          ¸±±¾\CC2530DB\EndDeviceEB\Obj\hal_lcd.r51          #
#                                                                             #
#                                                                             #
###############################################################################

E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Components\hal\target\CC2530EB\hal_lcd.c
      1          /**************************************************************************************************
      2            Filename:       hal_lcd.c
      3            Revised:        $Date: 2010-5-31$
      4            Author:         $QIUJIE TECH.INC$
      5          
      6            Description:    This file contains the interface to the HAL LCD Service. 
      7          
      8            IMPORTANT:   THE ORIGINAL CODE IS FROM TI, AND THE FONTS LIB AND 
      9                                RELATED CODE IS WRITTEN QIUJIE TECH
     10          
     11          
     12            Copyright 2007 - 2009 Texas Instruments Incorporated. All rights reserved.
     13          
     14            IMPORTANT: Your use of this Software is limited to those specific rights
     15            granted under the terms of a software license agreement between the user
     16            who downloaded the software, his/her employer (which must be your employer)
     17            and Texas Instruments Incorporated (the "License").  You may not use this
     18            Software unless you agree to abide by the terms of the License. The License
     19            limits your use, and you acknowledge, that the Software may not be modified,
     20            copied or distributed unless embedded on a Texas Instruments microcontroller
     21            or used solely and exclusively in conjunction with a Texas Instruments radio
     22            frequency transceiver, which is integrated into your product.  Other than for
     23            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     24            works of, modify, distribute, perform, display or sell this Software and/or
     25            its documentation for any purpose.
     26          
     27            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     28            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     29            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     30            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     31            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     32            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     33            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     34            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     35            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     36            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     37            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     38          
     39            Should you have any questions regarding your right to use this Software,
     40            contact Texas Instruments Incorporated at www.TI.com.
     41          **************************************************************************************************/
     42          
     43          /**************************************************************************************************
     44           *                                           INCLUDES
     45           **************************************************************************************************/
     46          #include "hal_types.h"
     47          #include "hal_lcd.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf8
   \   union <unnamed> volatile __sfr _A_U1CSR
   \                     _A_U1CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf9
   \   unsigned char volatile __sfr U1DBUF
   \                     U1DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfa
   \   unsigned char volatile __sfr U1BAUD
   \                     U1BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfb
   \   unsigned char volatile __sfr U1UCR
   \                     U1UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfc
   \   unsigned char volatile __sfr U1GCR
   \                     U1GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     48          #include "OSAL.h"
     49          #include "OnBoard.h"
     50          #include "hal_assert.h"
     51          
     52          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
     53            #include "DebugTrace.h"
     54          #endif
     55          
     56          /**************************************************************************************************
     57           *                                          CONSTANTS
     58           **************************************************************************************************/
     59          /*
     60            LCD pins
     61          
     62            //control
     63            P0.0 - LCD_MODE
     64            P1.1 - LCD_FLASH_RESET
     65            P1.2 - LCD_CS
     66          
     67            //spi
     68            P1.5 - CLK
     69            P1.6 - MOSI
     70            P1.7 - MISO
     71          */
     72          
     73          
     74          #define BIT0              0x01
     75          #define BIT1              0x02
     76          #define BIT2              0x04
     77          #define BIT3              0x08
     78          #define BIT4              0x10
     79          #define BIT5              0x20
     80          #define BIT6              0x40
     81          #define BIT7              0x80
     82          
     83          /* The ASCII fonts library, the matrix size is w*h = 8*12, created by QIUJIE TECH.INC */

   \                                 In  segment CODE_C, align 1
     84          __code const uint8 ASCIITAB_DZK[]=
   \                     ASCIITAB_DZK:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   30           DB 48
   \   00000E   78           DB 120
   \   00000F   78           DB 120
   \   000010   78           DB 120
   \   000011   30           DB 48
   \   000012   30           DB 48
   \   000013   00           DB 0
   \   000014   30           DB 48
   \   000015   30           DB 48
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   66           DB 102
   \   00001B   66           DB 102
   \   00001C   66           DB 102
   \   00001D   24           DB 36
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   6C           DB 108
   \   000027   6C           DB 108
   \   000028   FE           DB 254
   \   000029   6C           DB 108
   \   00002A   6C           DB 108
   \   00002B   6C           DB 108
   \   00002C   FE           DB 254
   \   00002D   6C           DB 108
   \   00002E   6C           DB 108
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   30           DB 48
   \   000032   30           DB 48
   \   000033   7C           DB 124
   \   000034   C0           DB 192
   \   000035   C0           DB 192
   \   000036   78           DB 120
   \   000037   0C           DB 12
   \   000038   0C           DB 12
   \   000039   F8           DB 248
   \   00003A   30           DB 48
   \   00003B   30           DB 48
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   C4           DB 196
   \   000041   CC           DB 204
   \   000042   18           DB 24
   \   000043   30           DB 48
   \   000044   60           DB 96
   \   000045   CC           DB 204
   \   000046   8C           DB 140
   \   000047   00           DB 0
   \   000048   00           DB 0
   \   000049   00           DB 0
   \   00004A   70           DB 112
   \   00004B   D8           DB 216
   \   00004C   D8           DB 216
   \   00004D   70           DB 112
   \   00004E   FA           DB 250
   \   00004F   DE           DB 222
   \   000050   CC           DB 204
   \   000051   DC           DB 220
   \   000052   76           DB 118
   \   000053   00           DB 0
   \   000054   00           DB 0
   \   000055   00           DB 0
   \   000056   30           DB 48
   \   000057   30           DB 48
   \   000058   30           DB 48
   \   000059   60           DB 96
   \   00005A   00           DB 0
   \   00005B   00           DB 0
   \   00005C   00           DB 0
   \   00005D   00           DB 0
   \   00005E   00           DB 0
   \   00005F   00           DB 0
   \   000060   00           DB 0
   \   000061   00           DB 0
   \   000062   0C           DB 12
   \   000063   18           DB 24
   \   000064   30           DB 48
   \   000065   60           DB 96
   \   000066   60           DB 96
   \   000067   60           DB 96
   \   000068   30           DB 48
   \   000069   18           DB 24
   \   00006A   0C           DB 12
   \   00006B   00           DB 0
   \   00006C   00           DB 0
   \   00006D   00           DB 0
   \   00006E   60           DB 96
   \   00006F   30           DB 48
   \   000070   18           DB 24
   \   000071   0C           DB 12
   \   000072   0C           DB 12
   \   000073   0C           DB 12
   \   000074   18           DB 24
   \   000075   30           DB 48
   \   000076   60           DB 96
   \   000077   00           DB 0
   \   000078   00           DB 0
   \   000079   00           DB 0
   \   00007A   00           DB 0
   \   00007B   00           DB 0
   \   00007C   66           DB 102
   \   00007D   3C           DB 60
   \   00007E   FF           DB 255
   \   00007F   3C           DB 60
   \   000080   66           DB 102
   \   000081   00           DB 0
   \   000082   00           DB 0
   \   000083   00           DB 0
   \   000084   00           DB 0
   \   000085   00           DB 0
   \   000086   00           DB 0
   \   000087   00           DB 0
   \   000088   18           DB 24
   \   000089   18           DB 24
   \   00008A   7E           DB 126
   \   00008B   18           DB 24
   \   00008C   18           DB 24
   \   00008D   00           DB 0
   \   00008E   00           DB 0
   \   00008F   00           DB 0
   \   000090   00           DB 0
   \   000091   00           DB 0
   \   000092   00           DB 0
   \   000093   00           DB 0
   \   000094   00           DB 0
   \   000095   00           DB 0
   \   000096   00           DB 0
   \   000097   00           DB 0
   \   000098   00           DB 0
   \   000099   38           DB 56
   \   00009A   38           DB 56
   \   00009B   60           DB 96
   \   00009C   00           DB 0
   \   00009D   00           DB 0
   \   00009E   00           DB 0
   \   00009F   00           DB 0
   \   0000A0   00           DB 0
   \   0000A1   00           DB 0
   \   0000A2   FE           DB 254
   \   0000A3   00           DB 0
   \   0000A4   00           DB 0
   \   0000A5   00           DB 0
   \   0000A6   00           DB 0
   \   0000A7   00           DB 0
   \   0000A8   00           DB 0
   \   0000A9   00           DB 0
   \   0000AA   00           DB 0
   \   0000AB   00           DB 0
   \   0000AC   00           DB 0
   \   0000AD   00           DB 0
   \   0000AE   00           DB 0
   \   0000AF   00           DB 0
   \   0000B0   00           DB 0
   \   0000B1   38           DB 56
   \   0000B2   38           DB 56
   \   0000B3   00           DB 0
   \   0000B4   00           DB 0
   \   0000B5   00           DB 0
   \   0000B6   00           DB 0
   \   0000B7   02           DB 2
   \   0000B8   06           DB 6
   \   0000B9   0C           DB 12
   \   0000BA   18           DB 24
   \   0000BB   30           DB 48
   \   0000BC   60           DB 96
   \   0000BD   C0           DB 192
   \   0000BE   80           DB 128
   \   0000BF   00           DB 0
   \   0000C0   00           DB 0
   \   0000C1   00           DB 0
   \   0000C2   7C           DB 124
   \   0000C3   C6           DB 198
   \   0000C4   CE           DB 206
   \   0000C5   DE           DB 222
   \   0000C6   D6           DB 214
   \   0000C7   F6           DB 246
   \   0000C8   E6           DB 230
   \   0000C9   C6           DB 198
   \   0000CA   7C           DB 124
   \   0000CB   00           DB 0
   \   0000CC   00           DB 0
   \   0000CD   00           DB 0
   \   0000CE   10           DB 16
   \   0000CF   30           DB 48
   \   0000D0   F0           DB 240
   \   0000D1   30           DB 48
   \   0000D2   30           DB 48
   \   0000D3   30           DB 48
   \   0000D4   30           DB 48
   \   0000D5   30           DB 48
   \   0000D6   FC           DB 252
   \   0000D7   00           DB 0
   \   0000D8   00           DB 0
   \   0000D9   00           DB 0
   \   0000DA   78           DB 120
   \   0000DB   CC           DB 204
   \   0000DC   CC           DB 204
   \   0000DD   0C           DB 12
   \   0000DE   18           DB 24
   \   0000DF   30           DB 48
   \   0000E0   60           DB 96
   \   0000E1   CC           DB 204
   \   0000E2   FC           DB 252
   \   0000E3   00           DB 0
   \   0000E4   00           DB 0
   \   0000E5   00           DB 0
   \   0000E6   78           DB 120
   \   0000E7   CC           DB 204
   \   0000E8   0C           DB 12
   \   0000E9   0C           DB 12
   \   0000EA   38           DB 56
   \   0000EB   0C           DB 12
   \   0000EC   0C           DB 12
   \   0000ED   CC           DB 204
   \   0000EE   78           DB 120
   \   0000EF   00           DB 0
   \   0000F0   00           DB 0
   \   0000F1   00           DB 0
   \   0000F2   0C           DB 12
   \   0000F3   1C           DB 28
   \   0000F4   3C           DB 60
   \   0000F5   6C           DB 108
   \   0000F6   CC           DB 204
   \   0000F7   FE           DB 254
   \   0000F8   0C           DB 12
   \   0000F9   0C           DB 12
   \   0000FA   1E           DB 30
   \   0000FB   00           DB 0
   \   0000FC   00           DB 0
   \   0000FD   00           DB 0
   \   0000FE   FC           DB 252
   \   0000FF   C0           DB 192
   \   000100   C0           DB 192
   \   000101   C0           DB 192
   \   000102   F8           DB 248
   \   000103   0C           DB 12
   \   000104   0C           DB 12
   \   000105   CC           DB 204
   \   000106   78           DB 120
   \   000107   00           DB 0
   \   000108   00           DB 0
   \   000109   00           DB 0
   \   00010A   38           DB 56
   \   00010B   60           DB 96
   \   00010C   C0           DB 192
   \   00010D   C0           DB 192
   \   00010E   F8           DB 248
   \   00010F   CC           DB 204
   \   000110   CC           DB 204
   \   000111   CC           DB 204
   \   000112   78           DB 120
   \   000113   00           DB 0
   \   000114   00           DB 0
   \   000115   00           DB 0
   \   000116   FE           DB 254
   \   000117   C6           DB 198
   \   000118   C6           DB 198
   \   000119   06           DB 6
   \   00011A   0C           DB 12
   \   00011B   18           DB 24
   \   00011C   30           DB 48
   \   00011D   30           DB 48
   \   00011E   30           DB 48
   \   00011F   00           DB 0
   \   000120   00           DB 0
   \   000121   00           DB 0
   \   000122   78           DB 120
   \   000123   CC           DB 204
   \   000124   CC           DB 204
   \   000125   EC           DB 236
   \   000126   78           DB 120
   \   000127   DC           DB 220
   \   000128   CC           DB 204
   \   000129   CC           DB 204
   \   00012A   78           DB 120
   \   00012B   00           DB 0
   \   00012C   00           DB 0
   \   00012D   00           DB 0
   \   00012E   78           DB 120
   \   00012F   CC           DB 204
   \   000130   CC           DB 204
   \   000131   CC           DB 204
   \   000132   7C           DB 124
   \   000133   18           DB 24
   \   000134   18           DB 24
   \   000135   30           DB 48
   \   000136   70           DB 112
   \   000137   00           DB 0
   \   000138   00           DB 0
   \   000139   00           DB 0
   \   00013A   00           DB 0
   \   00013B   00           DB 0
   \   00013C   38           DB 56
   \   00013D   38           DB 56
   \   00013E   00           DB 0
   \   00013F   00           DB 0
   \   000140   38           DB 56
   \   000141   38           DB 56
   \   000142   00           DB 0
   \   000143   00           DB 0
   \   000144   00           DB 0
   \   000145   00           DB 0
   \   000146   00           DB 0
   \   000147   00           DB 0
   \   000148   38           DB 56
   \   000149   38           DB 56
   \   00014A   00           DB 0
   \   00014B   00           DB 0
   \   00014C   38           DB 56
   \   00014D   38           DB 56
   \   00014E   18           DB 24
   \   00014F   30           DB 48
   \   000150   00           DB 0
   \   000151   00           DB 0
   \   000152   0C           DB 12
   \   000153   18           DB 24
   \   000154   30           DB 48
   \   000155   60           DB 96
   \   000156   C0           DB 192
   \   000157   60           DB 96
   \   000158   30           DB 48
   \   000159   18           DB 24
   \   00015A   0C           DB 12
   \   00015B   00           DB 0
   \   00015C   00           DB 0
   \   00015D   00           DB 0
   \   00015E   00           DB 0
   \   00015F   00           DB 0
   \   000160   00           DB 0
   \   000161   7E           DB 126
   \   000162   00           DB 0
   \   000163   7E           DB 126
   \   000164   00           DB 0
   \   000165   00           DB 0
   \   000166   00           DB 0
   \   000167   00           DB 0
   \   000168   00           DB 0
   \   000169   00           DB 0
   \   00016A   60           DB 96
   \   00016B   30           DB 48
   \   00016C   18           DB 24
   \   00016D   0C           DB 12
   \   00016E   06           DB 6
   \   00016F   0C           DB 12
   \   000170   18           DB 24
   \   000171   30           DB 48
   \   000172   60           DB 96
   \   000173   00           DB 0
   \   000174   00           DB 0
   \   000175   00           DB 0
   \   000176   78           DB 120
   \   000177   CC           DB 204
   \   000178   0C           DB 12
   \   000179   18           DB 24
   \   00017A   30           DB 48
   \   00017B   30           DB 48
   \   00017C   00           DB 0
   \   00017D   30           DB 48
   \   00017E   30           DB 48
   \   00017F   00           DB 0
   \   000180   00           DB 0
   \   000181   00           DB 0
   \   000182   7C           DB 124
   \   000183   C6           DB 198
   \   000184   C6           DB 198
   \   000185   DE           DB 222
   \   000186   DE           DB 222
   \   000187   DE           DB 222
   \   000188   C0           DB 192
   \   000189   C0           DB 192
   \   00018A   7C           DB 124
   \   00018B   00           DB 0
   \   00018C   00           DB 0
   \   00018D   00           DB 0
   \   00018E   30           DB 48
   \   00018F   78           DB 120
   \   000190   CC           DB 204
   \   000191   CC           DB 204
   \   000192   CC           DB 204
   \   000193   FC           DB 252
   \   000194   CC           DB 204
   \   000195   CC           DB 204
   \   000196   CC           DB 204
   \   000197   00           DB 0
   \   000198   00           DB 0
   \   000199   00           DB 0
   \   00019A   FC           DB 252
   \   00019B   66           DB 102
   \   00019C   66           DB 102
   \   00019D   66           DB 102
   \   00019E   7C           DB 124
   \   00019F   66           DB 102
   \   0001A0   66           DB 102
   \   0001A1   66           DB 102
   \   0001A2   FC           DB 252
   \   0001A3   00           DB 0
   \   0001A4   00           DB 0
   \   0001A5   00           DB 0
   \   0001A6   3C           DB 60
   \   0001A7   66           DB 102
   \   0001A8   C6           DB 198
   \   0001A9   C0           DB 192
   \   0001AA   C0           DB 192
   \   0001AB   C0           DB 192
   \   0001AC   C6           DB 198
   \   0001AD   66           DB 102
   \   0001AE   3C           DB 60
   \   0001AF   00           DB 0
   \   0001B0   00           DB 0
   \   0001B1   00           DB 0
   \   0001B2   F8           DB 248
   \   0001B3   6C           DB 108
   \   0001B4   66           DB 102
   \   0001B5   66           DB 102
   \   0001B6   66           DB 102
   \   0001B7   66           DB 102
   \   0001B8   66           DB 102
   \   0001B9   6C           DB 108
   \   0001BA   F8           DB 248
   \   0001BB   00           DB 0
   \   0001BC   00           DB 0
   \   0001BD   00           DB 0
   \   0001BE   FE           DB 254
   \   0001BF   62           DB 98
   \   0001C0   60           DB 96
   \   0001C1   64           DB 100
   \   0001C2   7C           DB 124
   \   0001C3   64           DB 100
   \   0001C4   60           DB 96
   \   0001C5   62           DB 98
   \   0001C6   FE           DB 254
   \   0001C7   00           DB 0
   \   0001C8   00           DB 0
   \   0001C9   00           DB 0
   \   0001CA   FE           DB 254
   \   0001CB   66           DB 102
   \   0001CC   62           DB 98
   \   0001CD   64           DB 100
   \   0001CE   7C           DB 124
   \   0001CF   64           DB 100
   \   0001D0   60           DB 96
   \   0001D1   60           DB 96
   \   0001D2   F0           DB 240
   \   0001D3   00           DB 0
   \   0001D4   00           DB 0
   \   0001D5   00           DB 0
   \   0001D6   3C           DB 60
   \   0001D7   66           DB 102
   \   0001D8   C6           DB 198
   \   0001D9   C0           DB 192
   \   0001DA   C0           DB 192
   \   0001DB   CE           DB 206
   \   0001DC   C6           DB 198
   \   0001DD   66           DB 102
   \   0001DE   3E           DB 62
   \   0001DF   00           DB 0
   \   0001E0   00           DB 0
   \   0001E1   00           DB 0
   \   0001E2   CC           DB 204
   \   0001E3   CC           DB 204
   \   0001E4   CC           DB 204
   \   0001E5   CC           DB 204
   \   0001E6   FC           DB 252
   \   0001E7   CC           DB 204
   \   0001E8   CC           DB 204
   \   0001E9   CC           DB 204
   \   0001EA   CC           DB 204
   \   0001EB   00           DB 0
   \   0001EC   00           DB 0
   \   0001ED   00           DB 0
   \   0001EE   78           DB 120
   \   0001EF   30           DB 48
   \   0001F0   30           DB 48
   \   0001F1   30           DB 48
   \   0001F2   30           DB 48
   \   0001F3   30           DB 48
   \   0001F4   30           DB 48
   \   0001F5   30           DB 48
   \   0001F6   78           DB 120
   \   0001F7   00           DB 0
   \   0001F8   00           DB 0
   \   0001F9   00           DB 0
   \   0001FA   1E           DB 30
   \   0001FB   0C           DB 12
   \   0001FC   0C           DB 12
   \   0001FD   0C           DB 12
   \   0001FE   0C           DB 12
   \   0001FF   CC           DB 204
   \   000200   CC           DB 204
   \   000201   CC           DB 204
   \   000202   78           DB 120
   \   000203   00           DB 0
   \   000204   00           DB 0
   \   000205   00           DB 0
   \   000206   E6           DB 230
   \   000207   66           DB 102
   \   000208   6C           DB 108
   \   000209   6C           DB 108
   \   00020A   78           DB 120
   \   00020B   6C           DB 108
   \   00020C   6C           DB 108
   \   00020D   66           DB 102
   \   00020E   E6           DB 230
   \   00020F   00           DB 0
   \   000210   00           DB 0
   \   000211   00           DB 0
   \   000212   F0           DB 240
   \   000213   60           DB 96
   \   000214   60           DB 96
   \   000215   60           DB 96
   \   000216   60           DB 96
   \   000217   62           DB 98
   \   000218   66           DB 102
   \   000219   66           DB 102
   \   00021A   FE           DB 254
   \   00021B   00           DB 0
   \   00021C   00           DB 0
   \   00021D   00           DB 0
   \   00021E   C6           DB 198
   \   00021F   EE           DB 238
   \   000220   FE           DB 254
   \   000221   FE           DB 254
   \   000222   D6           DB 214
   \   000223   C6           DB 198
   \   000224   C6           DB 198
   \   000225   C6           DB 198
   \   000226   C6           DB 198
   \   000227   00           DB 0
   \   000228   00           DB 0
   \   000229   00           DB 0
   \   00022A   C6           DB 198
   \   00022B   C6           DB 198
   \   00022C   E6           DB 230
   \   00022D   F6           DB 246
   \   00022E   FE           DB 254
   \   00022F   DE           DB 222
   \   000230   CE           DB 206
   \   000231   C6           DB 198
   \   000232   C6           DB 198
   \   000233   00           DB 0
   \   000234   00           DB 0
   \   000235   00           DB 0
   \   000236   38           DB 56
   \   000237   6C           DB 108
   \   000238   C6           DB 198
   \   000239   C6           DB 198
   \   00023A   C6           DB 198
   \   00023B   C6           DB 198
   \   00023C   C6           DB 198
   \   00023D   6C           DB 108
   \   00023E   38           DB 56
   \   00023F   00           DB 0
   \   000240   00           DB 0
   \   000241   00           DB 0
   \   000242   FC           DB 252
   \   000243   66           DB 102
   \   000244   66           DB 102
   \   000245   66           DB 102
   \   000246   7C           DB 124
   \   000247   60           DB 96
   \   000248   60           DB 96
   \   000249   60           DB 96
   \   00024A   F0           DB 240
   \   00024B   00           DB 0
   \   00024C   00           DB 0
   \   00024D   00           DB 0
   \   00024E   38           DB 56
   \   00024F   6C           DB 108
   \   000250   C6           DB 198
   \   000251   C6           DB 198
   \   000252   C6           DB 198
   \   000253   CE           DB 206
   \   000254   DE           DB 222
   \   000255   7C           DB 124
   \   000256   0C           DB 12
   \   000257   1E           DB 30
   \   000258   00           DB 0
   \   000259   00           DB 0
   \   00025A   FC           DB 252
   \   00025B   66           DB 102
   \   00025C   66           DB 102
   \   00025D   66           DB 102
   \   00025E   7C           DB 124
   \   00025F   6C           DB 108
   \   000260   66           DB 102
   \   000261   66           DB 102
   \   000262   E6           DB 230
   \   000263   00           DB 0
   \   000264   00           DB 0
   \   000265   00           DB 0
   \   000266   78           DB 120
   \   000267   CC           DB 204
   \   000268   CC           DB 204
   \   000269   C0           DB 192
   \   00026A   70           DB 112
   \   00026B   18           DB 24
   \   00026C   CC           DB 204
   \   00026D   CC           DB 204
   \   00026E   78           DB 120
   \   00026F   00           DB 0
   \   000270   00           DB 0
   \   000271   00           DB 0
   \   000272   FC           DB 252
   \   000273   B4           DB 180
   \   000274   30           DB 48
   \   000275   30           DB 48
   \   000276   30           DB 48
   \   000277   30           DB 48
   \   000278   30           DB 48
   \   000279   30           DB 48
   \   00027A   78           DB 120
   \   00027B   00           DB 0
   \   00027C   00           DB 0
   \   00027D   00           DB 0
   \   00027E   CC           DB 204
   \   00027F   CC           DB 204
   \   000280   CC           DB 204
   \   000281   CC           DB 204
   \   000282   CC           DB 204
   \   000283   CC           DB 204
   \   000284   CC           DB 204
   \   000285   CC           DB 204
   \   000286   78           DB 120
   \   000287   00           DB 0
   \   000288   00           DB 0
   \   000289   00           DB 0
   \   00028A   CC           DB 204
   \   00028B   CC           DB 204
   \   00028C   CC           DB 204
   \   00028D   CC           DB 204
   \   00028E   CC           DB 204
   \   00028F   CC           DB 204
   \   000290   CC           DB 204
   \   000291   78           DB 120
   \   000292   30           DB 48
   \   000293   00           DB 0
   \   000294   00           DB 0
   \   000295   00           DB 0
   \   000296   C6           DB 198
   \   000297   C6           DB 198
   \   000298   C6           DB 198
   \   000299   C6           DB 198
   \   00029A   D6           DB 214
   \   00029B   D6           DB 214
   \   00029C   6C           DB 108
   \   00029D   6C           DB 108
   \   00029E   6C           DB 108
   \   00029F   00           DB 0
   \   0002A0   00           DB 0
   \   0002A1   00           DB 0
   \   0002A2   CC           DB 204
   \   0002A3   CC           DB 204
   \   0002A4   CC           DB 204
   \   0002A5   78           DB 120
   \   0002A6   30           DB 48
   \   0002A7   78           DB 120
   \   0002A8   CC           DB 204
   \   0002A9   CC           DB 204
   \   0002AA   CC           DB 204
   \   0002AB   00           DB 0
   \   0002AC   00           DB 0
   \   0002AD   00           DB 0
   \   0002AE   CC           DB 204
   \   0002AF   CC           DB 204
   \   0002B0   CC           DB 204
   \   0002B1   CC           DB 204
   \   0002B2   78           DB 120
   \   0002B3   30           DB 48
   \   0002B4   30           DB 48
   \   0002B5   30           DB 48
   \   0002B6   78           DB 120
   \   0002B7   00           DB 0
   \   0002B8   00           DB 0
   \   0002B9   00           DB 0
   \   0002BA   FE           DB 254
   \   0002BB   CE           DB 206
   \   0002BC   98           DB 152
   \   0002BD   18           DB 24
   \   0002BE   30           DB 48
   \   0002BF   60           DB 96
   \   0002C0   62           DB 98
   \   0002C1   C6           DB 198
   \   0002C2   FE           DB 254
   \   0002C3   00           DB 0
   \   0002C4   00           DB 0
   \   0002C5   00           DB 0
   \   0002C6   3C           DB 60
   \   0002C7   30           DB 48
   \   0002C8   30           DB 48
   \   0002C9   30           DB 48
   \   0002CA   30           DB 48
   \   0002CB   30           DB 48
   \   0002CC   30           DB 48
   \   0002CD   30           DB 48
   \   0002CE   3C           DB 60
   \   0002CF   00           DB 0
   \   0002D0   00           DB 0
   \   0002D1   00           DB 0
   \   0002D2   00           DB 0
   \   0002D3   80           DB 128
   \   0002D4   C0           DB 192
   \   0002D5   60           DB 96
   \   0002D6   30           DB 48
   \   0002D7   18           DB 24
   \   0002D8   0C           DB 12
   \   0002D9   06           DB 6
   \   0002DA   02           DB 2
   \   0002DB   00           DB 0
   \   0002DC   00           DB 0
   \   0002DD   00           DB 0
   \   0002DE   3C           DB 60
   \   0002DF   0C           DB 12
   \   0002E0   0C           DB 12
   \   0002E1   0C           DB 12
   \   0002E2   0C           DB 12
   \   0002E3   0C           DB 12
   \   0002E4   0C           DB 12
   \   0002E5   0C           DB 12
   \   0002E6   3C           DB 60
   \   0002E7   00           DB 0
   \   0002E8   00           DB 0
   \   0002E9   10           DB 16
   \   0002EA   38           DB 56
   \   0002EB   6C           DB 108
   \   0002EC   C6           DB 198
   \   0002ED   00           DB 0
   \   0002EE   00           DB 0
   \   0002EF   00           DB 0
   \   0002F0   00           DB 0
   \   0002F1   00           DB 0
   \   0002F2   00           DB 0
   \   0002F3   00           DB 0
   \   0002F4   00           DB 0
   \   0002F5   00           DB 0
   \   0002F6   00           DB 0
   \   0002F7   00           DB 0
   \   0002F8   00           DB 0
   \   0002F9   00           DB 0
   \   0002FA   00           DB 0
   \   0002FB   00           DB 0
   \   0002FC   00           DB 0
   \   0002FD   00           DB 0
   \   0002FE   00           DB 0
   \   0002FF   FF           DB 255
   \   000300   00           DB 0
   \   000301   30           DB 48
   \   000302   30           DB 48
   \   000303   18           DB 24
   \   000304   00           DB 0
   \   000305   00           DB 0
   \   000306   00           DB 0
   \   000307   00           DB 0
   \   000308   00           DB 0
   \   000309   00           DB 0
   \   00030A   00           DB 0
   \   00030B   00           DB 0
   \   00030C   00           DB 0
   \   00030D   00           DB 0
   \   00030E   00           DB 0
   \   00030F   00           DB 0
   \   000310   00           DB 0
   \   000311   78           DB 120
   \   000312   0C           DB 12
   \   000313   7C           DB 124
   \   000314   CC           DB 204
   \   000315   CC           DB 204
   \   000316   76           DB 118
   \   000317   00           DB 0
   \   000318   00           DB 0
   \   000319   00           DB 0
   \   00031A   E0           DB 224
   \   00031B   60           DB 96
   \   00031C   60           DB 96
   \   00031D   7C           DB 124
   \   00031E   66           DB 102
   \   00031F   66           DB 102
   \   000320   66           DB 102
   \   000321   66           DB 102
   \   000322   DC           DB 220
   \   000323   00           DB 0
   \   000324   00           DB 0
   \   000325   00           DB 0
   \   000326   00           DB 0
   \   000327   00           DB 0
   \   000328   00           DB 0
   \   000329   78           DB 120
   \   00032A   CC           DB 204
   \   00032B   C0           DB 192
   \   00032C   C0           DB 192
   \   00032D   CC           DB 204
   \   00032E   78           DB 120
   \   00032F   00           DB 0
   \   000330   00           DB 0
   \   000331   00           DB 0
   \   000332   1C           DB 28
   \   000333   0C           DB 12
   \   000334   0C           DB 12
   \   000335   7C           DB 124
   \   000336   CC           DB 204
   \   000337   CC           DB 204
   \   000338   CC           DB 204
   \   000339   CC           DB 204
   \   00033A   76           DB 118
   \   00033B   00           DB 0
   \   00033C   00           DB 0
   \   00033D   00           DB 0
   \   00033E   00           DB 0
   \   00033F   00           DB 0
   \   000340   00           DB 0
   \   000341   78           DB 120
   \   000342   CC           DB 204
   \   000343   FC           DB 252
   \   000344   C0           DB 192
   \   000345   CC           DB 204
   \   000346   78           DB 120
   \   000347   00           DB 0
   \   000348   00           DB 0
   \   000349   00           DB 0
   \   00034A   38           DB 56
   \   00034B   6C           DB 108
   \   00034C   60           DB 96
   \   00034D   60           DB 96
   \   00034E   F8           DB 248
   \   00034F   60           DB 96
   \   000350   60           DB 96
   \   000351   60           DB 96
   \   000352   F0           DB 240
   \   000353   00           DB 0
   \   000354   00           DB 0
   \   000355   00           DB 0
   \   000356   00           DB 0
   \   000357   00           DB 0
   \   000358   76           DB 118
   \   000359   CC           DB 204
   \   00035A   CC           DB 204
   \   00035B   CC           DB 204
   \   00035C   7C           DB 124
   \   00035D   0C           DB 12
   \   00035E   CC           DB 204
   \   00035F   78           DB 120
   \   000360   00           DB 0
   \   000361   00           DB 0
   \   000362   E0           DB 224
   \   000363   60           DB 96
   \   000364   60           DB 96
   \   000365   6C           DB 108
   \   000366   76           DB 118
   \   000367   66           DB 102
   \   000368   66           DB 102
   \   000369   66           DB 102
   \   00036A   E6           DB 230
   \   00036B   00           DB 0
   \   00036C   00           DB 0
   \   00036D   00           DB 0
   \   00036E   18           DB 24
   \   00036F   18           DB 24
   \   000370   00           DB 0
   \   000371   78           DB 120
   \   000372   18           DB 24
   \   000373   18           DB 24
   \   000374   18           DB 24
   \   000375   18           DB 24
   \   000376   7E           DB 126
   \   000377   00           DB 0
   \   000378   00           DB 0
   \   000379   0C           DB 12
   \   00037A   0C           DB 12
   \   00037B   00           DB 0
   \   00037C   3C           DB 60
   \   00037D   0C           DB 12
   \   00037E   0C           DB 12
   \   00037F   0C           DB 12
   \   000380   0C           DB 12
   \   000381   CC           DB 204
   \   000382   CC           DB 204
   \   000383   78           DB 120
   \   000384   00           DB 0
   \   000385   00           DB 0
   \   000386   E0           DB 224
   \   000387   60           DB 96
   \   000388   60           DB 96
   \   000389   66           DB 102
   \   00038A   6C           DB 108
   \   00038B   78           DB 120
   \   00038C   6C           DB 108
   \   00038D   66           DB 102
   \   00038E   E6           DB 230
   \   00038F   00           DB 0
   \   000390   00           DB 0
   \   000391   00           DB 0
   \   000392   78           DB 120
   \   000393   18           DB 24
   \   000394   18           DB 24
   \   000395   18           DB 24
   \   000396   18           DB 24
   \   000397   18           DB 24
   \   000398   18           DB 24
   \   000399   18           DB 24
   \   00039A   7E           DB 126
   \   00039B   00           DB 0
   \   00039C   00           DB 0
   \   00039D   00           DB 0
   \   00039E   00           DB 0
   \   00039F   00           DB 0
   \   0003A0   00           DB 0
   \   0003A1   FC           DB 252
   \   0003A2   D6           DB 214
   \   0003A3   D6           DB 214
   \   0003A4   D6           DB 214
   \   0003A5   D6           DB 214
   \   0003A6   C6           DB 198
   \   0003A7   00           DB 0
   \   0003A8   00           DB 0
   \   0003A9   00           DB 0
   \   0003AA   00           DB 0
   \   0003AB   00           DB 0
   \   0003AC   00           DB 0
   \   0003AD   F8           DB 248
   \   0003AE   CC           DB 204
   \   0003AF   CC           DB 204
   \   0003B0   CC           DB 204
   \   0003B1   CC           DB 204
   \   0003B2   CC           DB 204
   \   0003B3   00           DB 0
   \   0003B4   00           DB 0
   \   0003B5   00           DB 0
   \   0003B6   00           DB 0
   \   0003B7   00           DB 0
   \   0003B8   00           DB 0
   \   0003B9   78           DB 120
   \   0003BA   CC           DB 204
   \   0003BB   CC           DB 204
   \   0003BC   CC           DB 204
   \   0003BD   CC           DB 204
   \   0003BE   78           DB 120
   \   0003BF   00           DB 0
   \   0003C0   00           DB 0
   \   0003C1   00           DB 0
   \   0003C2   00           DB 0
   \   0003C3   00           DB 0
   \   0003C4   DC           DB 220
   \   0003C5   66           DB 102
   \   0003C6   66           DB 102
   \   0003C7   66           DB 102
   \   0003C8   7C           DB 124
   \   0003C9   60           DB 96
   \   0003CA   60           DB 96
   \   0003CB   E0           DB 224
   \   0003CC   00           DB 0
   \   0003CD   00           DB 0
   \   0003CE   00           DB 0
   \   0003CF   00           DB 0
   \   0003D0   7C           DB 124
   \   0003D1   CC           DB 204
   \   0003D2   CC           DB 204
   \   0003D3   CC           DB 204
   \   0003D4   7C           DB 124
   \   0003D5   0C           DB 12
   \   0003D6   0C           DB 12
   \   0003D7   06           DB 6
   \   0003D8   00           DB 0
   \   0003D9   00           DB 0
   \   0003DA   00           DB 0
   \   0003DB   00           DB 0
   \   0003DC   00           DB 0
   \   0003DD   EC           DB 236
   \   0003DE   6E           DB 110
   \   0003DF   76           DB 118
   \   0003E0   60           DB 96
   \   0003E1   60           DB 96
   \   0003E2   F0           DB 240
   \   0003E3   00           DB 0
   \   0003E4   00           DB 0
   \   0003E5   00           DB 0
   \   0003E6   00           DB 0
   \   0003E7   00           DB 0
   \   0003E8   00           DB 0
   \   0003E9   78           DB 120
   \   0003EA   CC           DB 204
   \   0003EB   60           DB 96
   \   0003EC   18           DB 24
   \   0003ED   CC           DB 204
   \   0003EE   78           DB 120
   \   0003EF   00           DB 0
   \   0003F0   00           DB 0
   \   0003F1   00           DB 0
   \   0003F2   00           DB 0
   \   0003F3   20           DB 32
   \   0003F4   60           DB 96
   \   0003F5   FC           DB 252
   \   0003F6   60           DB 96
   \   0003F7   60           DB 96
   \   0003F8   60           DB 96
   \   0003F9   6C           DB 108
   \   0003FA   38           DB 56
   \   0003FB   00           DB 0
   \   0003FC   00           DB 0
   \   0003FD   00           DB 0
   \   0003FE   00           DB 0
   \   0003FF   00           DB 0
   \   000400   00           DB 0
   \   000401   CC           DB 204
   \   000402   CC           DB 204
   \   000403   CC           DB 204
   \   000404   CC           DB 204
   \   000405   CC           DB 204
   \   000406   76           DB 118
   \   000407   00           DB 0
   \   000408   00           DB 0
   \   000409   00           DB 0
   \   00040A   00           DB 0
   \   00040B   00           DB 0
   \   00040C   00           DB 0
   \   00040D   CC           DB 204
   \   00040E   CC           DB 204
   \   00040F   CC           DB 204
   \   000410   CC           DB 204
   \   000411   78           DB 120
   \   000412   30           DB 48
   \   000413   00           DB 0
   \   000414   00           DB 0
   \   000415   00           DB 0
   \   000416   00           DB 0
   \   000417   00           DB 0
   \   000418   00           DB 0
   \   000419   C6           DB 198
   \   00041A   C6           DB 198
   \   00041B   D6           DB 214
   \   00041C   D6           DB 214
   \   00041D   6C           DB 108
   \   00041E   6C           DB 108
   \   00041F   00           DB 0
   \   000420   00           DB 0
   \   000421   00           DB 0
   \   000422   00           DB 0
   \   000423   00           DB 0
   \   000424   00           DB 0
   \   000425   C6           DB 198
   \   000426   6C           DB 108
   \   000427   38           DB 56
   \   000428   38           DB 56
   \   000429   6C           DB 108
   \   00042A   C6           DB 198
   \   00042B   00           DB 0
   \   00042C   00           DB 0
   \   00042D   00           DB 0
   \   00042E   00           DB 0
   \   00042F   00           DB 0
   \   000430   00           DB 0
   \   000431   66           DB 102
   \   000432   66           DB 102
   \   000433   66           DB 102
   \   000434   66           DB 102
   \   000435   3C           DB 60
   \   000436   0C           DB 12
   \   000437   18           DB 24
   \   000438   00           DB 0
   \   000439   00           DB 0
   \   00043A   00           DB 0
   \   00043B   00           DB 0
   \   00043C   00           DB 0
   \   00043D   FC           DB 252
   \   00043E   8C           DB 140
   \   00043F   18           DB 24
   \   000440   60           DB 96
   \   000441   C4           DB 196
   \   000442   FC           DB 252
   \   000443   00           DB 0
   \   000444   00           DB 0
   \   000445   00           DB 0
   \   000446   1C           DB 28
   \   000447   30           DB 48
   \   000448   30           DB 48
   \   000449   60           DB 96
   \   00044A   C0           DB 192
   \   00044B   60           DB 96
   \   00044C   30           DB 48
   \   00044D   30           DB 48
   \   00044E   1C           DB 28
   \   00044F   00           DB 0
   \   000450   00           DB 0
   \   000451   00           DB 0
   \   000452   18           DB 24
   \   000453   18           DB 24
   \   000454   18           DB 24
   \   000455   18           DB 24
   \   000456   00           DB 0
   \   000457   18           DB 24
   \   000458   18           DB 24
   \   000459   18           DB 24
   \   00045A   18           DB 24
   \   00045B   00           DB 0
   \   00045C   00           DB 0
   \   00045D   00           DB 0
   \   00045E   E0           DB 224
   \   00045F   30           DB 48
   \   000460   30           DB 48
   \   000461   18           DB 24
   \   000462   0C           DB 12
   \   000463   18           DB 24
   \   000464   30           DB 48
   \   000465   30           DB 48
   \   000466   E0           DB 224
   \   000467   00           DB 0
   \   000468   00           DB 0
   \   000469   00           DB 0
   \   00046A   73           DB 115
   \   00046B   DA           DB 218
   \   00046C   CE           DB 206
   \   00046D   00           DB 0
   \   00046E   00           DB 0
   \   00046F   00           DB 0
   \   000470   00           DB 0
   \   000471   00           DB 0
   \   000472   00           DB 0
   \   000473   00           DB 0
   \   000474   00           DB 0
   \   000475   00           DB 0
   \   000476   00           DB 0
   \   000477   00           DB 0
   \   000478   10           DB 16
   \   000479   38           DB 56
   \   00047A   6C           DB 108
   \   00047B   C6           DB 198
   \   00047C   C6           DB 198
   \   00047D   FE           DB 254
   \   00047E   00           DB 0
   \   00047F   00           DB 0
     85          {
     86          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*""=00H*/ 
     87          0x00,0x30,0x78,0x78,0x78,0x30,0x30,0x00,0x30,0x30,0x00,0x00,/*"!"=01H*/
     88          0x00,0x00,0x66,0x66,0x66,0x24,0x00,0x00,0x00,0x00,0x00,0x00,/*"""=02h*/
     89          0x00,0x00,0x6c,0x6c,0xfe,0x6c,0x6c,0x6c,0xfe,0x6c,0x6c,0x00,/*"#"=03h*/
     90          0x00,0x30,0x30,0x7c,0xc0,0xc0,0x78,0x0c,0x0c,0xf8,0x30,0x30,/*"$"=04h*/
     91          0x00,0x00,0x00,0x00,0xc4,0xcc,0x18,0x30,0x60,0xcc,0x8c,0x00,/*"%"=05h*/
     92          0x00,0x00,0x70,0xd8,0xd8,0x70,0xfa,0xde,0xcc,0xdc,0x76,0x00,/*"&"=06h*/
     93          0x00,0x00,0x30,0x30,0x30,0x60,0x00,0x00,0x00,0x00,0x00,0x00,/*"'"=07h*/
     94          0x00,0x00,0x0c,0x18,0x30,0x60,0x60,0x60,0x30,0x18,0x0c,0x00,/*"("=08h*/
     95          0x00,0x00,0x60,0x30,0x18,0x0c,0x0c,0x0c,0x18,0x30,0x60,0x00,/*")"=09h*/
     96          0x00,0x00,0x00,0x00,0x66,0x3c,0xff,0x3c,0x66,0x00,0x00,0x00,/*"*"=0Ah*/
     97          0x00,0x00,0x00,0x00,0x18,0x18,0x7e,0x18,0x18,0x00,0x00,0x00,/*"+"=0Bh*/
     98          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x38,0x60,/*";"=0Ch*/
     99          0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,/*"-"=0Dh*/
    100          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x38,0x00,/*"."=0Eh*/
    101          0x00,0x00,0x00,0x02,0x06,0x0c,0x18,0x30,0x60,0xc0,0x80,0x00,/*"/"=0Fh*/
    102          0x00,0x00,0x7c,0xc6,0xce,0xde,0xd6,0xf6,0xe6,0xc6,0x7c,0x00,/*"0"=10h*/
    103          0x00,0x00,0x10,0x30,0xf0,0x30,0x30,0x30,0x30,0x30,0xfc,0x00,/*"1"=11h*/
    104          0x00,0x00,0x78,0xcc,0xcc,0x0c,0x18,0x30,0x60,0xcc,0xfc,0x00,/*"2"=12h*/
    105          0x00,0x00,0x78,0xcc,0x0c,0x0c,0x38,0x0c,0x0c,0xcc,0x78,0x00,/*"3"=13h*/
    106          0x00,0x00,0x0c,0x1c,0x3c,0x6c,0xcc,0xfe,0x0c,0x0c,0x1e,0x00,/*"4"=14h*/
    107          0x00,0x00,0xfc,0xc0,0xc0,0xc0,0xf8,0x0c,0x0c,0xcc,0x78,0x00,/*"5"=15h*/
    108          0x00,0x00,0x38,0x60,0xc0,0xc0,0xf8,0xcc,0xcc,0xcc,0x78,0x00,/*"6"=16h*/
    109          0x00,0x00,0xfe,0xc6,0xc6,0x06,0x0c,0x18,0x30,0x30,0x30,0x00,/*"7"=17h*/
    110          0x00,0x00,0x78,0xcc,0xcc,0xec,0x78,0xdc,0xcc,0xcc,0x78,0x00,/*"8"=18h*/
    111          0x00,0x00,0x78,0xcc,0xcc,0xcc,0x7c,0x18,0x18,0x30,0x70,0x00,/*"9"=19h*/
    112          0x00,0x00,0x00,0x00,0x38,0x38,0x00,0x00,0x38,0x38,0x00,0x00,/*":"=1Ah*/
    113          0x00,0x00,0x00,0x00,0x38,0x38,0x00,0x00,0x38,0x38,0x18,0x30,/*";"=1Bh*/
    114          0x00,0x00,0x0c,0x18,0x30,0x60,0xc0,0x60,0x30,0x18,0x0c,0x00,/*"<"=1Ch*/
    115          0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x7e,0x00,0x00,0x00,0x00,/*"="=1Dh*/
    116          0x00,0x00,0x60,0x30,0x18,0x0c,0x06,0x0c,0x18,0x30,0x60,0x00,/*">"=1Eh*/
    117          0x00,0x00,0x78,0xcc,0x0c,0x18,0x30,0x30,0x00,0x30,0x30,0x00,/*"?"=1Fh*/
    118          0x00,0x00,0x7c,0xc6,0xc6,0xde,0xde,0xde,0xc0,0xc0,0x7c,0x00,/*"@"=20h*/
    119          0x00,0x00,0x30,0x78,0xcc,0xcc,0xcc,0xfc,0xcc,0xcc,0xcc,0x00,/*"A"=21h*/
    120          0x00,0x00,0xfc,0x66,0x66,0x66,0x7c,0x66,0x66,0x66,0xfc,0x00,/*"B"=22h*/
    121          0x00,0x00,0x3c,0x66,0xc6,0xc0,0xc0,0xc0,0xc6,0x66,0x3c,0x00,/*"C"=23h*/
    122          0x00,0x00,0xf8,0x6c,0x66,0x66,0x66,0x66,0x66,0x6c,0xf8,0x00,/*"D"=24h*/
    123          0x00,0x00,0xfe,0x62,0x60,0x64,0x7c,0x64,0x60,0x62,0xfe,0x00,/*"E"=25h*/
    124          0x00,0x00,0xfe,0x66,0x62,0x64,0x7c,0x64,0x60,0x60,0xf0,0x00,/*"F"=26h*/
    125          0x00,0x00,0x3c,0x66,0xc6,0xc0,0xc0,0xce,0xc6,0x66,0x3e,0x00,/*"G"=27h*/
    126          0x00,0x00,0xcc,0xcc,0xcc,0xcc,0xfc,0xcc,0xcc,0xcc,0xcc,0x00,/*"h"=28h*/
    127          0x00,0x00,0x78,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x78,0x00,/*"I"=29h*/
    128          0x00,0x00,0x1e,0x0c,0x0c,0x0c,0x0c,0xcc,0xcc,0xcc,0x78,0x00,/*"J"=2Ah*/
    129          0x00,0x00,0xe6,0x66,0x6c,0x6c,0x78,0x6c,0x6c,0x66,0xe6,0x00,/*"K"=2Bh*/
    130          0x00,0x00,0xf0,0x60,0x60,0x60,0x60,0x62,0x66,0x66,0xfe,0x00,/*"L"=2Ch*/
    131          0x00,0x00,0xc6,0xee,0xfe,0xfe,0xd6,0xc6,0xc6,0xc6,0xc6,0x00,/*"M"=2Dh*/
    132          0x00,0x00,0xc6,0xc6,0xe6,0xf6,0xfe,0xde,0xce,0xc6,0xc6,0x00,/*"N"=2Eh*/
    133          0x00,0x00,0x38,0x6c,0xc6,0xc6,0xc6,0xc6,0xc6,0x6c,0x38,0x00,/*"O"=2Fh*/
    134          0x00,0x00,0xfc,0x66,0x66,0x66,0x7c,0x60,0x60,0x60,0xf0,0x00,/*"P"=30h*/
    135          0x00,0x00,0x38,0x6c,0xc6,0xc6,0xc6,0xce,0xde,0x7c,0x0c,0x1e,/*"Q"=31h*/
    136          0x00,0x00,0xfc,0x66,0x66,0x66,0x7c,0x6c,0x66,0x66,0xe6,0x00,/*"R"=32h*/
    137          0x00,0x00,0x78,0xcc,0xcc,0xc0,0x70,0x18,0xcc,0xcc,0x78,0x00,/*"S"=33h*/
    138          0x00,0x00,0xfc,0xb4,0x30,0x30,0x30,0x30,0x30,0x30,0x78,0x00,/*"T"=34h*/
    139          0x00,0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x78,0x00,/*"U"=35h*/
    140          0x00,0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0xcc,0x78,0x30,0x00,/*"V"=36h*/
    141          0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xd6,0xd6,0x6c,0x6c,0x6c,0x00,/*"W"=37h*/
    142          0x00,0x00,0xcc,0xcc,0xcc,0x78,0x30,0x78,0xcc,0xcc,0xcc,0x00,/*"X"=38h*/
    143          0x00,0x00,0xcc,0xcc,0xcc,0xcc,0x78,0x30,0x30,0x30,0x78,0x00,/*"Y"=39h*/
    144          0x00,0x00,0xfe,0xce,0x98,0x18,0x30,0x60,0x62,0xc6,0xfe,0x00,/*"Z"=3Ah*/
    145          0x00,0x00,0x3c,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3c,0x00,/*"["=3Bh*/
    146          0x00,0x00,0x00,0x80,0xc0,0x60,0x30,0x18,0x0c,0x06,0x02,0x00,/*"\"=3Ch*/
    147          0x00,0x00,0x3c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x3c,0x00,/*"]"=3Dh*/
    148          0x00,0x10,0x38,0x6c,0xc6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"^"=3Eh*/
    149          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,/*"_"=3Fh*/
    150          0x00,0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"`"=40h*/
    151          0x00,0x00,0x00,0x00,0x00,0x78,0x0c,0x7c,0xcc,0xcc,0x76,0x00,/*"a"=41h*/
    152          0x00,0x00,0xe0,0x60,0x60,0x7c,0x66,0x66,0x66,0x66,0xdc,0x00,/*"b"=42h*/
    153          0x00,0x00,0x00,0x00,0x00,0x78,0xcc,0xc0,0xc0,0xcc,0x78,0x00,/*"c"=43h*/
    154          0x00,0x00,0x1c,0x0c,0x0c,0x7c,0xcc,0xcc,0xcc,0xcc,0x76,0x00,/*"d"=44h*/
    155          0x00,0x00,0x00,0x00,0x00,0x78,0xcc,0xfc,0xc0,0xcc,0x78,0x00,/*"e"=45h*/
    156          0x00,0x00,0x38,0x6c,0x60,0x60,0xf8,0x60,0x60,0x60,0xf0,0x00,/*"f"=46h*/
    157          0x00,0x00,0x00,0x00,0x76,0xcc,0xcc,0xcc,0x7c,0x0c,0xcc,0x78,/*"g"=47h*/
    158          0x00,0x00,0xe0,0x60,0x60,0x6c,0x76,0x66,0x66,0x66,0xe6,0x00,/*"h"=48h*/
    159          0x00,0x00,0x18,0x18,0x00,0x78,0x18,0x18,0x18,0x18,0x7e,0x00,/*"i"=49h*/
    160          0x00,0x0c,0x0c,0x00,0x3c,0x0c,0x0c,0x0c,0x0c,0xcc,0xcc,0x78,/*"j"=4Ah*/
    161          0x00,0x00,0xe0,0x60,0x60,0x66,0x6c,0x78,0x6c,0x66,0xe6,0x00,/*"k"=4Bh*/
    162          0x00,0x00,0x78,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7e,0x00,/*"l"=4Ch*/
    163          0x00,0x00,0x00,0x00,0x00,0xfc,0xd6,0xd6,0xd6,0xd6,0xc6,0x00,/*"m"=4Dh*/
    164          0x00,0x00,0x00,0x00,0x00,0xf8,0xcc,0xcc,0xcc,0xcc,0xcc,0x00,/*"n"=4Eh*/
    165          0x00,0x00,0x00,0x00,0x00,0x78,0xcc,0xcc,0xcc,0xcc,0x78,0x00,/*"o'=4Fh*/
    166          0x00,0x00,0x00,0x00,0xdc,0x66,0x66,0x66,0x7c,0x60,0x60,0xe0,/*"p"=50h*/
    167          0x00,0x00,0x00,0x00,0x7c,0xcc,0xcc,0xcc,0x7c,0x0c,0x0c,0x06,/*"q"=51h*/
    168          0x00,0x00,0x00,0x00,0x00,0xec,0x6e,0x76,0x60,0x60,0xf0,0x00,/*"r"=52h*/
    169          0x00,0x00,0x00,0x00,0x00,0x78,0xcc,0x60,0x18,0xcc,0x78,0x00,/*"s"=53h*/
    170          0x00,0x00,0x00,0x20,0x60,0xfc,0x60,0x60,0x60,0x6c,0x38,0x00,/*"t"=54h*/
    171          0x00,0x00,0x00,0x00,0x00,0xcc,0xcc,0xcc,0xcc,0xcc,0x76,0x00,/*"u"=55h*/
    172          0x00,0x00,0x00,0x00,0x00,0xcc,0xcc,0xcc,0xcc,0x78,0x30,0x00,/*"v"=56h*/
    173          0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0xd6,0xd6,0x6c,0x6c,0x00,/*"w"=57h*/
    174          0x00,0x00,0x00,0x00,0x00,0xc6,0x6c,0x38,0x38,0x6c,0xc6,0x00,/*"x"=58h*/
    175          0x00,0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x3c,0x0c,0x18,/*"y"=59h*/
    176          0x00,0x00,0x00,0x00,0x00,0xfc,0x8c,0x18,0x60,0xc4,0xfc,0x00,/*"z"=5Ah*/
    177          0x00,0x00,0x1c,0x30,0x30,0x60,0xc0,0x60,0x30,0x30,0x1c,0x00,/*"{"=5Bh*/
    178          0x00,0x00,0x18,0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x18,0x00,/*"|"=5Ch*/
    179          0x00,0x00,0xe0,0x30,0x30,0x18,0x0c,0x18,0x30,0x30,0xe0,0x00,/*"}"=5Dh*/
    180          0x00,0x00,0x73,0xda,0xce,0x00,0x00,0x00,0x00,0x00,0x00,0x00,           
    181          0x00,0x00,0x00,0x00,0x10,0x38,0x6c,0xc6,0xc6,0xfe,0x00,0x00,/*"~"=5Fh*/
    182          };
    183           
    184          /* LCD Control lines */
    185          #define HAL_LCD_MODE_PORT 0
    186          #define HAL_LCD_MODE_PIN  0
    187          
    188          #define HAL_LCD_RESET_PORT 1
    189          #define HAL_LCD_RESET_PIN  1
    190          
    191          #define HAL_LCD_CS_PORT 1
    192          #define HAL_LCD_CS_PIN  2
    193          
    194          /* LCD SPI lines */
    195          #define HAL_LCD_CLK_PORT 1
    196          #define HAL_LCD_CLK_PIN  5
    197          
    198          #define HAL_LCD_MOSI_PORT 1
    199          #define HAL_LCD_MOSI_PIN  6
    200          
    201          
    202          /* LCD backlight control pin */
    203          #define HAL_LCD_BK_PORT 0
    204          #define HAL_LCD_BK_PIN  7
    205          
    206          /* SPI settings */
    207          #define HAL_SPI_CLOCK_POL_LO       0x00
    208          #define HAL_SPI_CLOCK_PHA_0        0x00
    209          #define HAL_SPI_TRANSFER_MSB_FIRST 0x20
    210          
    211          /* LCD lines */
    212          #define LCD_MAX_LINE_COUNT              3
    213          #define LCD_MAX_LINE_LENGTH             16
    214          #define LCD_MAX_BUF                     25
    215          
    216          /* Defines for HW LCD */
    217          
    218          /**************************************************************************************************
    219           *                                           MACROS
    220           **************************************************************************************************/
    221          
    222          #define HAL_IO_SET(port, pin, val)        HAL_IO_SET_PREP(port, pin, val)
    223          #define HAL_IO_SET_PREP(port, pin, val)   st( P##port##_##pin## = val; )
    224          
    225          #define HAL_CONFIG_IO_OUTPUT(port, pin, val)      HAL_CONFIG_IO_OUTPUT_PREP(port, pin, val)
    226          #define HAL_CONFIG_IO_OUTPUT_PREP(port, pin, val) st( P##port##SEL &= ~BV(pin); \
    227                                                                P##port##_##pin## = val; \
    228                                                                P##port##DIR |= BV(pin); )
    229          
    230          #define HAL_CONFIG_IO_PERIPHERAL(port, pin)      HAL_CONFIG_IO_PERIPHERAL_PREP(port, pin)
    231          #define HAL_CONFIG_IO_PERIPHERAL_PREP(port, pin) st( P##port##SEL |= BV(pin); )
    232          
    233          
    234          
    235          /* SPI interface control */
    236          #define LCD_SPI_BEGIN()     HAL_IO_SET(HAL_LCD_CS_PORT,  HAL_LCD_CS_PIN,  0); /* chip select */
    237          #define LCD_SPI_END()                                                         \
    238          {                                                                             \
    239            asm("NOP");                                                                 \
    240            asm("NOP");                                                                 \
    241            asm("NOP");                                                                 \
    242            asm("NOP");                                                                 \
    243            HAL_IO_SET(HAL_LCD_CS_PORT,  HAL_LCD_CS_PIN,  1); /* chip select */         \
    244          }
    245          /* clear the received and transmit byte status, write tx data to buffer, wait till transmit done */
    246          #define LCD_SPI_TX(x)                   { U1CSR &= ~(BV(2) | BV(1)); U1DBUF = x; while( !(U1CSR & BV(1)) ); }
    247          #define LCD_SPI_WAIT_RXRDY()            { while(!(U1CSR & BV(1))); }
    248          
    249          
    250          /* Control macros */
    251          #define LCD_DO_WRITE()        HAL_IO_SET(HAL_LCD_MODE_PORT,  HAL_LCD_MODE_PIN,  1);
    252          #define LCD_DO_CONTROL()      HAL_IO_SET(HAL_LCD_MODE_PORT,  HAL_LCD_MODE_PIN,  0);
    253          
    254          #define LCD_ACTIVATE_RESET()  HAL_IO_SET(HAL_LCD_RESET_PORT, HAL_LCD_RESET_PIN, 0);
    255          #define LCD_RELEASE_RESET()   HAL_IO_SET(HAL_LCD_RESET_PORT, HAL_LCD_RESET_PIN, 1);
    256          
    257          #define CONTRAST_CTRL_REGISTER          0x81
    258          
    259          /**************************************************************************************************
    260           *                                       GLOBAL VARIABLES
    261           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    262          static uint8 *Lcd_Line1;
   \                     Lcd_Line1:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    263          
    264          /**************************************************************************************************
    265           *                                       FUNCTIONS - API
    266           **************************************************************************************************/
    267          #if (HAL_LCD == TRUE)
    268          void HalLcd_HW_Init(void);
    269          void HalLcd_HW_WaitUs(uint16 i);
    270          void HalLcd_HW_Clear(void);
    271          void HalLcd_HW_Control(uint8 cmd);
    272          void HalLcd_HW_Write(uint8 data);
    273          void HalLcd_HW_SetContrast(uint8 value);
    274          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
    275          void HalLcd_HW_WriteLine(uint8 line, const char *pText);
    276          void SET_DDRAM_ADDR(uint8 x, uint8 y);
    277          uint8 HalLcd_Convert_DZK(uint8 index, uint16 addr);
    278          
    279          #endif //LCD
    280          
    281          /**************************************************************************************************
    282           * @fn      HalLcdInit
    283           *
    284           * @brief   Initilize LCD Service
    285           *
    286           * @param   init - pointer to void that contains the initialized value
    287           *
    288           * @return  None
    289           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    290          void HalLcdInit(void)
   \                     HalLcdInit:
    291          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    292            Lcd_Line1 = NULL;
   \   000004   90....       MOV     DPTR,#Lcd_Line1
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    293          #if (HAL_LCD == TRUE)
    294            HalLcd_HW_Init();
   \   00000B                ; Setup parameters for call to function HalLcd_HW_Init
   \   00000B   12....       LCALL   ??HalLcd_HW_Init?relay
    295          #endif
    296          }
   \   00000E                REQUIRE ?Subroutine0
   \   00000E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    297          
    298          /*************************************************************************************************
    299           *                    LCD EMULATION FUNCTIONS
    300           *
    301           * Some evaluation boards are equipped with Liquid Crystal Displays
    302           * (LCD) which may be used to display diagnostic information. These
    303           * functions provide LCD emulation, sending the diagnostic strings
    304           * to Z-Tool via the RS232 serial port. These functions are enabled
    305           * when the "LCD_SUPPORTED" compiler flag is placed in the makefile.
    306           *
    307           * Most applications update both lines (1 and 2) of the LCD whenever
    308           * text is posted to the device. This emulator assumes that line 1 is
    309           * updated first (saved locally) and the formatting and send operation
    310           * is triggered by receipt of line 2. Nothing will be transmitted if
    311           * only line 1 is updated.
    312           *
    313           *************************************************************************************************/
    314          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    315          void SET_DDRAM_ADDR(uint8 x, uint8 y)
   \                     SET_DDRAM_ADDR:
    316          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    317          	HalLcd_HW_Control(y|0xb0);
   \   000009                ; Setup parameters for call to function HalLcd_HW_Control
   \   000009   74B0         MOV     A,#-0x50
   \   00000B   4F           ORL     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??HalLcd_HW_Control?relay
    318          	HalLcd_HW_Control((x >> 4)|0x10);
   \   000010                ; Setup parameters for call to function HalLcd_HW_Control
   \   000010   EE           MOV     A,R6
   \   000011   C4           SWAP    A
   \   000012   540F         ANL     A,#0xf
   \   000014   4410         ORL     A,#0x10
   \   000016   F9           MOV     R1,A
   \   000017   12....       LCALL   ??HalLcd_HW_Control?relay
    319          	HalLcd_HW_Control(x&0x0f);
   \   00001A                ; Setup parameters for call to function HalLcd_HW_Control
   \   00001A   740F         MOV     A,#0xf
   \   00001C   5E           ANL     A,R6
   \   00001D   02....       LJMP    ?Subroutine2 & 0xFFFF
    320          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F9           MOV     R1,A
   \   000001   12....       LCALL   ??HalLcd_HW_Control?relay
   \   000004                REQUIRE ??Subroutine7_0
   \   000004                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    321          
    322          /**************************************************************************************************
    323           * @fn      HalLcdWriteString
    324           *
    325           * @brief   Write a string to the LCD
    326           *
    327           * @param   str    - pointer to the string that will be displayed
    328           *          option - display options
    329           *
    330           * @return  None
    331           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    332          void HalLcdWriteString ( char *str, uint8 option)
   \                     HalLcdWriteString:
    333          {
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   89..         MOV     ?V0 + 8,R1
    334          #if (HAL_LCD == TRUE)
    335          
    336            uint8 strLen = 0;
    337            uint8 totalLen = 0;
    338            uint8 *buf;
    339            uint8 tmpLen;
    340          
    341            if ( Lcd_Line1 == NULL )
   \   00000B   90....       MOV     DPTR,#Lcd_Line1
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   49           ORL     A,R1
   \   000015   7018         JNZ     ??HalLcdWriteString_0
    342            {
    343              Lcd_Line1 = osal_mem_alloc( HAL_LCD_MAX_CHARS+1 );
   \   000017                ; Setup parameters for call to function osal_mem_alloc
   \   000017   7A11         MOV     R2,#0x11
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??osal_mem_alloc?relay
   \   00001E   90....       MOV     DPTR,#Lcd_Line1
   \   000021   EA           MOV     A,R2
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   EB           MOV     A,R3
   \   000025   F0           MOVX    @DPTR,A
    344              HalLcdWriteString( "TexasInstruments", 1 );
   \   000026                ; Setup parameters for call to function HalLcdWriteString
   \   000026   7901         MOV     R1,#0x1
   \   000028   7A..         MOV     R2,#`?<Constant "TexasInstruments">` & 0xff
   \   00002A   7B..         MOV     R3,#(`?<Constant "TexasInstruments">` >> 8) & 0xff
   \   00002C   12....       LCALL   ??HalLcdWriteString?relay
    345            }
    346          
    347            strLen = (uint8)osal_strlen( (char*)str );
   \                     ??HalLcdWriteString_0:
   \   00002F                ; Setup parameters for call to function osal_strlen
   \   00002F   AA..         MOV     R2,?V0 + 0
   \   000031   AB..         MOV     R3,?V0 + 1
   \   000033   12....       LCALL   ??osal_strlen?relay
   \   000036   EA           MOV     A,R2
   \   000037   F5..         MOV     ?V0 + 7,A
    348          
    349            /* Check boundries */
    350            if ( strLen > HAL_LCD_MAX_CHARS )
   \   000039   C3           CLR     C
   \   00003A   9411         SUBB    A,#0x11
   \   00003C   4003         JC      ??HalLcdWriteString_1
    351              strLen = HAL_LCD_MAX_CHARS;
   \   00003E   75..10       MOV     ?V0 + 7,#0x10
    352          
    353            if ( option == HAL_LCD_LINE_1 )
   \                     ??HalLcdWriteString_1:
   \   000041   7401         MOV     A,#0x1
   \   000043   65..         XRL     A,?V0 + 8
   \   000045   703A         JNZ     ??HalLcdWriteString_2
    354            {
    355              /* Line 1 gets saved for later */
    356              osal_memcpy( Lcd_Line1, str, strLen );
   \   000047                ; Setup parameters for call to function osal_memcpy
   \   000047   85....       MOV     ?V0 + 4,?V0 + 0
   \   00004A   85....       MOV     ?V0 + 5,?V0 + 1
   \   00004D   75..00       MOV     ?V0 + 6,#0x0
   \   000050   78..         MOV     R0,#?V0 + 4
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000055   85....       MOV     ?V0 + 2,?V0 + 7
   \   000058   AC..         MOV     R4,?V0 + 2
   \   00005A   7D00         MOV     R5,#0x0
   \   00005C   90....       MOV     DPTR,#Lcd_Line1
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FB           MOV     R3,A
   \   000064   12....       LCALL   ??osal_memcpy?relay
   \   000067   7403         MOV     A,#0x3
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
    357              Lcd_Line1[strLen] = '\0';
   \   00006C   A8..         MOV     R0,?V0 + 7
   \   00006E   90....       MOV     DPTR,#Lcd_Line1
   \   000071   E0           MOVX    A,@DPTR
   \   000072   28           ADD     A,R0
   \   000073   FA           MOV     R2,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   3400         ADDC    A,#0x0
   \   000078   8A82         MOV     DPL,R2
   \   00007A   F583         MOV     DPH,A
   \   00007C   E4           CLR     A
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   02....       LJMP    ??HalLcdWriteString_3 & 0xFFFF
    358            }
    359            else
    360            {
    361              /* Line 2 triggers action */
    362              tmpLen = (uint8)osal_strlen( (char*)Lcd_Line1 );
   \                     ??HalLcdWriteString_2:
   \   000081                ; Setup parameters for call to function osal_strlen
   \   000081   90....       MOV     DPTR,#Lcd_Line1
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FA           MOV     R2,A
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FB           MOV     R3,A
   \   000089   12....       LCALL   ??osal_strlen?relay
   \   00008C   EA           MOV     A,R2
   \   00008D   F5..         MOV     ?V0 + 2,A
    363              totalLen =  tmpLen + 1 + strLen + 1;
    364              buf = osal_mem_alloc( totalLen );
   \   00008F                ; Setup parameters for call to function osal_mem_alloc
   \   00008F   25..         ADD     A,?V0 + 7
   \   000091   2402         ADD     A,#0x2
   \   000093   FA           MOV     R2,A
   \   000094   7B00         MOV     R3,#0x0
   \   000096   12....       LCALL   ??osal_mem_alloc?relay
   \   000099   8A..         MOV     ?V0 + 4,R2
   \   00009B   8B..         MOV     ?V0 + 5,R3
   \   00009D   AE..         MOV     R6,?V0 + 4
   \   00009F   AF..         MOV     R7,?V0 + 5
    365              if ( buf != NULL )
   \   0000A1   EE           MOV     A,R6
   \   0000A2   4F           ORL     A,R7
   \   0000A3   606F         JZ      ??HalLcdWriteString_3
    366              {
    367                /* Concatenate strings */
    368                osal_memcpy( buf, Lcd_Line1, tmpLen );
   \   0000A5                ; Setup parameters for call to function osal_memcpy
   \   0000A5   90....       MOV     DPTR,#Lcd_Line1
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F5..         MOV     ?V0 + 4,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F5..         MOV     ?V0 + 5,A
   \   0000AF   75..00       MOV     ?V0 + 6,#0x0
   \   0000B2   78..         MOV     R0,#?V0 + 4
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B7   85....       MOV     ?V0 + 4,?V0 + 2
   \   0000BA   AC..         MOV     R4,?V0 + 4
   \   0000BC   7D00         MOV     R5,#0x0
   \   0000BE   12....       LCALL   ??osal_memcpy?relay
   \   0000C1   7403         MOV     A,#0x3
   \   0000C3   12....       LCALL   ?DEALLOC_XSTACK8
    369                buf[tmpLen++] = ' ';
   \   0000C6   EE           MOV     A,R6
   \   0000C7   25..         ADD     A,?V0 + 4
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   EF           MOV     A,R7
   \   0000CC   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000CF   05..         INC     ?V0 + 2
    370                osal_memcpy( &buf[tmpLen], str, strLen );
   \   0000D1                ; Setup parameters for call to function osal_memcpy
   \   0000D1   85....       MOV     ?V0 + 4,?V0 + 0
   \   0000D4   85....       MOV     ?V0 + 5,?V0 + 1
   \   0000D7   78..         MOV     R0,#?V0 + 4
   \   0000D9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DC   85....       MOV     ?V0 + 4,?V0 + 7
   \   0000DF   AC..         MOV     R4,?V0 + 4
   \   0000E1   7D00         MOV     R5,#0x0
   \   0000E3   EE           MOV     A,R6
   \   0000E4   25..         ADD     A,?V0 + 2
   \   0000E6   FA           MOV     R2,A
   \   0000E7   EF           MOV     A,R7
   \   0000E8   3400         ADDC    A,#0x0
   \   0000EA   FB           MOV     R3,A
   \   0000EB   12....       LCALL   ??osal_memcpy?relay
   \   0000EE   7403         MOV     A,#0x3
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
    371                buf[tmpLen+strLen] = '\0';
   \   0000F3   E5..         MOV     A,?V0 + 2
   \   0000F5   25..         ADD     A,?V0 + 4
   \   0000F7   F8           MOV     R0,A
   \   0000F8   E4           CLR     A
   \   0000F9   3400         ADDC    A,#0x0
   \   0000FB   F9           MOV     R1,A
   \   0000FC   EE           MOV     A,R6
   \   0000FD   28           ADD     A,R0
   \   0000FE   F582         MOV     DPL,A
   \   000100   EF           MOV     A,R7
   \   000101   39           ADDC    A,R1
   \   000102   F583         MOV     DPH,A
   \   000104   E4           CLR     A
   \   000105   F0           MOVX    @DPTR,A
    372          
    373                /* Send it out */
    374          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    375          
    376          #if defined(SERIAL_DEBUG_SUPPORTED)
    377                debug_str( (uint8*)buf );
   \   000106                ; Setup parameters for call to function debug_str
   \   000106   EE           MOV     A,R6
   \   000107   FA           MOV     R2,A
   \   000108   EF           MOV     A,R7
   \   000109   FB           MOV     R3,A
   \   00010A   12....       LCALL   ??debug_str?relay
    378          #endif //LCD_SUPPORTED
    379          
    380          #endif //ZTOOL_P1
    381          
    382                /* Free mem */
    383                osal_mem_free( buf );
   \   00010D                ; Setup parameters for call to function osal_mem_free
   \   00010D   EE           MOV     A,R6
   \   00010E   FA           MOV     R2,A
   \   00010F   EF           MOV     A,R7
   \   000110   FB           MOV     R3,A
   \   000111   12....       LCALL   ??osal_mem_free?relay
    384              }
    385            }
    386          
    387            /* Display the string */
    388            HalLcd_HW_WriteLine (option, str);
   \                     ??HalLcdWriteString_3:
   \   000114                ; Setup parameters for call to function HalLcd_HW_WriteLine
   \   000114   AA..         MOV     R2,?V0 + 0
   \   000116   AB..         MOV     R3,?V0 + 1
   \   000118   A9..         MOV     R1,?V0 + 8
   \   00011A   12....       LCALL   ??HalLcd_HW_WriteLine?relay
    389          
    390          #endif //HAL_LCD
    391          
    392          }
   \   00011D   7F09         MOV     R7,#0x9
   \   00011F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   7420         MOV     A,#0x20
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET
    393          
    394          /**************************************************************************************************
    395           * @fn      HalLcdWriteValue
    396           *
    397           * @brief   Write a value to the LCD
    398           *
    399           * @param   value  - value that will be displayed
    400           *          radix  - 8, 10, 16
    401           *          option - display options
    402           *
    403           * @return  None
    404           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    405          void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
   \                     HalLcdWriteValue:
    406          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7429         MOV     A,#0x29
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FE           MOV     R6,A
    407          #if (HAL_LCD == TRUE)
    408            uint8 buf[LCD_MAX_BUF];
    409          
    410            _ltoa( value, &buf[0], radix );
   \   000011                ; Setup parameters for call to function _ltoa
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   8582..       MOV     ?V0 + 0,DPL
   \   00001A   8583..       MOV     ?V0 + 1,DPH
   \   00001D   78..         MOV     R0,#?V0 + 0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   12....       LCALL   ??_ltoa?relay
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?DEALLOC_XSTACK8
    411            HalLcdWriteString( (char*)buf, option );
   \   00002A                ; Setup parameters for call to function HalLcdWriteString
   \   00002A   EE           MOV     A,R6
   \   00002B   F9           MOV     R1,A
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   AA82         MOV     R2,DPL
   \   000034   AB83         MOV     R3,DPH
   \   000036   12....       LCALL   ??HalLcdWriteString?relay
    412          #endif
    413          }
   \   000039   7419         MOV     A,#0x19
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003E   7F08         MOV     R7,#0x8
   \   000040   02....       LJMP    ?BANKED_LEAVE_XDATA
    414          
    415          /**************************************************************************************************
    416           * @fn      HalLcdWriteScreen
    417           *
    418           * @brief   Write a value to the LCD
    419           *
    420           * @param   line1  - string that will be displayed on line 1
    421           *          line2  - string that will be displayed on line 2
    422           *
    423           * @return  None
    424           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    425          void HalLcdWriteScreen( char *line1, char *line2 )
   \                     HalLcdWriteScreen:
    426          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    427          #if (HAL_LCD == TRUE)
    428            HalLcdWriteString( line1, 1 );
   \   000009                ; Setup parameters for call to function HalLcdWriteString
   \   000009   7901         MOV     R1,#0x1
   \   00000B   12....       LCALL   ??HalLcdWriteString?relay
    429            HalLcdWriteString( line2, 2 );
   \   00000E                ; Setup parameters for call to function HalLcdWriteString
   \   00000E   7902         MOV     R1,#0x2
   \   000010   EE           MOV     A,R6
   \   000011   FA           MOV     R2,A
   \   000012   EF           MOV     A,R7
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??HalLcdWriteString?relay
    430          #endif
    431          }
   \   000017   80..         SJMP    ??Subroutine7_0
    432          
    433          /**************************************************************************************************
    434           * @fn      HalLcdWriteStringValue
    435           *
    436           * @brief   Write a string followed by a value to the LCD
    437           *
    438           * @param   title  - Title that will be displayed before the value
    439           *          value  - value
    440           *          format - redix
    441           *          line   - line number
    442           *
    443           * @return  None
    444           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    445          void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
   \                     HalLcdWriteStringValue:
    446          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 8,R4
   \   000010   8D..         MOV     ?V0 + 9,R5
   \   000012   89..         MOV     ?V0 + 0,R1
   \   000014   742B         MOV     A,#0x2b
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 1,A
    447          #if (HAL_LCD == TRUE)
    448            uint8 tmpLen;
    449            uint8 buf[LCD_MAX_BUF];
    450            uint32 err;
    451          
    452            tmpLen = (uint8)osal_strlen( (char*)title );
   \   00001C                ; Setup parameters for call to function osal_strlen
   \   00001C   12....       LCALL   ??osal_strlen?relay
   \   00001F   EA           MOV     A,R2
   \   000020   F5..         MOV     ?V0 + 2,A
    453            osal_memcpy( buf, title, tmpLen );
   \   000022                ; Setup parameters for call to function osal_memcpy
   \   000022   8E..         MOV     ?V0 + 4,R6
   \   000024   8F..         MOV     ?V0 + 5,R7
   \   000026   75..00       MOV     ?V0 + 6,#0x0
   \   000029   78..         MOV     R0,#?V0 + 4
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002E   8A..         MOV     ?V0 + 4,R2
   \   000030   AC..         MOV     R4,?V0 + 4
   \   000032   7D00         MOV     R5,#0x0
   \   000034   7403         MOV     A,#0x3
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   AA82         MOV     R2,DPL
   \   00003B   AB83         MOV     R3,DPH
   \   00003D   12....       LCALL   ??osal_memcpy?relay
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    454            buf[tmpLen] = ' ';
   \   000045   12....       LCALL   ?Subroutine5 & 0xFFFF
    455            err = (uint32)(value);
    456            _ltoa( err, &buf[tmpLen+1], format );
   \                     ??CrossCallReturnLabel_6:
   \   000048                ; Setup parameters for call to function _ltoa
   \   000048   A3           INC     DPTR
   \   000049   8582..       MOV     ?V0 + 2,DPL
   \   00004C   8583..       MOV     ?V0 + 3,DPH
   \   00004F   78..         MOV     R0,#?V0 + 2
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   A9..         MOV     R1,?V0 + 0
   \   000056   AA..         MOV     R2,?V0 + 8
   \   000058   AB..         MOV     R3,?V0 + 9
   \   00005A   E4           CLR     A
   \   00005B   FC           MOV     R4,A
   \   00005C   FD           MOV     R5,A
   \   00005D   12....       LCALL   ??_ltoa?relay
   \   000060   7402         MOV     A,#0x2
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
    457            HalLcdWriteString( (char*)buf, line );		
   \   000065                ; Setup parameters for call to function HalLcdWriteString
   \   000065   A9..         MOV     R1,?V0 + 1
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
   \   000071   12....       LCALL   ??HalLcdWriteString?relay
    458          #endif
    459          }
   \   000074   7419         MOV     A,#0x19
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   7F0A         MOV     R7,#0xa
   \   00007B   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 2
   \   00000A                REQUIRE ??Subroutine8_0
   \   00000A                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E583         MOV     A,DPH
   \   000004                REQUIRE ??Subroutine9_0
   \   000004                ; // Fall through to label ??Subroutine9_0
    460          
    461          /**************************************************************************************************
    462           * @fn      HalLcdWriteStringValue
    463           *
    464           * @brief   Write a string followed by a value to the LCD
    465           *
    466           * @param   title   - Title that will be displayed before the value
    467           *          value1  - value #1
    468           *          format1 - redix of value #1
    469           *          value2  - value #2
    470           *          format2 - redix of value #2
    471           *          line    - line number
    472           *
    473           * @return  None
    474           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    475          void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
   \                     HalLcdWriteStringValueValue:
    476                                            uint16 value2, uint8 format2, uint8 line )
    477          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV     A,#-0x19
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
   \   000012   89..         MOV     ?V0 + 5,R1
   \   000014   742C         MOV     A,#0x2c
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 1,A
   \   000020   742E         MOV     A,#0x2e
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 4,A
   \   000028   742F         MOV     A,#0x2f
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 7,A
    478          
    479          #if (HAL_LCD == TRUE)
    480          
    481            uint8 tmpLen;
    482            uint8 buf[LCD_MAX_BUF];
    483            uint32 err;
    484          
    485            tmpLen = (uint8)osal_strlen( (char*)title );
   \   000030                ; Setup parameters for call to function osal_strlen
   \   000030   12....       LCALL   ??osal_strlen?relay
   \   000033   EA           MOV     A,R2
   \   000034   F5..         MOV     ?V0 + 6,A
    486            if ( tmpLen )
   \   000036   6032         JZ      ??HalLcdWriteStringValueValue_0
    487            {
    488              osal_memcpy( buf, title, tmpLen );
   \   000038                ; Setup parameters for call to function osal_memcpy
   \   000038   8E..         MOV     ?V0 + 8,R6
   \   00003A   8F..         MOV     ?V0 + 9,R7
   \   00003C   75..00       MOV     ?V0 + 10,#0x0
   \   00003F   78..         MOV     R0,#?V0 + 8
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000044   8A..         MOV     ?V0 + 8,R2
   \   000046   AC..         MOV     R4,?V0 + 8
   \   000048   7D00         MOV     R5,#0x0
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   AA82         MOV     R2,DPL
   \   000051   AB83         MOV     R3,DPH
   \   000053   12....       LCALL   ??osal_memcpy?relay
   \   000056   7403         MOV     A,#0x3
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
    489              buf[tmpLen++] = ' ';
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   E582         MOV     A,DPL
   \   000063   25..         ADD     A,?V0 + 8
   \   000065   12....       LCALL   ??Subroutine8_0 & 0xFFFF
    490            }
   \                     ??CrossCallReturnLabel_5:
   \   000068   05..         INC     ?V0 + 6
    491          
    492            err = (uint32)(value1);
    493            _ltoa( err, &buf[tmpLen], format1 );
   \                     ??HalLcdWriteStringValueValue_0:
   \   00006A                ; Setup parameters for call to function _ltoa
   \   00006A   85....       MOV     ?V0 + 8,?V0 + 6
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   E582         MOV     A,DPL
   \   000075   25..         ADD     A,?V0 + 8
   \   000077   F5..         MOV     ?V0 + 8,A
   \   000079   E583         MOV     A,DPH
   \   00007B   3400         ADDC    A,#0x0
   \   00007D   F5..         MOV     ?V0 + 9,A
   \   00007F   78..         MOV     R0,#?V0 + 8
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000084   A9..         MOV     R1,?V0 + 5
   \   000086   AA..         MOV     R2,?V0 + 2
   \   000088   AB..         MOV     R3,?V0 + 3
   \   00008A   E4           CLR     A
   \   00008B   FC           MOV     R4,A
   \   00008C   FD           MOV     R5,A
   \   00008D   12....       LCALL   ??_ltoa?relay
   \   000090   7402         MOV     A,#0x2
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
    494            tmpLen = (uint8)osal_strlen( (char*)buf );
   \   000095                ; Setup parameters for call to function osal_strlen
   \   000095   85..82       MOV     DPL,?XSP + 0
   \   000098   85..83       MOV     DPH,?XSP + 1
   \   00009B   AA82         MOV     R2,DPL
   \   00009D   AB83         MOV     R3,DPH
   \   00009F   12....       LCALL   ??osal_strlen?relay
   \   0000A2   EA           MOV     A,R2
   \   0000A3   F5..         MOV     ?V0 + 6,A
    495          
    496            buf[tmpLen++] = ',';
   \   0000A5   F5..         MOV     ?V0 + 2,A
   \   0000A7   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000AA   742C         MOV     A,#0x2c
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   05..         INC     ?V0 + 6
    497            buf[tmpLen++] = ' ';
   \   0000AF   85....       MOV     ?V0 + 2,?V0 + 6
   \   0000B2   12....       LCALL   ?Subroutine5 & 0xFFFF
    498            err = (uint32)(value2);
    499            _ltoa( err, &buf[tmpLen], format2 );
   \                     ??CrossCallReturnLabel_7:
   \   0000B5                ; Setup parameters for call to function _ltoa
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   25..         ADD     A,?V0 + 6
   \   0000B9   F8           MOV     R0,A
   \   0000BA   85..82       MOV     DPL,?XSP + 0
   \   0000BD   85..83       MOV     DPH,?XSP + 1
   \   0000C0   E582         MOV     A,DPL
   \   0000C2   28           ADD     A,R0
   \   0000C3   F5..         MOV     ?V0 + 2,A
   \   0000C5   E583         MOV     A,DPH
   \   0000C7   3400         ADDC    A,#0x0
   \   0000C9   F5..         MOV     ?V0 + 3,A
   \   0000CB   78..         MOV     R0,#?V0 + 2
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D0   A9..         MOV     R1,?V0 + 4
   \   0000D2   AA..         MOV     R2,?V0 + 0
   \   0000D4   AB..         MOV     R3,?V0 + 1
   \   0000D6   E4           CLR     A
   \   0000D7   FC           MOV     R4,A
   \   0000D8   FD           MOV     R5,A
   \   0000D9   12....       LCALL   ??_ltoa?relay
   \   0000DC   7402         MOV     A,#0x2
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
    500          
    501            HalLcdWriteString( (char *)buf, line );		
   \   0000E1                ; Setup parameters for call to function HalLcdWriteString
   \   0000E1   A9..         MOV     R1,?V0 + 7
   \   0000E3   85..82       MOV     DPL,?XSP + 0
   \   0000E6   85..83       MOV     DPH,?XSP + 1
   \   0000E9   AA82         MOV     R2,DPL
   \   0000EB   AB83         MOV     R3,DPH
   \   0000ED   12....       LCALL   ??HalLcdWriteString?relay
    502          
    503          #endif
    504          }
   \   0000F0   7419         MOV     A,#0x19
   \   0000F2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F5   7F0B         MOV     R7,#0xb
   \   0000F7   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 2
   \   00000A   F582         MOV     DPL,A
   \   00000C   E583         MOV     A,DPH
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET
    505          
    506          /**************************************************************************************************
    507           * @fn      HalLcdDisplayPercentBar
    508           *
    509           * @brief   Display percentage bar on the LCD
    510           *
    511           * @param   title   -
    512           *          value   -
    513           *
    514           * @return  None
    515           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    516          void HalLcdDisplayPercentBar( char *title, uint8 value )
   \                     HalLcdDisplayPercentBar:
    517          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    518          #if (HAL_LCD == TRUE)
    519          
    520            uint8 percent;
    521            uint8 leftOver;
    522            uint8 buf[17];
    523            uint32 err;
    524            uint8 x;
    525          
    526            /* Write the title: */
    527            HalLcdWriteString( title, HAL_LCD_LINE_1 );
   \   00000C                ; Setup parameters for call to function HalLcdWriteString
   \   00000C   7901         MOV     R1,#0x1
   \   00000E   12....       LCALL   ??HalLcdWriteString?relay
    528          
    529            if ( value > 100 )
   \   000011   EE           MOV     A,R6
   \   000012   C3           CLR     C
   \   000013   9465         SUBB    A,#0x65
   \   000015   4002         JC      ??HalLcdDisplayPercentBar_0
    530              value = 100;
   \   000017   7E64         MOV     R6,#0x64
    531          
    532            /* convert to blocks */
    533            percent = (uint8)(value / 10);
   \                     ??HalLcdDisplayPercentBar_0:
   \   000019   75F00A       MOV     B,#0xa
   \   00001C   EE           MOV     A,R6
   \   00001D   84           DIV     AB
   \   00001E   F5..         MOV     ?V0 + 3,A
    534            leftOver = (uint8)(value % 10);
   \   000020   EE           MOV     A,R6
   \   000021   75F00A       MOV     B,#0xa
   \   000024   84           DIV     AB
   \   000025   AFF0         MOV     R7,B
    535          
    536            /* Make window */
    537            osal_memcpy( buf, "[          ]  ", 15 );
   \   000027                ; Setup parameters for call to function osal_memcpy
   \   000027   75....       MOV     ?V0 + 0,#`?<Constant "[          ]  ">` & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(`?<Constant "[          ]  ">` >> 8) & 0xff
   \   00002D   75..00       MOV     ?V0 + 2,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000035   7C0F         MOV     R4,#0xf
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7403         MOV     A,#0x3
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   AA82         MOV     R2,DPL
   \   000040   AB83         MOV     R3,DPH
   \   000042   12....       LCALL   ??osal_memcpy?relay
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
    538          
    539            for ( x = 0; x < percent; x ++ )
   \   00004A   E5..         MOV     A,?V0 + 3
   \   00004C   601B         JZ      ??HalLcdDisplayPercentBar_1
    540            {
    541              buf[1+x] = '>';
   \   00004E   F8           MOV     R0,A
   \   00004F   7900         MOV     R1,#0x0
   \   000051   7A3E         MOV     R2,#0x3e
   \   000053   7401         MOV     A,#0x1
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??HalLcdDisplayPercentBar_2:
   \   000058   EA           MOV     A,R2
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E8           MOV     A,R0
   \   00005C   24FF         ADD     A,#-0x1
   \   00005E   18           DEC     R0
   \   00005F   E9           MOV     A,R1
   \   000060   34FF         ADDC    A,#-0x1
   \   000062   F9           MOV     R1,A
   \   000063   48           ORL     A,R0
   \   000064   70F2         JNZ     ??HalLcdDisplayPercentBar_2
    542            }
   \   000066   85....       MOV     ?V0 + 2,?V0 + 3
    543          
    544            if ( leftOver >= 5 )
   \                     ??HalLcdDisplayPercentBar_1:
   \   000069   EF           MOV     A,R7
   \   00006A   C3           CLR     C
   \   00006B   9405         SUBB    A,#0x5
   \   00006D   4019         JC      ??HalLcdDisplayPercentBar_3
    545              buf[1+x] = '+';
   \   00006F   85....       MOV     ?V0 + 0,?V0 + 2
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   E582         MOV     A,DPL
   \   00007A   25..         ADD     A,?V0 + 0
   \   00007C   F582         MOV     DPL,A
   \   00007E   E583         MOV     A,DPH
   \   000080   3400         ADDC    A,#0x0
   \   000082   F583         MOV     DPH,A
   \   000084   A3           INC     DPTR
   \   000085   742B         MOV     A,#0x2b
   \   000087   F0           MOVX    @DPTR,A
    546          
    547            err = (uint32)value;
    548            _ltoa( err, (uint8*)&buf[13], 10 );
   \                     ??HalLcdDisplayPercentBar_3:
   \   000088                ; Setup parameters for call to function _ltoa
   \   000088   740D         MOV     A,#0xd
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   8582..       MOV     ?V0 + 0,DPL
   \   000090   8583..       MOV     ?V0 + 1,DPH
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   790A         MOV     R1,#0xa
   \   00009A   EE           MOV     A,R6
   \   00009B   FA           MOV     R2,A
   \   00009C   E4           CLR     A
   \   00009D   FB           MOV     R3,A
   \   00009E   FC           MOV     R4,A
   \   00009F   FD           MOV     R5,A
   \   0000A0   12....       LCALL   ??_ltoa?relay
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
    549          
    550            HalLcdWriteString( (char*)buf, HAL_LCD_LINE_2 );
   \   0000A8                ; Setup parameters for call to function HalLcdWriteString
   \   0000A8   7902         MOV     R1,#0x2
   \   0000AA   85..82       MOV     DPL,?XSP + 0
   \   0000AD   85..83       MOV     DPH,?XSP + 1
   \   0000B0   AA82         MOV     R2,DPL
   \   0000B2   AB83         MOV     R3,DPH
   \   0000B4   12....       LCALL   ??HalLcdWriteString?relay
    551          
    552          #endif
    553          
    554          }
   \   0000B7   7411         MOV     A,#0x11
   \   0000B9                REQUIRE ?Subroutine3
   \   0000B9                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F04         MOV     R7,#0x4
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    555          
    556          
    557          #if (HAL_LCD == TRUE)
    558          /**************************************************************************************************
    559           *                                    HARDWARE LCD
    560           **************************************************************************************************/
    561          
    562          /**************************************************************************************************
    563           * @fn      halLcd_ConfigIO
    564           *
    565           * @brief   Configure IO lines needed for LCD control.
    566           *
    567           * @param   None
    568           *
    569           * @return  None
    570           **************************************************************************************************/
    571          static void halLcd_ConfigIO(void)
    572          {
    573            /* GPIO configuration */
    574            HAL_CONFIG_IO_OUTPUT(HAL_LCD_MODE_PORT,  HAL_LCD_MODE_PIN,  1);
    575            HAL_CONFIG_IO_OUTPUT(HAL_LCD_RESET_PORT, HAL_LCD_RESET_PIN, 1);
    576            HAL_CONFIG_IO_OUTPUT(HAL_LCD_CS_PORT,    HAL_LCD_CS_PIN,    1);
    577            HAL_CONFIG_IO_OUTPUT(HAL_LCD_BK_PORT,    HAL_LCD_BK_PIN,    1);
    578          
    579          }
    580          
    581          /**************************************************************************************************
    582           * @fn      halLcd_ConfigSPI
    583           *
    584           * @brief   Configure SPI lines needed for talking to LCD.
    585           *
    586           * @param   None
    587           *
    588           * @return  None
    589           **************************************************************************************************/
    590          static void halLcd_ConfigSPI(void)
    591          {
    592            /* UART/SPI Peripheral configuration */
    593          
    594             uint8 baud_exponent;
    595             uint8 baud_mantissa;
    596          
    597            /* Set SPI on UART 1 alternative 2 */
    598            PERCFG |= 0x02;
    599          
    600            /* Configure clk, master out and master in lines */
    601            HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_CLK_PORT,  HAL_LCD_CLK_PIN);
    602            HAL_CONFIG_IO_PERIPHERAL(HAL_LCD_MOSI_PORT, HAL_LCD_MOSI_PIN);
    603          
    604            /* Set SPI speed to 1 MHz (the values assume system clk of 32MHz)
    605             * Confirm on board that this results in 1MHz spi clk.
    606             */
    607            baud_exponent = 15;
    608            baud_mantissa =  0;
    609          
    610            /* Configure SPI */
    611            U1UCR  = 0x80;      /* Flush and goto IDLE state. 8-N-1. */
    612            U1CSR  = 0x00;      /* SPI mode, master. */
    613            U1GCR  = HAL_SPI_TRANSFER_MSB_FIRST | HAL_SPI_CLOCK_PHA_0 | HAL_SPI_CLOCK_POL_LO | baud_exponent;
    614            U1BAUD = baud_mantissa;
    615          }
    616          
    617          /**************************************************************************************************
    618           * @fn      HalLcd_HW_Init
    619           *
    620           * @brief   Initilize HW LCD Driver.
    621           *
    622           * @param   None
    623           *
    624           * @return  None
    625           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    626          void HalLcd_HW_Init(void)
   \                     HalLcd_HW_Init:
    627          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    628              /* Initialize LCD IO lines */
    629              halLcd_ConfigIO();
   \   000004   53F3FE       ANL     0xf3,#0xfe
   \   000007   D280         SETB    0x80.0
   \   000009   43FD01       ORL     0xfd,#0x1
   \   00000C   53F4FD       ANL     0xf4,#0xfd
   \   00000F   D291         SETB    0x90.1
   \   000011   43FE02       ORL     0xfe,#0x2
   \   000014   53F4FB       ANL     0xf4,#0xfb
   \   000017   D292         SETB    0x90.2
   \   000019   43FE04       ORL     0xfe,#0x4
   \   00001C   53F37F       ANL     0xf3,#0x7f
   \   00001F   D287         SETB    0x80.7
   \   000021   43FD80       ORL     0xfd,#0x80
    630          
    631              halLcd_ConfigSPI();
   \   000024   43F102       ORL     0xf1,#0x2
   \   000027   43F420       ORL     0xf4,#0x20
   \   00002A   43F440       ORL     0xf4,#0x40
   \   00002D   75FB80       MOV     0xfb,#-0x80
   \   000030   75F800       MOV     0xf8,#0x0
   \   000033   75FC2F       MOV     0xfc,#0x2f
   \   000036   75FA00       MOV     0xfa,#0x0
    632               
    633              
    634                  HalLcd_HW_Control(0xa2);
   \   000039                ; Setup parameters for call to function HalLcd_HW_Control
   \   000039   79A2         MOV     R1,#-0x5e
   \   00003B   12....       LCALL   ??HalLcd_HW_Control?relay
    635                  HalLcd_HW_Control(0xa0);
   \   00003E                ; Setup parameters for call to function HalLcd_HW_Control
   \   00003E   79A0         MOV     R1,#-0x60
   \   000040   12....       LCALL   ??HalLcd_HW_Control?relay
    636                  HalLcd_HW_Control(0xc8);
   \   000043                ; Setup parameters for call to function HalLcd_HW_Control
   \   000043   79C8         MOV     R1,#-0x38
   \   000045   12....       LCALL   ??HalLcd_HW_Control?relay
    637                  HalLcd_HW_Control(0x40);
   \   000048                ; Setup parameters for call to function HalLcd_HW_Control
   \   000048   7940         MOV     R1,#0x40
   \   00004A   12....       LCALL   ??HalLcd_HW_Control?relay
    638                  HalLcd_HW_Control(0x2c);
   \   00004D                ; Setup parameters for call to function HalLcd_HW_Control
   \   00004D   792C         MOV     R1,#0x2c
   \   00004F   12....       LCALL   ??HalLcd_HW_Control?relay
    639                  HalLcd_HW_Control(0x2e);
   \   000052                ; Setup parameters for call to function HalLcd_HW_Control
   \   000052   792E         MOV     R1,#0x2e
   \   000054   12....       LCALL   ??HalLcd_HW_Control?relay
    640                  HalLcd_HW_Control(0x2f);
   \   000057                ; Setup parameters for call to function HalLcd_HW_Control
   \   000057   792F         MOV     R1,#0x2f
   \   000059   12....       LCALL   ??HalLcd_HW_Control?relay
    641                  HalLcd_HW_Control(0x26);
   \   00005C                ; Setup parameters for call to function HalLcd_HW_Control
   \   00005C   7926         MOV     R1,#0x26
   \   00005E   12....       LCALL   ??HalLcd_HW_Control?relay
    642                  HalLcd_HW_Control(0x81);
   \   000061                ; Setup parameters for call to function HalLcd_HW_Control
   \   000061   7981         MOV     R1,#-0x7f
   \   000063   12....       LCALL   ??HalLcd_HW_Control?relay
    643                  HalLcd_HW_Control(0x88);
   \   000066                ; Setup parameters for call to function HalLcd_HW_Control
   \   000066   7988         MOV     R1,#-0x78
   \   000068   12....       LCALL   ??HalLcd_HW_Control?relay
    644                  HalLcd_HW_Control(0x1a);
   \   00006B                ; Setup parameters for call to function HalLcd_HW_Control
   \   00006B   791A         MOV     R1,#0x1a
   \   00006D   12....       LCALL   ??HalLcd_HW_Control?relay
    645                  HalLcd_HW_Control(0xaf);
   \   000070                ; Setup parameters for call to function HalLcd_HW_Control
   \   000070   79AF         MOV     R1,#-0x51
   \   000072   12....       LCALL   ??HalLcd_HW_Control?relay
    646              /* Clear the display */
    647              HalLcd_HW_Clear();
   \   000075                ; Setup parameters for call to function HalLcd_HW_Clear
   \   000075   12....       LCALL   ??HalLcd_HW_Clear?relay
    648          
    649          }
   \   000078   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00007B                REQUIRE PERCFG
   \   00007B                REQUIRE P1SEL
   \   00007B                REQUIRE U1UCR
   \   00007B                REQUIRE _A_U1CSR
   \   00007B                REQUIRE U1GCR
   \   00007B                REQUIRE U1BAUD
   \   00007B                REQUIRE P0SEL
   \   00007B                REQUIRE _A_P0
   \   00007B                REQUIRE P0DIR
   \   00007B                REQUIRE _A_P1
   \   00007B                REQUIRE P1DIR
    650          
    651          /**************************************************************************************************
    652           * @fn      HalLcd_HW_Control
    653           *
    654           * @brief   Write 1 command to the LCD
    655           *
    656           * @param   uint8 cmd - command to be written to the LCD
    657           *
    658           * @return  None
    659           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    660          void HalLcd_HW_Control(uint8 cmd)
   \                     HalLcd_HW_Control:
    661          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    662            LCD_SPI_BEGIN();
   \   000000   C292         CLR     0x90.2
    663            LCD_DO_CONTROL();
   \   000002   C280         CLR     0x80.0
    664            LCD_SPI_TX(cmd);
   \   000004   53F8F9       ANL     0xf8,#0xf9
   \   000007   89F9         MOV     0xf9,R1
   \                     ??HalLcd_HW_Control_0:
   \   000009   A2F9         MOV     C,0xf8.1
   \   00000B   50FC         JNC     ??HalLcd_HW_Control_0
    665            LCD_SPI_WAIT_RXRDY();
   \                     ??HalLcd_HW_Control_1:
   \   00000D   A2F9         MOV     C,0xf8.1
   \   00000F   50FC         JNC     ??HalLcd_HW_Control_1
    666            LCD_SPI_END();
   \   000011   00           NOP
   \   000012   00           NOP
   \   000013   00           NOP
   \   000014   00           NOP
   \   000015                REQUIRE ?Subroutine1
   \   000015                REQUIRE _A_P1
   \   000015                REQUIRE _A_P0
   \   000015                REQUIRE _A_U1CSR
   \   000015                REQUIRE U1DBUF
   \   000015                ; // Fall through to label ?Subroutine1
    667          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D292         SETB    0x90.2
   \   000002   02....       LJMP    ?BRET
    668          
    669          /**************************************************************************************************
    670           * @fn      HalLcd_HW_Write
    671           *
    672           * @brief   Write 1 byte to the LCD
    673           *
    674           * @param   uint8 data - data to be written to the LCD
    675           *
    676           * @return  None
    677           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    678          void HalLcd_HW_Write(uint8 data)
   \                     HalLcd_HW_Write:
    679          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    680            LCD_SPI_BEGIN();
   \   000000   C292         CLR     0x90.2
    681            LCD_DO_WRITE();
   \   000002   D280         SETB    0x80.0
    682            LCD_SPI_TX(data);
   \   000004   53F8F9       ANL     0xf8,#0xf9
   \   000007   89F9         MOV     0xf9,R1
   \                     ??HalLcd_HW_Write_0:
   \   000009   A2F9         MOV     C,0xf8.1
   \   00000B   50FC         JNC     ??HalLcd_HW_Write_0
    683            LCD_SPI_WAIT_RXRDY();
   \                     ??HalLcd_HW_Write_1:
   \   00000D   A2F9         MOV     C,0xf8.1
   \   00000F   50FC         JNC     ??HalLcd_HW_Write_1
    684            LCD_SPI_END();
   \   000011   00           NOP
   \   000012   00           NOP
   \   000013   00           NOP
   \   000014   00           NOP
   \   000015   80..         SJMP    ?Subroutine1
   \   000017                REQUIRE _A_P1
   \   000017                REQUIRE _A_P0
   \   000017                REQUIRE _A_U1CSR
   \   000017                REQUIRE U1DBUF
    685          }
    686          
    687          /**************************************************************************************************
    688           * @fn          HalLcd_HW_SetContrast
    689           *
    690           * @brief       Set display contrast
    691           *
    692           * @param       uint8 value - contrast value
    693           *
    694           * @return      none
    695           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    696          void HalLcd_HW_SetContrast(uint8 value)
   \                     HalLcd_HW_SetContrast:
    697          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    698              HalLcd_HW_Control(CONTRAST_CTRL_REGISTER);    
   \   000007                ; Setup parameters for call to function HalLcd_HW_Control
   \   000007   7981         MOV     R1,#-0x7f
   \   000009   12....       LCALL   ??HalLcd_HW_Control?relay
    699              HalLcd_HW_Control(value);   
   \   00000C                ; Setup parameters for call to function HalLcd_HW_Control
   \   00000C   EE           MOV     A,R6
   \   00000D   02....       LJMP    ?Subroutine2 & 0xFFFF
    700          }
    701          
    702          /**************************************************************************************************
    703           * @fn      HalLcd_HW_Clear
    704           *
    705           * @brief   Clear the HW LCD
    706           *
    707           * @param   None
    708           *
    709           * @return  None
    710           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    711          void HalLcd_HW_Clear(void)
   \                     HalLcd_HW_Clear:
    712          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    713          	uint8 i,j;
    714          	for (i = 0; i < 8; i++)
   \   000005   7F00         MOV     R7,#0x0
    715          	{
    716          		for (j = 0; j < 132; j++)
   \                     ??HalLcd_HW_Clear_0:
   \   000007   7E00         MOV     R6,#0x0
    717          		{
    718          			SET_DDRAM_ADDR(j,i);
   \                     ??HalLcd_HW_Clear_1:
   \   000009                ; Setup parameters for call to function SET_DDRAM_ADDR
   \   000009   EF           MOV     A,R7
   \   00000A   FA           MOV     R2,A
   \   00000B   EE           MOV     A,R6
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??SET_DDRAM_ADDR?relay
    719          			HalLcd_HW_Write(0);
   \   000010                ; Setup parameters for call to function HalLcd_HW_Write
   \   000010   7900         MOV     R1,#0x0
   \   000012   12....       LCALL   ??HalLcd_HW_Write?relay
    720          		}
   \   000015   0E           INC     R6
   \   000016   EE           MOV     A,R6
   \   000017   C3           CLR     C
   \   000018   9484         SUBB    A,#-0x7c
   \   00001A   40ED         JC      ??HalLcd_HW_Clear_1
    721          	}
   \   00001C   0F           INC     R7
   \   00001D   EF           MOV     A,R7
   \   00001E   C3           CLR     C
   \   00001F   9408         SUBB    A,#0x8
   \   000021   40E4         JC      ??HalLcd_HW_Clear_0
    722          }
   \   000023   02....       LJMP    ??Subroutine7_0 & 0xFFFF
    723          
    724          /**************************************************************************************************
    725           * @fn      HalLcd_HW_WriteChar
    726           *
    727           * @brief   Write one char to the display
    728           *
    729           * @param   uint8 line - line number that the char will be displayed
    730           *          uint8 col - colum where the char will be displayed
    731           *
    732           * @return  None
    733           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    734          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text)
   \                     HalLcd_HW_WriteChar:
    735          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 3,R1
   \   000007   8A..         MOV     ?V0 + 4,R2
   \   000009   8B..         MOV     ?V0 + 2,R3
    736              uint8 j;
    737              uint16 addr;
    738              uint8 cvt_result;
    739          
    740              if (col < LCD_MAX_LINE_LENGTH && line <= HAL_LCD_LINE_4)
   \   00000B   EA           MOV     A,R2
   \   00000C   C3           CLR     C
   \   00000D   9410         SUBB    A,#0x10
   \   00000F   4003         JC      $+5
   \   000011   02....       LJMP    ??HalLcd_HW_WriteChar_0 & 0xFFFF
   \   000014   E9           MOV     A,R1
   \   000015   C3           CLR     C
   \   000016   9405         SUBB    A,#0x5
   \   000018   507D         JNC     ??HalLcd_HW_WriteChar_0
    741              {
    742                      
    743                  //write first line 
    744                  SET_DDRAM_ADDR(col * 8, (line - 1) * 2);
   \   00001A                ; Setup parameters for call to function SET_DDRAM_ADDR
   \   00001A   74FF         MOV     A,#-0x1
   \   00001C   25..         ADD     A,?V0 + 3
   \   00001E   C3           CLR     C
   \   00001F   33           RLC     A
   \   000020   FA           MOV     R2,A
   \   000021   E5..         MOV     A,?V0 + 4
   \   000023   33           RLC     A
   \   000024   33           RLC     A
   \   000025   33           RLC     A
   \   000026   54F8         ANL     A,#0xf8
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   ??SET_DDRAM_ADDR?relay
    745                  addr = (text - 0x20)*12;
   \   00002C   85....       MOV     ?V0 + 0,?V0 + 2
   \   00002F   E5..         MOV     A,?V0 + 0
   \   000031   24E0         ADD     A,#-0x20
   \   000033   FE           MOV     R6,A
   \   000034   E4           CLR     A
   \   000035   34FF         ADDC    A,#-0x1
   \   000037   FF           MOV     R7,A
   \   000038   EE           MOV     A,R6
   \   000039   75F00C       MOV     B,#0xc
   \   00003C   A4           MUL     AB
   \   00003D   FE           MOV     R6,A
   \   00003E   A8F0         MOV     R0,B
   \   000040   75F00C       MOV     B,#0xc
   \   000043   EF           MOV     A,R7
   \   000044   A4           MUL     AB
   \   000045   28           ADD     A,R0
   \   000046   FF           MOV     R7,A
    746          
    747                  for (j = 0; j < 8; j++)
   \   000047   75..00       MOV     ?V0 + 0,#0x0
    748                  {
    749                       cvt_result = HalLcd_Convert_DZK(j,addr);
    750                       cvt_result = cvt_result << 2;
    751                  	HalLcd_HW_Write(cvt_result);
   \                     ??HalLcd_HW_WriteChar_1:
   \   00004A                ; Setup parameters for call to function HalLcd_HW_Write
   \   00004A                ; Setup parameters for call to function HalLcd_Convert_DZK
   \   00004A   EE           MOV     A,R6
   \   00004B   FA           MOV     R2,A
   \   00004C   EF           MOV     A,R7
   \   00004D   FB           MOV     R3,A
   \   00004E   A9..         MOV     R1,?V0 + 0
   \   000050   12....       LCALL   ??HalLcd_Convert_DZK?relay
   \   000053   E9           MOV     A,R1
   \   000054   33           RLC     A
   \   000055   33           RLC     A
   \   000056   54FC         ANL     A,#0xfc
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   ??HalLcd_HW_Write?relay
    752                  }
   \   00005C   05..         INC     ?V0 + 0
   \   00005E   E5..         MOV     A,?V0 + 0
   \   000060   C3           CLR     C
   \   000061   9408         SUBB    A,#0x8
   \   000063   40E5         JC      ??HalLcd_HW_WriteChar_1
    753          
    754                  //write second line 
    755                  SET_DDRAM_ADDR(col * 8, (line - 1) * 2 + 1);
   \   000065                ; Setup parameters for call to function SET_DDRAM_ADDR
   \   000065   E5..         MOV     A,?V0 + 3
   \   000067   C3           CLR     C
   \   000068   33           RLC     A
   \   000069   24FF         ADD     A,#-0x1
   \   00006B   FA           MOV     R2,A
   \   00006C   E5..         MOV     A,?V0 + 4
   \   00006E   33           RLC     A
   \   00006F   33           RLC     A
   \   000070   33           RLC     A
   \   000071   54F8         ANL     A,#0xf8
   \   000073   F9           MOV     R1,A
   \   000074   12....       LCALL   ??SET_DDRAM_ADDR?relay
    756                  addr = addr + 6;
   \   000077   EE           MOV     A,R6
   \   000078   2406         ADD     A,#0x6
   \   00007A   FE           MOV     R6,A
   \   00007B   EF           MOV     A,R7
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   FF           MOV     R7,A
    757          
    758                  for (j = 0; j < 8; j++)
   \   00007F   75..00       MOV     ?V0 + 0,#0x0
    759                  {
    760                       cvt_result = HalLcd_Convert_DZK(j,addr);
    761                  	HalLcd_HW_Write(cvt_result);
   \                     ??HalLcd_HW_WriteChar_2:
   \   000082                ; Setup parameters for call to function HalLcd_HW_Write
   \   000082                ; Setup parameters for call to function HalLcd_Convert_DZK
   \   000082   EE           MOV     A,R6
   \   000083   FA           MOV     R2,A
   \   000084   EF           MOV     A,R7
   \   000085   FB           MOV     R3,A
   \   000086   A9..         MOV     R1,?V0 + 0
   \   000088   12....       LCALL   ??HalLcd_Convert_DZK?relay
   \   00008B   12....       LCALL   ??HalLcd_HW_Write?relay
    762                  }
   \   00008E   05..         INC     ?V0 + 0
   \   000090   E5..         MOV     A,?V0 + 0
   \   000092   C3           CLR     C
   \   000093   9408         SUBB    A,#0x8
   \   000095   40EB         JC      ??HalLcd_HW_WriteChar_2
   \                     ??HalLcd_HW_WriteChar_0:
   \   000097   7F05         MOV     R7,#0x5
   \   000099   02....       LJMP    ?BANKED_LEAVE_XDATA
    763          
    764              }
    765              else
    766              {
    767                  return;
    768              }
    769          }
    770          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    771          uint8 HalLcd_Convert_DZK(uint8 index, uint16 addr)
   \                     HalLcd_Convert_DZK:
    772          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    773              uint8 return_val = 0;
   \   00000C   75..00       MOV     ?V0 + 0,#0x0
    774              uint8 j;
    775              uint8 temp;
    776              uint8 mask_array[8] = {BIT7,BIT6,BIT5,BIT4,BIT3,BIT2,BIT1,BIT0};
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7583..       MOV     DPH,#(`?<Constant {128, 64, 32, 16, 8, 4, 2, 1}>` >> 8) & 0xff
   \   00001C   7582..       MOV     DPL,#`?<Constant {128, 64, 32, 16, 8, 4, 2, 1}>` & 0xff
   \   00001F   7408         MOV     A,#0x8
   \   000021   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    777              uint8 mask = mask_array[index];
   \   000024   8E..         MOV     ?V0 + 2,R6
   \   000026   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FD           MOV     R5,A
    778          
    779              if (index > 7)
   \   00002B   EE           MOV     A,R6
   \   00002C   C3           CLR     C
   \   00002D   9408         SUBB    A,#0x8
   \   00002F   4004         JC      ??HalLcd_Convert_DZK_0
    780              {
    781                  return return_val;
   \   000031   7900         MOV     R1,#0x0
   \   000033   8041         SJMP    ??HalLcd_Convert_DZK_1
    782              }
    783          
    784              for (j = 0; j < 6; j++)
   \                     ??HalLcd_Convert_DZK_0:
   \   000035   7C00         MOV     R4,#0x0
    785              {
    786                  temp = ASCIITAB_DZK[addr + j];
    787                  temp = temp & mask;
    788                  temp = temp >> (7 - index);
    789                  if (temp)
   \                     ??HalLcd_Convert_DZK_2:
   \   000037   8C..         MOV     ?V0 + 2,R4
   \   000039   EA           MOV     A,R2
   \   00003A   25..         ADD     A,?V0 + 2
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   3400         ADDC    A,#0x0
   \   000040   F9           MOV     R1,A
   \   000041   74..         MOV     A,#ASCIITAB_DZK & 0xff
   \   000043   28           ADD     A,R0
   \   000044   F582         MOV     DPL,A
   \   000046   74..         MOV     A,#(ASCIITAB_DZK >> 8) & 0xff
   \   000048   39           ADDC    A,R1
   \   000049   F583         MOV     DPH,A
   \   00004B   E4           CLR     A
   \   00004C   93           MOVC    A,@A+DPTR
   \   00004D   5D           ANL     A,R5
   \   00004E   F5..         MOV     ?V0 + 2,A
   \   000050   75..00       MOV     ?V0 + 3,#0x0
   \   000053   7407         MOV     A,#0x7
   \   000055   C3           CLR     C
   \   000056   9E           SUBB    A,R6
   \   000057   78..         MOV     R0,#?V0 + 2
   \   000059   12....       LCALL   ?SS_SHR
   \   00005C   E5..         MOV     A,?V0 + 2
   \   00005E   6007         JZ      ??HalLcd_Convert_DZK_3
    790                  {
    791                      return_val |=  mask_array[7-j];
   \   000060   12....       LCALL   ?Subroutine4 & 0xFFFF
    792                  }
   \                     ??CrossCallReturnLabel_0:
   \   000063   42..         ORL     ?V0 + 0,A
   \   000065   8006         SJMP    ??HalLcd_Convert_DZK_4
    793                  else
    794                  {
    795                      return_val &=  ~mask_array[7-j];
   \                     ??HalLcd_Convert_DZK_3:
   \   000067   12....       LCALL   ?Subroutine4 & 0xFFFF
    796                  }
    797              }
   \                     ??CrossCallReturnLabel_1:
   \   00006A   F4           CPL     A
   \   00006B   52..         ANL     ?V0 + 0,A
   \                     ??HalLcd_Convert_DZK_4:
   \   00006D   0C           INC     R4
   \   00006E   EC           MOV     A,R4
   \   00006F   C3           CLR     C
   \   000070   9406         SUBB    A,#0x6
   \   000072   40C3         JC      ??HalLcd_Convert_DZK_2
    798          
    799              return return_val;
   \   000074   A9..         MOV     R1,?V0 + 0
   \                     ??HalLcd_Convert_DZK_1:
   \   000076   7408         MOV     A,#0x8
   \   000078   02....       LJMP    ?Subroutine3 & 0xFFFF
    800          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EC           MOV     A,R4
   \   000001   F8           MOV     R0,A
   \   000002   C3           CLR     C
   \   000003   E4           CLR     A
   \   000004   98           SUBB    A,R0
   \   000005   F8           MOV     R0,A
   \   000006   95E0         SUBB    A,0xE0 /* A   */
   \   000008   F9           MOV     R1,A
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E582         MOV     A,DPL
   \   000011   28           ADD     A,R0
   \   000012   F582         MOV     DPL,A
   \   000014   E583         MOV     A,DPH
   \   000016   39           ADDC    A,R1
   \   000017   F583         MOV     DPH,A
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   22           RET
    801          
    802          /**************************************************************************************************
    803           * @fn          halLcdWriteLine
    804           *
    805           * @brief       Write one line on display
    806           *
    807           * @param       uint8 line - display line
    808           *              char *pText - text buffer to write
    809           *
    810           * @return      none
    811           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    812          void HalLcd_HW_WriteLine(uint8 line, const char *pText)
   \                     HalLcd_HW_WriteLine:
    813          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 1,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    814            uint8 count;
    815            uint8 totalLength = (uint8)osal_strlen( (char *)pText );
   \   00000B                ; Setup parameters for call to function osal_strlen
   \   00000B   12....       LCALL   ??osal_strlen?relay
   \   00000E   EA           MOV     A,R2
   \   00000F   F5..         MOV     ?V0 + 2,A
    816          
    817            /* Write the content first */
    818            for (count=0; count<totalLength; count++)
   \   000011   75..00       MOV     ?V0 + 0,#0x0
   \   000014   8018         SJMP    ??HalLcd_HW_WriteLine_0
    819            {
    820              HalLcd_HW_WriteChar(line, count, (*(pText++)));
   \                     ??HalLcd_HW_WriteLine_1:
   \   000016                ; Setup parameters for call to function HalLcd_HW_WriteChar
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FB           MOV     R3,A
   \   00001C   AA..         MOV     R2,?V0 + 0
   \   00001E   A9..         MOV     R1,?V0 + 1
   \   000020   12....       LCALL   ??HalLcd_HW_WriteChar?relay
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   AE82         MOV     R6,DPL
   \   00002A   AF83         MOV     R7,DPH
    821            }
   \   00002C   05..         INC     ?V0 + 0
   \                     ??HalLcd_HW_WriteLine_0:
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   C3           CLR     C
   \   000031   95..         SUBB    A,?V0 + 2
   \   000033   40E1         JC      ??HalLcd_HW_WriteLine_1
    822          
    823            /* Write blank spaces to rest of the line */
    824            for(count=totalLength; count<LCD_MAX_LINE_LENGTH;count++)
   \   000035   85....       MOV     ?V0 + 0,?V0 + 2
   \   000038   800B         SJMP    ??HalLcd_HW_WriteLine_2
    825            {
    826              HalLcd_HW_WriteChar(line, count, ' ');
   \                     ??HalLcd_HW_WriteLine_3:
   \   00003A                ; Setup parameters for call to function HalLcd_HW_WriteChar
   \   00003A   7B20         MOV     R3,#0x20
   \   00003C   AA..         MOV     R2,?V0 + 0
   \   00003E   A9..         MOV     R1,?V0 + 1
   \   000040   12....       LCALL   ??HalLcd_HW_WriteChar?relay
    827            }
   \   000043   05..         INC     ?V0 + 0
   \                     ??HalLcd_HW_WriteLine_2:
   \   000045   E5..         MOV     A,?V0 + 0
   \   000047   C3           CLR     C
   \   000048   9410         SUBB    A,#0x10
   \   00004A   40EE         JC      ??HalLcd_HW_WriteLine_3
    828          }
   \   00004C   7F03         MOV     R7,#0x3
   \   00004E   02....       LJMP    ?BANKED_LEAVE_XDATA
    829          
    830          /**************************************************************************************************
    831           * @fn      HalLcd_HW_WaitUs
    832           *
    833           * @brief   wait for x us. @ 32MHz MCU clock it takes 32 "nop"s for 1 us delay.
    834           *
    835           * @param   x us. range[0-65536]
    836           *
    837           * @return  None
    838           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    839          void HalLcd_HW_WaitUs(uint16 microSecs)
   \                     HalLcd_HW_WaitUs:
    840          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8020         SJMP    ??HalLcd_HW_WaitUs_0
    841            while(microSecs--)
    842            {
    843              /* 32 NOPs == 1 usecs */
    844              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \                     ??HalLcd_HW_WaitUs_1:
   \   000002   00           nop
   \   000003   00           nop
   \   000004   00           nop
   \   000005   00           nop
   \   000006   00           nop
    845              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   000007   00           nop
   \   000008   00           nop
   \   000009   00           nop
   \   00000A   00           nop
   \   00000B   00           nop
    846              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   00000C   00           nop
   \   00000D   00           nop
   \   00000E   00           nop
   \   00000F   00           nop
   \   000010   00           nop
    847              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   000011   00           nop
   \   000012   00           nop
   \   000013   00           nop
   \   000014   00           nop
   \   000015   00           nop
    848              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   000016   00           nop
   \   000017   00           nop
   \   000018   00           nop
   \   000019   00           nop
   \   00001A   00           nop
    849              asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   00001B   00           nop
   \   00001C   00           nop
   \   00001D   00           nop
   \   00001E   00           nop
   \   00001F   00           nop
    850              asm("nop"); asm("nop");
   \   000020   00           nop
   \   000021   00           nop
    851            }
   \                     ??HalLcd_HW_WaitUs_0:
   \   000022   EA           MOV     A,R2
   \   000023   F8           MOV     R0,A
   \   000024   EB           MOV     A,R3
   \   000025   F9           MOV     R1,A
   \   000026   E8           MOV     A,R0
   \   000027   24FF         ADD     A,#-0x1
   \   000029   1A           DEC     R2
   \   00002A   E9           MOV     A,R1
   \   00002B   34FF         ADDC    A,#-0x1
   \   00002D   FB           MOV     R3,A
   \   00002E   E8           MOV     A,R0
   \   00002F   49           ORL     A,R1
   \   000030   70D0         JNZ     ??HalLcd_HW_WaitUs_1
    852          }
   \   000032   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SET_DDRAM_ADDR?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SET_DDRAM_ADDR

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteString?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteString

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteScreen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteScreen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteStringValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteStringValueValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValueValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdDisplayPercentBar?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdDisplayPercentBar

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_Control?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_Control

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_Write?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_Write

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_SetContrast?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_SetContrast

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_Clear?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_Clear

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_WriteChar?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_WriteChar

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_Convert_DZK?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_Convert_DZK

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_WriteLine?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_WriteLine

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_WaitUs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_WaitUs

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TexasInstruments">`:
   \   000000   54657861     DB "TexasInstruments"
   \            73496E73
   \            7472756D
   \            656E7473
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[          ]  ">`:
   \   000000   5B202020     DB "[          ]  "
   \            20202020
   \            2020205D
   \            202000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {128, 64, 32, 16, 8, 4, 2, 1}>`:
   \   000000   80           DB 128
   \   000001   40           DB 64
   \   000002   20           DB 32
   \   000003   10           DB 16
   \   000004   08           DB 8
   \   000005   04           DB 4
   \   000006   02           DB 2
   \   000007   01           DB 1
    853          #endif
    854          
    855          
    856          /**************************************************************************************************
    857          **************************************************************************************************/
    858          
    859          
    860          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     32  HalLcdDisplayPercentBar
                          0 0 29 -> HalLcdWriteString
                          0 0 31 -> _ltoa
                          0 0 32 -> osal_memcpy
       2      0      0  HalLcdInit
                          2 0  0 -> HalLcd_HW_Init
       0      0      9  HalLcdWriteScreen
                          0 0  9 -> HalLcdWriteString
       0      0     64  HalLcdWriteString
                          0 0 17 -> HalLcdWriteString
                          0 0 17 -> HalLcd_HW_WriteLine
                          0 0 17 -> debug_str
                          0 0 17 -> osal_mem_alloc
                          0 0 17 -> osal_mem_free
                          0 0 20 -> osal_memcpy
                          0 0 17 -> osal_strlen
       0      0     47  HalLcdWriteStringValue
                          0 0 43 -> HalLcdWriteString
                          0 0 45 -> _ltoa
                          0 0 46 -> osal_memcpy
                          0 0 43 -> osal_strlen
       0      0     51  HalLcdWriteStringValueValue
                          0 0 44 -> HalLcdWriteString
                          0 0 46 -> _ltoa
                          0 0 47 -> osal_memcpy
                          0 0 44 -> osal_strlen
       0      0     44  HalLcdWriteValue
                          0 0 41 -> HalLcdWriteString
                          0 0 43 -> _ltoa
       2      0     33  HalLcd_Convert_DZK
       0      0      9  HalLcd_HW_Clear
                          0 0  9 -> HalLcd_HW_Write
                          0 0  9 -> SET_DDRAM_ADDR
       0      0      9  HalLcd_HW_Control
       2      0      0  HalLcd_HW_Init
                          2 0  0 -> HalLcd_HW_Clear
                          2 0  0 -> HalLcd_HW_Control
       0      0      9  HalLcd_HW_SetContrast
                          0 0  9 -> HalLcd_HW_Control
       0      0      0  HalLcd_HW_WaitUs
       0      0     13  HalLcd_HW_Write
       0      0     24  HalLcd_HW_WriteChar
                          0 0 13 -> HalLcd_Convert_DZK
                          0 0 13 -> HalLcd_HW_Write
                          0 0 13 -> SET_DDRAM_ADDR
       0      0     28  HalLcd_HW_WriteLine
                          0 0 11 -> HalLcd_HW_WriteChar
                          0 0 11 -> osal_strlen
       0      0     22  SET_DDRAM_ADDR
                          0 0  9 -> HalLcd_HW_Control


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "TexasInstruments">
      15  ?<Constant "[          ]  ">
       8  ?<Constant {128, 64, 32, 16, 8, 4, 2, 1}>
       6  ??HalLcdDisplayPercentBar?relay
       6  ??HalLcdInit?relay
       6  ??HalLcdWriteScreen?relay
       6  ??HalLcdWriteString?relay
       6  ??HalLcdWriteStringValue?relay
       6  ??HalLcdWriteStringValueValue?relay
       6  ??HalLcdWriteValue?relay
       6  ??HalLcd_Convert_DZK?relay
       6  ??HalLcd_HW_Clear?relay
       6  ??HalLcd_HW_Control?relay
       6  ??HalLcd_HW_Init?relay
       6  ??HalLcd_HW_SetContrast?relay
       6  ??HalLcd_HW_WaitUs?relay
       6  ??HalLcd_HW_Write?relay
       6  ??HalLcd_HW_WriteChar?relay
       6  ??HalLcd_HW_WriteLine?relay
       6  ??SET_DDRAM_ADDR?relay
       5  ??Subroutine7_0
       4  ??Subroutine8_0
       8  ??Subroutine9_0
       7  ?Subroutine0
       5  ?Subroutine1
       4  ?Subroutine2
       8  ?Subroutine3
      34  ?Subroutine4
      10  ?Subroutine5
      19  ?Subroutine6
    1152  ASCIITAB_DZK
     185  HalLcdDisplayPercentBar
      14  HalLcdInit
      25  HalLcdWriteScreen
     290  HalLcdWriteString
     126  HalLcdWriteStringValue
     250  HalLcdWriteStringValueValue
      67  HalLcdWriteValue
     123  HalLcd_Convert_DZK
      38  HalLcd_HW_Clear
      21  HalLcd_HW_Control
     123  HalLcd_HW_Init
      16  HalLcd_HW_SetContrast
      53  HalLcd_HW_WaitUs
      23  HalLcd_HW_Write
     156  HalLcd_HW_WriteChar
      81  HalLcd_HW_WriteLine
       2  Lcd_Line1
       1  P0DIR
       1  P0SEL
       1  P1DIR
       1  P1SEL
       1  PERCFG
      32  SET_DDRAM_ADDR
       1  U1BAUD
       1  U1DBUF
       1  U1GCR
       1  U1UCR
       1  _A_P0
       1  _A_P1
       1  _A_U1CSR

 
 1 727 bytes in segment BANKED_CODE
   102 bytes in segment BANK_RELAYS
 1 152 bytes in segment CODE_C
    12 bytes in segment SFR_AN
    40 bytes in segment XDATA_ROM_C
     2 bytes in segment XDATA_Z
 
 2 981 bytes of CODE  memory
    40 bytes of CONST memory
     0 bytes of DATA  memory (+ 12 bytes shared)
     2 bytes of XDATA memory

Errors: none
Warnings: none
