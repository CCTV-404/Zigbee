###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             10/Dec/2016  13:28:15 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾   #
#                          (2)\Source\GenericApp.c                            #
#    Command line       =  -f "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾ (2)\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord #
#                          .cfg" (-DCPU32MHZ -DROOT=__near_func               #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾ (2)\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfi #
#                          g.cfg" (-DZIGBEEPRO -DSECURE=0                     #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00100000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "E:\Lib\micro-electromechan #
#                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp - ¸±±¾ (2)\Source\GenericApp.c"    #
#                          -D ZAPP_P1 -D MT_TASK -D MT_SYS_FUNC -D            #
#                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D              #
#                          HAL_UART_ISR -lC "E:\Lib\micro-electromechanical\Ê #
#                          ±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\G #
#                          enericApp - ¸±±¾ (2)\CC2530DB\CoordinatorEB\List\" #
#                           -lA "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-C #
#                          C2530-2.5.1a\Projects\zstack\Samples\GenericApp -  #
#                          ¸±±¾ (2)\CC2530DB\CoordinatorEB\List\"             #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\CoordinatorEB\Obj\" -e                #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾ (2)\CC2530DB\" -I "E:\Lib\micro-electromechan #
#                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp - ¸±±¾ (2)\CC2530DB\..\Source\"    #
#                          -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾ (2)\CC2530DB\..\..\..\ZMain\TI2530DB\" -I     #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\hal\include #
#                          \" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack- #
#                          CC2530-2.5.1a\Projects\zstack\Samples\GenericApp   #
#                          - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Components\hal\ #
#                          target\CC2530EB\" -I "E:\Lib\micro-electromechanic #
#                          al\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sampl #
#                          es\GenericApp - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\include\" -I                         #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\mac\high_le #
#                          vel\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZSta #
#                          ck-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp #
#                          p - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\low_level\srf04\" -I "E:\Lib\micro-electromechan #
#                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp - ¸±±¾ (2)\CC2530DB\..\..\..\..\.. #
#                          \Components\mac\low_level\srf04\single_chip\" -I   #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\mt\" -I     #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\osal\includ #
#                          e\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack #
#                          -CC2530-2.5.1a\Projects\zstack\Samples\GenericApp  #
#                          - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Components\serv #
#                          ices\saddr\" -I "E:\Lib\micro-electromechanical\Ê± #
#                          ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Ge #
#                          nericApp - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Compon #
#                          ents\services\sdata\" -I                           #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\stack\af\"  #
#                          -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Components\stack\ #
#                          nwk\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZSta #
#                          ck-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp #
#                          p - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\sapi\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ #
#                          \ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gene #
#                          ricApp - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sec\" -I "E:\Lib\micro-electromechanical\ #
#                          Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Comp #
#                          onents\stack\sys\" -I "E:\Lib\micro-electromechani #
#                          cal\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\GenericApp - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\zdo\" -I                          #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\zmac\" -I   #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"  #
#                          -Ohz --require_prototypes                          #
#    List file          =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾   #
#                          (2)\CC2530DB\CoordinatorEB\List\GenericApp.lst     #
#    Object file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾   #
#                          (2)\CC2530DB\CoordinatorEB\Obj\GenericApp.r51      #
#                                                                             #
#                                                                             #
###############################################################################

E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾ (2)\Source\GenericApp.c
      1          /******************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
      4            Revision:       $Revision: 29656 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends "Hello World" to another "Generic"
     45            application every 5 seconds.  The application will also
     46            receives "Hello World" packets.
     47          
     48            The "Hello World" messages are sent/received as MSG type message.
     49          
     50            This applications doesn't have a profile, so it handles everything
     51            directly - itself.
     52          
     53            Key control:
     54              SW1:
     55              SW2:  initiates end device binding
     56              SW3:
     57              SW4:  initiates a match description request
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include "OSAL.h"
     64          #include "AF.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          
     69          #include "GenericApp.h"
     70          #include "DebugTrace.h"
     71          
     72          #include <stdio.h>
     73          #include <stdlib.h>
     74             
     75          #if !defined( WIN32 )
     76            #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     77          #endif
     78          
     79          /* HAL */
     80          #include "hal_lcd.h"
     81          #include "hal_led.h"
     82          #include "hal_key.h"
     83          #include "hal_uart.h"
     84          
     85          /* RTOS */
     86          #if defined( IAR_ARMCM3_LM )
     87          #include "RTOS_App.h"
     88          #endif  
     89          
     90          #include "MT_UART.h"
     91          /*********************************************************************
     92           * MACROS
     93           */
     94          
     95          /*********************************************************************
     96           * CONSTANTS
     97           */
     98          
     99          /*********************************************************************
    100           * TYPEDEFS
    101           */
    102          
    103          /*********************************************************************
    104           * GLOBAL VARIABLES
    105           */
    106          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    107          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0700         DW 7
   \   000004   0600         DW 6
   \   000006   0800         DW 8
   \   000008   0500         DW 5
   \   00000A   0400         DW 4
   \   00000C   0200         DW 2
   \   00000E   0000         DW 0
    108          {
    109           GENERICAPP_CLUSTERID_TEMHUM,
    110            GENERICAPP_CLUSTERID_LINGHT,
    111            GENERICAPP_CLUSTERID_SOUND,
    112            GENERICAPP_CLUSTERID_POSTURE,
    113            GENERICAPP_CLUSTERID_DISTANCE,
    114            GENERICAPP_CLUSTERID_GPS,
    115            GENERICAPP_CLUSTERID_GAS
    116          };
    117          

   \                                 In  segment XDATA_ROM_C, align 1
    118          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   08           DB 8
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   08           DB 8
   \   00000A   ....         DW GenericApp_ClusterList
    119          {
    120            GENERICAPP_ENDPOINT,              //  int Endpoint;
    121            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    122            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    123            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    124            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    125            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    126            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    127            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    128            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    129          };
    130          
    131          // This is the Endpoint/Interface description.  It is defined here, but
    132          // filled-in in GenericApp_Init().  Another way to go would be to fill
    133          // in the structure here and make it a "const" (in code space).  The
    134          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          MSGfrom_UART Uart_MSG;
   \                     Uart_MSG:
   \   000000                DS 40
   \   000028                REQUIRE __INIT_XDATA_Z
    137          /*********************************************************************
    138           * EXTERNAL VARIABLES
    139           */
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL VARIABLES
    147           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    149                                    // This variable will be received when
    150                                    // GenericApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    152          
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    155          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    157          
    158          /*********************************************************************
    159           * LOCAL FUNCTIONS
    160           */
    161          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    162          static void GenericApp_HandleKeys( byte shift, byte keys );
    163          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    164          static void GenericApp_SendPeriodMessage( void );
    165          static void GenericApp_SendTheMessage( void );
    166          void atoMSG_Struct(char* buf, MSGfrom_UART* temp);
    167          
    168          #if defined( IAR_ARMCM3_LM )
    169          static void GenericApp_ProcessRtosMessage( void );
    170          #endif
    171          
    172          /*********************************************************************
    173           * NETWORK LAYER CALLBACKS
    174           */
    175          static void rxCB(uint8 port,uint8 event);
    176          void GenericApp_start_usrt_test(void);
    177          void Delays(void);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          void Delays(void) {
   \                     Delays:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    179            unsigned int itemp;
    180            for(itemp=0;itemp<500;itemp++) {
   \   000000   78F4         MOV     R0,#-0xc
   \   000002   7901         MOV     R1,#0x1
    181              asm("nop");
   \                     ??Delays_0:
   \   000004   00           nop
    182            }
   \   000005   E8           MOV     A,R0
   \   000006   24FF         ADD     A,#-0x1
   \   000008   18           DEC     R0
   \   000009   E9           MOV     A,R1
   \   00000A   34FF         ADDC    A,#-0x1
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   70F3         JNZ     ??Delays_0
    183          }
   \   000011   02....       LJMP    ?BRET
    184          
    185          /*********************************************************************
    186           * PUBLIC FUNCTIONS
    187           */
    188          
    189          /*********************************************************************
    190           * @fn      GenericApp_Init
    191           *
    192           * @brief   Initialization function for the Generic App Task.
    193           *          This is called during initialization and should contain
    194           *          any application specific initialization (ie. hardware
    195           *          initialization/setup, table initialization, power up
    196           *          notificaiton ... ).
    197           *
    198           * @param   task_id - the ID assigned by OSAL.  This ID should be
    199           *                    used to send messages and set timers.
    200           *
    201           * @return  none
    202           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    203          void GenericApp_Init( uint8 task_id )
   \                     GenericApp_Init:
    204          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    205            GenericApp_TaskID = task_id;
   \   00000C   90....       MOV     DPTR,#GenericApp_TaskID
   \   00000F   F0           MOVX    @DPTR,A
    206            GenericApp_NwkState = DEV_INIT;
   \   000010   90....       MOV     DPTR,#GenericApp_NwkState
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    207            GenericApp_TransID = 0;
   \   000016   90....       MOV     DPTR,#GenericApp_TransID
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
    208          
    209            // Device hardware initialization can be added here or in main() (Zmain.c).
    210            // If the hardware is application specific - add it here.
    211            // If the hardware is other parts of the device add it in main().
    212          
    213            GenericApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00001B   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   00001E   F0           MOVX    @DPTR,A
    214            GenericApp_DstAddr.endPoint = 0;
   \   00001F   A3           INC     DPTR
   \   000020   F0           MOVX    @DPTR,A
    215            GenericApp_DstAddr.addr.shortAddr = 0;
   \   000021   90....       MOV     DPTR,#GenericApp_DstAddr
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   F0           MOVX    @DPTR,A
    216          
    217            // Fill out the endpoint description.
    218            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000027   90....       MOV     DPTR,#GenericApp_epDesc
   \   00002A   740A         MOV     A,#0xa
   \   00002C   F0           MOVX    @DPTR,A
    219            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00002D   A3           INC     DPTR
   \   00002E   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000034   F0           MOVX    @DPTR,A
    220            GenericApp_epDesc.simpleDesc
    221                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000035   A3           INC     DPTR
   \   000036   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00003C   F0           MOVX    @DPTR,A
    222            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00003D   A3           INC     DPTR
   \   00003E   E4           CLR     A
   \   00003F   F0           MOVX    @DPTR,A
    223          
    224            // Register the endpoint description with the AF
    225            afRegister( &GenericApp_epDesc );
   \   000040                ; Setup parameters for call to function afRegister
   \   000040   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000042   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000044   12....       LCALL   ??afRegister?relay
    226          
    227            // Register for all key events - This app will handle all key events
    228            RegisterForKeys( GenericApp_TaskID );
   \   000047                ; Setup parameters for call to function RegisterForKeys
   \   000047   90....       MOV     DPTR,#GenericApp_TaskID
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   12....       LCALL   ??RegisterForKeys?relay
    229          
    230            // Update the display
    231          #if defined ( LCD_SUPPORTED )
    232            HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
   \   00004F                ; Setup parameters for call to function HalLcdWriteString
   \   00004F   7901         MOV     R1,#0x1
   \   000051   7A..         MOV     R2,#`?<Constant "GenericApp">` & 0xff
   \   000053   7B..         MOV     R3,#(`?<Constant "GenericApp">` >> 8) & 0xff
   \   000055   12....       LCALL   ??HalLcdWriteString?relay
    233          #endif
    234          
    235            ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
   \   000058                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000058   7A20         MOV     R2,#0x20
   \   00005A   7B80         MOV     R3,#-0x80
   \   00005C   90....       MOV     DPTR,#GenericApp_TaskID
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    236            ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
   \   000064                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000064   7A06         MOV     R2,#0x6
   \   000066   7B80         MOV     R3,#-0x80
   \   000068   90....       MOV     DPTR,#GenericApp_TaskID
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    237          
    238          #if defined( IAR_ARMCM3_LM )
    239            // Register this task with RTOS task initiator
    240            RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
    241          #endif
    242            
    243            
    244             MT_UartRegisterTaskID(task_id);
   \   000070                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000070   EE           MOV     A,R6
   \   000071   F9           MOV     R1,A
   \   000072   12....       LCALL   ??MT_UartRegisterTaskID?relay
    245             MT_UartInit();
   \   000075                ; Setup parameters for call to function MT_UartInit
   \   000075   12....       LCALL   ??MT_UartInit?relay
    246            halUARTCfg_t uartConfig;
    247            uartConfig.configured = TRUE;
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   7401         MOV     A,#0x1
   \   000080   F0           MOVX    @DPTR,A
    248            uartConfig.baudRate = HAL_UART_BR_9600;
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   E4           CLR     A
   \   000085   F0           MOVX    @DPTR,A
    249            uartConfig.flowControl = FALSE;
   \   000086   7402         MOV     A,#0x2
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   E4           CLR     A
   \   00008C   F0           MOVX    @DPTR,A
    250            uartConfig.callBackFunc = rxCB;
   \   00008D   741B         MOV     A,#0x1b
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   74..         MOV     A,#??rxCB?relay & 0xff
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   74..         MOV     A,#(??rxCB?relay >> 8) & 0xff
   \   000098   12....       LCALL   ?Subroutine3 & 0xFFFF
    251            HalUARTOpen(0,&uartConfig);
   \                     ??CrossCallReturnLabel_5:
   \   00009B   7900         MOV     R1,#0x0
   \   00009D   12....       LCALL   ??HalUARTOpen?relay
    252          }
   \   0000A0   741D         MOV     A,#0x1d
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   7F01         MOV     R7,#0x1
   \   0000A7   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000003   AA82         MOV     R2,DPL
   \   000005   AB83         MOV     R3,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001                ; Setup parameters for call to function atoi
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    253          
    254          /*********************************************************************
    255           * @fn      GenericApp_ProcessEvent
    256           *
    257           * @brief   Generic Application Task event processor.  This function
    258           *          is called to process all events for the task.  Events
    259           *          include timers, messages and any other user defined events.
    260           *
    261           * @param   task_id  - The OSAL assigned task ID.
    262           * @param   events - events to process.  This is a bit map and can
    263           *                   contain more than one event.
    264           *
    265           * @return  none
    266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    267          uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     GenericApp_ProcessEvent:
    268          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    269            afIncomingMSGPacket_t *MSGpkt;
    270            afDataConfirm_t *afDataConfirm;
    271          
    272            // Data Confirmation message fields
    273            byte sentEP;
    274            ZStatus_t sentStatus;
    275            byte sentTransID;       // This should match the value sent
    276            (void)task_id;  // Intentionally unreferenced parameter
    277          
    278            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL     A,#0x80
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
    279            {
    280              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000015                ; Setup parameters for call to function osal_msg_receive
   \   000015   802E         SJMP    ??GenericApp_ProcessEvent_1
    281              while ( MSGpkt )
    282              {
    283                switch ( MSGpkt->hdr.event )
    284                {
    285                  case ZDO_CB_MSG:
    286                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    287                    break;
    288          
    289                  case KEY_CHANGE:
    290                    GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    291                    break;
    292          
    293                  case AF_DATA_CONFIRM_CMD:
    294                    // This message is received as a confirmation of a data packet sent.
    295                    // The status is of ZStatus_t type [defined in ZComDef.h]
    296                    // The message fields are defined in AF.h
    297                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    298                    sentEP = afDataConfirm->endpoint;
    299                    sentStatus = afDataConfirm->hdr.status;
    300                    sentTransID = afDataConfirm->transID;
    301                    (void)sentEP;
    302                    (void)sentTransID;
    303          
    304                    // Action taken when confirmation is received.
    305                    if ( sentStatus != ZSuccess )
    306                    {
    307                      // The data wasn't delivered -- Do something
    308                    }
    309                    break;
    310          
    311                  case AF_INCOMING_MSG_CMD:
    312                    GenericApp_MessageMSGCB( MSGpkt );
    313                    break;
    314          
    315                  case ZDO_STATE_CHANGE:
    316                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??GenericApp_ProcessEvent_2:
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   90....       MOV     DPTR,#GenericApp_NwkState
   \   00001C   F0           MOVX    @DPTR,A
    317                    if ( (GenericApp_NwkState == DEV_ZB_COORD)
    318                        || (GenericApp_NwkState == DEV_ROUTER)
    319                        || (GenericApp_NwkState == DEV_END_DEVICE) )
   \   00001D   6409         XRL     A,#0x9
   \   00001F   600A         JZ      ??GenericApp_ProcessEvent_3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6407         XRL     A,#0x7
   \   000024   6005         JZ      ??GenericApp_ProcessEvent_3
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6406         XRL     A,#0x6
   \   000029   7013         JNZ     ??GenericApp_ProcessEvent_4
    320                    {
    321                      // Start sending "the" message in a regular interval.
    322                      GenericApp_start_usrt_test();
   \                     ??GenericApp_ProcessEvent_3:
   \   00002B                ; Setup parameters for call to function GenericApp_start_usrt_test
   \   00002B   12....       LCALL   ??GenericApp_start_usrt_test?relay
    323                      osal_start_timerEx( GenericApp_TaskID,
    324                                          GENERICAPP_SEND_MSG_EVT,
    325                                          GENERICAPP_SEND_MSG_TIMEOUT );
   \   00002E                ; Setup parameters for call to function osal_start_timerEx
   \   00002E   7C88         MOV     R4,#-0x78
   \   000030   7D13         MOV     R5,#0x13
   \   000032   7A01         MOV     R2,#0x1
   \   000034   7B00         MOV     R3,#0x0
   \   000036   90....       MOV     DPTR,#GenericApp_TaskID
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
   \   00003B   12....       LCALL   ??osal_start_timerEx?relay
    326                    }
    327                    break;
    328          
    329                  default:
    330                    break;
    331                }
    332          
    333                // Release the memory
    334                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_4:
   \   00003E                ; Setup parameters for call to function osal_msg_deallocate
   \   00003E   AA..         MOV     R2,?V0 + 0
   \   000040   AB..         MOV     R3,?V0 + 1
   \   000042   12....       LCALL   ??osal_msg_deallocate?relay
    335          
    336                // Next
    337                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000045                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   000045   90....       MOV     DPTR,#GenericApp_TaskID
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
   \   00004A   12....       LCALL   ??osal_msg_receive?relay
   \   00004D   8A..         MOV     ?V0 + 0,R2
   \   00004F   8B..         MOV     ?V0 + 1,R3
   \   000051   E5..         MOV     A,?V0 + 0
   \   000053   45..         ORL     A,?V0 + 1
   \   000055   7003         JNZ     $+5
   \   000057   02....       LJMP    ??GenericApp_ProcessEvent_5 & 0xFFFF
   \   00005A   85..82       MOV     DPL,?V0 + 0
   \   00005D   85..83       MOV     DPH,?V0 + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   24E6         ADD     A,#-0x1a
   \   000063   7003         JNZ     $+5
   \   000065   02....       LJMP    ??GenericApp_ProcessEvent_6 & 0xFFFF
   \   000068   245A         ADD     A,#0x5a
   \   00006A   7003         JNZ     $+5
   \   00006C   02....       LJMP    ??GenericApp_ProcessEvent_7 & 0xFFFF
   \   00006F   24EF         ADD     A,#-0x11
   \   000071   60A4         JZ      ??GenericApp_ProcessEvent_2
   \   000073   24FE         ADD     A,#-0x2
   \   000075   70C7         JNZ     ??GenericApp_ProcessEvent_4
   \   000077   E5..         MOV     A,?V0 + 0
   \   000079   240C         ADD     A,#0xc
   \   00007B   F582         MOV     DPL,A
   \   00007D   E5..         MOV     A,?V0 + 1
   \   00007F   3400         ADDC    A,#0x0
   \   000081   F583         MOV     DPH,A
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F5..         MOV     ?V0 + 2,A
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F5..         MOV     ?V0 + 3,A
   \   00008A   78..         MOV     R0,#?V0 + 2
   \   00008C   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessEvent>_0`:
   \   00008F   0000         DW        0
   \   000091   0200         DW        2
   \   000093   0680         DW        32774
   \   000095   ....         DW        ??GenericApp_ProcessEvent_8
   \   000097   2080         DW        32800
   \   000099   ....         DW        ??GenericApp_ProcessEvent_9
   \   00009B   ....         DW        ??GenericApp_ProcessEvent_4
   \                     ??GenericApp_ProcessEvent_8:
   \   00009D                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00009D   AA..         MOV     R2,?V0 + 0
   \   00009F   AB..         MOV     R3,?V0 + 1
   \   0000A1   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   0000A4   8A..         MOV     ?V0 + 2,R2
   \   0000A6   8B..         MOV     ?V0 + 3,R3
   \   0000A8   EA           MOV     A,R2
   \   0000A9   45..         ORL     A,?V0 + 3
   \   0000AB   6091         JZ      ??GenericApp_ProcessEvent_4
   \   0000AD   8A82         MOV     DPL,R2
   \   0000AF   8B83         MOV     DPH,R3
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   7032         JNZ     ??GenericApp_ProcessEvent_10
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   602C         JZ      ??GenericApp_ProcessEvent_10
   \   0000BA   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   0000BD   7402         MOV     A,#0x2
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   8A82         MOV     DPL,R2
   \   0000C2   8B83         MOV     DPH,R3
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F8           MOV     R0,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F9           MOV     R1,A
   \   0000CA   90....       MOV     DPTR,#GenericApp_DstAddr
   \   0000CD   E8           MOV     A,R0
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   E9           MOV     A,R1
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   8A82         MOV     DPL,R2
   \   0000D4   8B83         MOV     DPH,R3
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   0000DE   F0           MOVX    @DPTR,A
   \   0000DF                ; Setup parameters for call to function HalLedSet
   \   0000DF   7A01         MOV     R2,#0x1
   \   0000E1   7908         MOV     R1,#0x8
   \   0000E3   12....       LCALL   ??HalLedSet?relay
   \                     ??GenericApp_ProcessEvent_10:
   \   0000E6                ; Setup parameters for call to function osal_mem_free
   \   0000E6   AA..         MOV     R2,?V0 + 2
   \   0000E8   AB..         MOV     R3,?V0 + 3
   \   0000EA   12....       LCALL   ??osal_mem_free?relay
   \   0000ED   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_9:
   \   0000F0   E5..         MOV     A,?V0 + 0
   \   0000F2   2413         ADD     A,#0x13
   \   0000F4   F582         MOV     DPL,A
   \   0000F6   E5..         MOV     A,?V0 + 1
   \   0000F8   3400         ADDC    A,#0x0
   \   0000FA   F583         MOV     DPH,A
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F8           MOV     R0,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F583         MOV     DPH,A
   \   000102   8882         MOV     DPL,R0
   \   000104   E0           MOVX    A,@DPTR
   \   000105   700A         JNZ     ??GenericApp_ProcessEvent_11
   \   000107                ; Setup parameters for call to function HalLedSet
   \   000107   7A01         MOV     R2,#0x1
   \                     ??GenericApp_ProcessEvent_12:
   \   000109   7908         MOV     R1,#0x8
   \   00010B   12....       LCALL   ??HalLedSet?relay
   \   00010E   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_11:
   \   000111                ; Setup parameters for call to function HalLedSet
   \   000111   7A04         MOV     R2,#0x4
   \   000113   80F4         SJMP    ??GenericApp_ProcessEvent_12
   \                     ??GenericApp_ProcessEvent_7:
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   E0           MOVX    A,@DPTR
   \   000119   F5..         MOV     ?V0 + 4,A
   \   00011B   85..82       MOV     DPL,?V0 + 0
   \   00011E   85..83       MOV     DPH,?V0 + 1
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   E0           MOVX    A,@DPTR
   \   000124   6003         JZ      $+5
   \   000126   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   000129   E5..         MOV     A,?V0 + 4
   \   00012B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00012D   5069         JNC     ??GenericApp_ProcessEvent_13
   \   00012F                ; Setup parameters for call to function HalLedSet
   \   00012F   7A00         MOV     R2,#0x0
   \   000131   7908         MOV     R1,#0x8
   \   000133   12....       LCALL   ??HalLedSet?relay
   \   000136   7408         MOV     A,#0x8
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   7402         MOV     A,#0x2
   \   00013D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000140   E4           CLR     A
   \   000141   F0           MOVX    @DPTR,A
   \   000142   A3           INC     DPTR
   \   000143   F0           MOVX    @DPTR,A
   \   000144                ; Setup parameters for call to function NLME_GetShortAddr
   \   000144   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000147   8A..         MOV     ?V0 + 2,R2
   \   000149   8B..         MOV     ?V0 + 3,R3
   \   00014B   AC..         MOV     R4,?V0 + 2
   \   00014D   AD..         MOV     R5,?V0 + 3
   \   00014F   75....       MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
   \   000152   75....       MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
   \   000155                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000155   75..00       MOV     ?V0 + 5,#0x0
   \   000158   78..         MOV     R0,#?V0 + 5
   \   00015A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015D   78..         MOV     R0,#?V0 + 2
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000162   75..08       MOV     ?V0 + 5,#0x8
   \   000165   78..         MOV     R0,#?V0 + 5
   \   000167   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00016A   78..         MOV     R0,#?V0 + 2
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016F   75..08       MOV     ?V0 + 2,#0x8
   \   000172   78..         MOV     R0,#?V0 + 2
   \   000174   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000177   75..04       MOV     ?V0 + 2,#0x4
   \   00017A   75..0F       MOV     ?V0 + 3,#0xf
   \   00017D   78..         MOV     R0,#?V0 + 2
   \   00017F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000182   90....       MOV     DPTR,#GenericApp_epDesc
   \   000185   E0           MOVX    A,@DPTR
   \   000186   F9           MOV     R1,A
   \   000187   7409         MOV     A,#0x9
   \   000189   12....       LCALL   ?XSTACK_DISP0_8
   \   00018C   AA82         MOV     R2,DPL
   \   00018E   AB83         MOV     R3,DPH
   \   000190   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   000193   7409         MOV     A,#0x9
   \   000195   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??GenericApp_ProcessEvent_13:
   \   000198   E5..         MOV     A,?V0 + 4
   \   00019A   A2E3         MOV     C,0xE0 /* A   */.3
   \   00019C   4003         JC      $+5
   \   00019E   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \   0001A1                ; Setup parameters for call to function HalLedSet
   \   0001A1   7A00         MOV     R2,#0x0
   \   0001A3   7908         MOV     R1,#0x8
   \   0001A5   12....       LCALL   ??HalLedSet?relay
   \   0001A8   7408         MOV     A,#0x8
   \   0001AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AD   740F         MOV     A,#0xf
   \   0001AF   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0001B2   74FF         MOV     A,#-0x1
   \   0001B4   F0           MOVX    @DPTR,A
   \   0001B5   A3           INC     DPTR
   \   0001B6   F0           MOVX    @DPTR,A
   \   0001B7   75....       MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
   \   0001BA   75....       MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
   \   0001BD                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0001BD   75..00       MOV     ?V0 + 4,#0x0
   \   0001C0   78..         MOV     R0,#?V0 + 4
   \   0001C2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C5   78..         MOV     R0,#?V0 + 2
   \   0001C7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CA   75..08       MOV     ?V0 + 4,#0x8
   \   0001CD   78..         MOV     R0,#?V0 + 4
   \   0001CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D2   78..         MOV     R0,#?V0 + 2
   \   0001D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D7   75..04       MOV     ?V0 + 2,#0x4
   \   0001DA   75..0F       MOV     ?V0 + 3,#0xf
   \   0001DD   78..         MOV     R0,#?V0 + 2
   \   0001DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E2   7908         MOV     R1,#0x8
   \   0001E4   7CFF         MOV     R4,#-0x1
   \   0001E6   7DFF         MOV     R5,#-0x1
   \   0001E8   E9           MOV     A,R1
   \   0001E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EC   AA82         MOV     R2,DPL
   \   0001EE   AB83         MOV     R3,DPH
   \   0001F0   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0001F3   7408         MOV     A,#0x8
   \   0001F5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F8   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
   \                     ??GenericApp_ProcessEvent_6:
   \   0001FB                ; Setup parameters for call to function GenericApp_MessageMSGCB
   \   0001FB   AA..         MOV     R2,?V0 + 0
   \   0001FD   AB..         MOV     R3,?V0 + 1
   \   0001FF   12....       LCALL   ??GenericApp_MessageMSGCB?relay
   \   000202   02....       LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
    338              }
    339          
    340              // return unprocessed events
    341              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_5:
   \   000205   EE           MOV     A,R6
   \   000206   FA           MOV     R2,A
   \   000207   EF           MOV     A,R7
   \   000208   6480         XRL     A,#0x80
   \   00020A   02....       LJMP    ??GenericApp_ProcessEvent_14 & 0xFFFF
    342            }
    343          
    344            // Send a message out - This event is generated by a timer
    345            //  (setup in GenericApp_Init()).
    346            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_0:
   \   00020D   EE           MOV     A,R6
   \   00020E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000210   4003         JC      $+5
   \   000212   02....       LJMP    ??GenericApp_ProcessEvent_15 & 0xFFFF
    347            {
    348              // Send "the" message
    349              GenericApp_SendPeriodMessage();
   \   000215   7409         MOV     A,#0x9
   \   000217   12....       LCALL   ?XSTACK_DISP0_8
   \   00021A   AC82         MOV     R4,DPL
   \   00021C   AD83         MOV     R5,DPH
   \   00021E   7583..       MOV     DPH,#(`?<Constant "Hello World">` >> 8) & 0xff
   \   000221   7582..       MOV     DPL,#`?<Constant "Hello World">` & 0xff
   \   000224   740C         MOV     A,#0xc
   \   000226   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000229                ; Setup parameters for call to function AF_DataRequest
   \   000229   75..1E       MOV     ?V0 + 0,#0x1e
   \   00022C   78..         MOV     R0,#?V0 + 0
   \   00022E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000231   75....       MOV     ?V0 + 0,#GenericApp_TransID & 0xff
   \   000234   75....       MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
   \   000237   78..         MOV     R0,#?V0 + 0
   \   000239   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023C   740C         MOV     A,#0xc
   \   00023E   12....       LCALL   ?XSTACK_DISP0_8
   \   000241   8582..       MOV     ?V0 + 0,DPL
   \   000244   8583..       MOV     ?V0 + 1,DPH
   \   000247   78..         MOV     R0,#?V0 + 0
   \   000249   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024C                ; Setup parameters for call to function osal_strlen
   \   00024C   740E         MOV     A,#0xe
   \   00024E   12....       LCALL   ?XSTACK_DISP0_8
   \   000251   AA82         MOV     R2,DPL
   \   000253   AB83         MOV     R3,DPH
   \   000255   12....       LCALL   ??osal_strlen?relay
   \   000258   EA           MOV     A,R2
   \   000259   2401         ADD     A,#0x1
   \   00025B   F5..         MOV     ?V0 + 0,A
   \   00025D   E4           CLR     A
   \   00025E   3400         ADDC    A,#0x0
   \   000260   F5..         MOV     ?V0 + 1,A
   \   000262   78..         MOV     R0,#?V0 + 0
   \   000264   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000267   75..01       MOV     ?V0 + 0,#0x1
   \   00026A   75..00       MOV     ?V0 + 1,#0x0
   \   00026D   78..         MOV     R0,#?V0 + 0
   \   00026F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000272   7920         MOV     R1,#0x20
   \   000274   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   000276   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   000278   7A..         MOV     R2,#GenericApp_DstAddr & 0xff
   \   00027A   7B..         MOV     R3,#(GenericApp_DstAddr >> 8) & 0xff
   \   00027C   12....       LCALL   ??AF_DataRequest?relay
   \   00027F   7409         MOV     A,#0x9
   \   000281   12....       LCALL   ?DEALLOC_XSTACK8
    350          
    351              // Setup to send message again
    352              osal_start_timerEx( GenericApp_TaskID,
    353                                  GENERICAPP_SEND_MSG_EVT,
    354                                  GENERICAPP_SEND_MSG_TIMEOUT );
   \   000284                ; Setup parameters for call to function osal_start_timerEx
   \   000284   7C88         MOV     R4,#-0x78
   \   000286   7D13         MOV     R5,#0x13
   \   000288   7A01         MOV     R2,#0x1
   \   00028A   7B00         MOV     R3,#0x0
   \   00028C   90....       MOV     DPTR,#GenericApp_TaskID
   \   00028F   E0           MOVX    A,@DPTR
   \   000290   F9           MOV     R1,A
   \   000291   12....       LCALL   ??osal_start_timerEx?relay
    355          
    356              // return unprocessed events
    357              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \   000294   EE           MOV     A,R6
   \   000295   6401         XRL     A,#0x1
   \   000297   FA           MOV     R2,A
   \   000298   EF           MOV     A,R7
   \                     ??GenericApp_ProcessEvent_14:
   \   000299   FB           MOV     R3,A
   \   00029A   8004         SJMP    ??GenericApp_ProcessEvent_16
    358            }
    359          
    360            
    361          #if defined( IAR_ARMCM3_LM )
    362            // Receive a message from the RTOS queue
    363            if ( events & GENERICAPP_RTOS_MSG_EVT )
    364            {
    365              // Process message from RTOS queue
    366              GenericApp_ProcessRtosMessage();
    367          
    368              // return unprocessed events
    369              return (events ^ GENERICAPP_RTOS_MSG_EVT);
    370            }
    371          #endif
    372          
    373            // Discard unknown events
    374            return 0;
   \                     ??GenericApp_ProcessEvent_15:
   \   00029C   7A00         MOV     R2,#0x0
   \   00029E   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_16:
   \   0002A0   7415         MOV     A,#0x15
   \   0002A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002A5   7F06         MOV     R7,#0x6
   \   0002A7   02....       LJMP    ?BANKED_LEAVE_XDATA
    375          }
    376          
    377          /*********************************************************************
    378           * Event Generation Functions
    379           */
    380          
    381          /*********************************************************************
    382           * @fn      GenericApp_ProcessZDOMsgs()
    383           *
    384           * @brief   Process response messages
    385           *
    386           * @param   none
    387           *
    388           * @return  none
    389           */
    390          static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    391          {
    392            switch ( inMsg->clusterID )
    393            {
    394              case End_Device_Bind_rsp:
    395                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    396                {
    397                  // Light LED
    398                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    399                }
    400          #if defined( BLINK_LEDS )
    401                else
    402                {
    403                  // Flash LED to show failure
    404                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
    405                }
    406          #endif
    407                break;
    408          
    409              case Match_Desc_rsp:
    410                {
    411                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    412                  if ( pRsp )
    413                  {
    414                    if ( pRsp->status == ZSuccess && pRsp->cnt )
    415                    {
    416                      GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    417                      GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    418                      // Take the first endpoint, Can be changed to search through endpoints
    419                      GenericApp_DstAddr.endPoint = pRsp->epList[0];
    420          
    421                      // Light LED
    422                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    423                    }
    424                    osal_mem_free( pRsp );
    425                  }
    426                }
    427                break;
    428            }
    429          }
    430          
    431          /*********************************************************************
    432           * @fn      GenericApp_HandleKeys
    433           *
    434           * @brief   Handles all key events for this device.
    435           *
    436           * @param   shift - true if in shift/alt.
    437           * @param   keys - bit field for key events. Valid entries:
    438           *                 HAL_KEY_SW_4
    439           *                 HAL_KEY_SW_3
    440           *                 HAL_KEY_SW_2
    441           *                 HAL_KEY_SW_1
    442           *
    443           * @return  none
    444           */
    445          static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
    446          {
    447            zAddrType_t dstAddr;
    448          
    449            // Shift is used to make each button/switch dual purpose.
    450            if ( shift )
    451            {
    452              if ( keys & HAL_KEY_SW_1 )
    453              {
    454              }
    455              if ( keys & HAL_KEY_SW_2 )
    456              {
    457              }
    458              if ( keys & HAL_KEY_SW_3 )
    459              {
    460              }
    461              if ( keys & HAL_KEY_SW_4 )
    462              {
    463              }
    464            }
    465            else
    466            {
    467              if ( keys & HAL_KEY_SW_1 )
    468              {
    469                // Since SW1 isn't used for anything else in this application...
    470          #if defined( SWITCH1_BIND )
    471                // we can use SW1 to simulate SW2 for devices that only have one switch,
    472                keys |= HAL_KEY_SW_2;
    473          #elif defined( SWITCH1_MATCH )
    474                // or use SW1 to simulate SW4 for devices that only have one switch
    475                keys |= HAL_KEY_SW_4;
    476          #endif
    477              }
    478          
    479              if ( keys & HAL_KEY_SW_2 )
    480              {
    481                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    482          
    483                // Initiate an End Device Bind Request for the mandatory endpoint
    484                dstAddr.addrMode = Addr16Bit;
    485                dstAddr.addr.shortAddr = 0x0000; // Coordinator
    486                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    487                                      GenericApp_epDesc.endPoint,
    488                                      GENERICAPP_PROFID,
    489                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    490                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    491                                      FALSE );
    492              }
    493          
    494              if ( keys & HAL_KEY_SW_3 )
    495              {
    496              }
    497          
    498              if ( keys & HAL_KEY_SW_4 )
    499              {
    500                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    501                // Initiate a Match Description Request (Service Discovery)
    502                dstAddr.addrMode = AddrBroadcast;
    503                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    504                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    505                                  GENERICAPP_PROFID,
    506                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    507                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    508                                  FALSE );
    509              }
    510            }
    511          }
    512          
    513          /*********************************************************************
    514           * LOCAL FUNCTIONS
    515           */
    516          
    517          /*********************************************************************
    518           * @fn      GenericApp_MessageMSGCB
    519           *
    520           * @brief   Data message processor callback.  This function processes
    521           *          any incoming data - probably from other devices.  So, based
    522           *          on cluster ID, perform the intended action.
    523           *
    524           * @param   none
    525           *
    526           * @return  none
    527           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    528          static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     GenericApp_MessageMSGCB:
    529          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    530             unsigned char buffer[24];
    531            unsigned char WenDuChars[2];
                                 ^
Warning[Pe550]: variable "WenDuChars" was set but never used
    532            unsigned char ShiDuChars[2]; 
                                 ^
Warning[Pe550]: variable "ShiDuChars" was set but never used
    533            switch ( pkt->clusterId )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 1,A
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_MessageMSGCB>_0`:
   \   00001E   0000         DW        0
   \   000020   0200         DW        2
   \   000022   0100         DW        1
   \   000024   ....         DW        ??GenericApp_MessageMSGCB_0
   \   000026   0700         DW        7
   \   000028   ....         DW        ??GenericApp_MessageMSGCB_1
   \   00002A   ....         DW        ??GenericApp_MessageMSGCB_2
    534            {
    535             case GENERICAPP_CLUSTERID_LINGHT:
    536              P1_0=~P1_0;
   \                     ??GenericApp_MessageMSGCB_1:
   \   00002C   A290         MOV     C,0x90.0
   \   00002E   D2F0         SETB    B.0
   \   000030   A290         MOV     C,0x90.0
   \   000032   30F001       JNB     B.0,??GenericApp_MessageMSGCB_3
   \   000035   B3           CPL     C
   \                     ??GenericApp_MessageMSGCB_3:
   \   000036   9290         MOV     0x90.0,C
    537              P1_1=~P1_1;
   \   000038   A291         MOV     C,0x90.1
   \   00003A   A291         MOV     C,0x90.1
   \   00003C   30F001       JNB     B.0,??GenericApp_MessageMSGCB_4
   \   00003F   B3           CPL     C
   \                     ??GenericApp_MessageMSGCB_4:
   \   000040   9291         MOV     0x90.1,C
    538          
    539              P1_4=~P1_4;
   \   000042   A294         MOV     C,0x90.4
   \   000044   A294         MOV     C,0x90.4
   \   000046   30F001       JNB     B.0,??GenericApp_MessageMSGCB_5
   \   000049   B3           CPL     C
   \                     ??GenericApp_MessageMSGCB_5:
   \   00004A   9294         MOV     0x90.4,C
    540              
    541              osal_memcpy(buffer,pkt->cmd.Data,3);
   \   00004C                ; Setup parameters for call to function osal_memcpy
   \   00004C   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000052   7C03         MOV     R4,#0x3
   \   000054   7D00         MOV     R5,#0x0
   \   000056   EC           MOV     A,R4
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   AA82         MOV     R2,DPL
   \   00005C   AB83         MOV     R3,DPH
   \   00005E   12....       LCALL   ??osal_memcpy?relay
   \   000061   7403         MOV     A,#0x3
   \   000063   12....       LCALL   ?DEALLOC_XSTACK8
    542              //char Txdata[25];
    543             // strcpy(Txdata,"HELLO");
    544              if(buffer[0]!=0)
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   7003         JNZ     $+5
   \   00006F   02....       LJMP    ??GenericApp_MessageMSGCB_2 & 0xFFFF
    545                {
    546                  HalUARTWrite(0,"Light",5);
   \   000072                ; Setup parameters for call to function HalUARTWrite
   \   000072   7C05         MOV     R4,#0x5
   \   000074   7D00         MOV     R5,#0x0
   \   000076   7A..         MOV     R2,#`?<Constant "Light">` & 0xff
   \   000078   7B..         MOV     R3,#(`?<Constant "Light">` >> 8) & 0xff
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   12....       LCALL   ??HalUARTWrite?relay
    547                  HalUARTWrite(0,buffer,3);
   \   00007F                ; Setup parameters for call to function HalUARTWrite
   \   00007F   7C03         MOV     R4,#0x3
   \   000081   805B         SJMP    ??GenericApp_MessageMSGCB_6
    548                  HalUARTWrite(0,"\n",1);
    549                 /*HalUARTWrite(0,"guang",5);*/
    550                }
    551              break;
    552              case GENERICAPP_CLUSTERID_TEMHUM:
    553                
    554              osal_memcpy(buffer,pkt->cmd.Data,2);
   \                     ??GenericApp_MessageMSGCB_0:
   \   000083                ; Setup parameters for call to function osal_memcpy
   \   000083   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000089   7C02         MOV     R4,#0x2
   \   00008B   7D00         MOV     R5,#0x0
   \   00008D   7403         MOV     A,#0x3
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   AA82         MOV     R2,DPL
   \   000094   AB83         MOV     R3,DPH
   \   000096   12....       LCALL   ??osal_memcpy?relay
   \   000099   7403         MOV     A,#0x3
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
    555              if(buffer[0]!=0)
   \   00009E   85..82       MOV     DPL,?XSP + 0
   \   0000A1   85..83       MOV     DPH,?XSP + 1
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   6020         JZ      ??GenericApp_MessageMSGCB_7
    556                {
    557                  WenDuChars[0]=buffer[0]/10+'0';
    558                  WenDuChars[1]=buffer[0]%10+'0';
    559                  HalUARTWrite(0,"tem",3);
   \   0000A7                ; Setup parameters for call to function HalUARTWrite
   \   0000A7   7C03         MOV     R4,#0x3
   \   0000A9   7D00         MOV     R5,#0x0
   \   0000AB   7A..         MOV     R2,#`?<Constant "tem">` & 0xff
   \   0000AD   7B..         MOV     R3,#(`?<Constant "tem">` >> 8) & 0xff
   \   0000AF   7900         MOV     R1,#0x0
   \   0000B1   12....       LCALL   ??HalUARTWrite?relay
    560                  HalUARTWrite(0,buffer,1);
   \   0000B4                ; Setup parameters for call to function HalUARTWrite
   \   0000B4   7C01         MOV     R4,#0x1
   \   0000B6   7D00         MOV     R5,#0x0
   \   0000B8   85..82       MOV     DPL,?XSP + 0
   \   0000BB   85..83       MOV     DPH,?XSP + 1
   \   0000BE   AA82         MOV     R2,DPL
   \   0000C0   AB83         MOV     R3,DPH
   \   0000C2   7900         MOV     R1,#0x0
   \   0000C4   12....       LCALL   ??HalUARTWrite?relay
    561                  /*HalUARTWrite(1,"$u,01,00,",9);*/
    562                }
    563                else
    564                {
    565                  //HalUARTWrite(1,"It's Wrong",10);
    566                }
    567                if(buffer[1]!=0)
   \                     ??GenericApp_MessageMSGCB_7:
   \   0000C7   7401         MOV     A,#0x1
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   602D         JZ      ??GenericApp_MessageMSGCB_2
    568                { 
    569                  ShiDuChars[0]=buffer[1]/10+'0';
    570                  ShiDuChars[1]=buffer[1]%10+'0';
    571                  HalUARTWrite(0,"hum",3);
   \   0000CF                ; Setup parameters for call to function HalUARTWrite
   \   0000CF   7C03         MOV     R4,#0x3
   \   0000D1   7D00         MOV     R5,#0x0
   \   0000D3   7A..         MOV     R2,#`?<Constant "hum">` & 0xff
   \   0000D5   7B..         MOV     R3,#(`?<Constant "hum">` >> 8) & 0xff
   \   0000D7   7900         MOV     R1,#0x0
   \   0000D9   12....       LCALL   ??HalUARTWrite?relay
    572                  HalUARTWrite(0,buffer,1);
   \   0000DC                ; Setup parameters for call to function HalUARTWrite
   \   0000DC   7C01         MOV     R4,#0x1
   \                     ??GenericApp_MessageMSGCB_6:
   \   0000DE   7D00         MOV     R5,#0x0
   \   0000E0   85..82       MOV     DPL,?XSP + 0
   \   0000E3   85..83       MOV     DPH,?XSP + 1
   \   0000E6   AA82         MOV     R2,DPL
   \   0000E8   AB83         MOV     R3,DPH
   \   0000EA   7900         MOV     R1,#0x0
   \   0000EC   12....       LCALL   ??HalUARTWrite?relay
    573                  HalUARTWrite(0,"\n",1);
   \   0000EF                ; Setup parameters for call to function HalUARTWrite
   \   0000EF   7C01         MOV     R4,#0x1
   \   0000F1   7D00         MOV     R5,#0x0
   \   0000F3   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   0000F5   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   0000F7   7900         MOV     R1,#0x0
   \   0000F9   12....       LCALL   ??HalUARTWrite?relay
    574                 /* HalUARTWrite(1,"\n",1);*/
    575                }
    576                else
    577                {
    578                  //HalUARTWrite(1,"It's Wrong",10);
    579                } 
    580              break;
    581            }
    582          }
   \                     ??GenericApp_MessageMSGCB_2:
   \   0000FC   7418         MOV     A,#0x18
   \   0000FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000101   7F04         MOV     R7,#0x4
   \   000103   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000106                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 1,A
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   22           RET
    583          
    584          /*********************************************************************
    585           * @fn      GenericApp_SendTheMessage
    586           *
    587           * @brief   Send "the" message.
    588           *
    589           * @param   none
    590           *
    591           * @return  none
    592           */
    593          static void GenericApp_SendTheMessage( void )
    594          {
    595            char theMessageData[] = "Hello World";
    596          
    597            if ( AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    598                                 GENERICAPP_CLUSTERID_TEMHUM,
    599                                 (byte)osal_strlen( theMessageData ) + 1,
    600                                 (byte *)&theMessageData,
    601                                 &GenericApp_TransID,
    602                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    603            {
    604              // Successfully requested to be sent.
    605            }
    606            else
    607            {
    608              // Error occurred in request to send.
    609            }
    610          }
    611          static void GenericApp_SendPeriodMessage( void )
    612          {
    613            char theMessageData[] = "Hello World";
    614          
    615            if ( AF_DataRequest( &GenericApp_DstAddr, &GenericApp_epDesc,
    616                                 GENERICAPP_CLUSTERID_TEMHUM,
    617                                 (byte)osal_strlen( theMessageData ) + 1,
    618                                 (byte *)&theMessageData,
    619                                 &GenericApp_TransID,
    620                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    621            {
    622              // Successfully requested to be sent.
    623            }
    624            else
    625            {
    626              // Error occurred in request to send.
    627            }
    628          }
    629          #if defined( IAR_ARMCM3_LM )
    630          /*********************************************************************
    631           * @fn      GenericApp_ProcessRtosMessage
    632           *
    633           * @brief   Receive message from RTOS queue, send response back.
    634           *
    635           * @param   none
    636           *
    637           * @return  none
    638           */
    639          static void GenericApp_ProcessRtosMessage( void )
    640          {
    641            osalQueue_t inMsg;
    642          
    643            if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
    644            {
    645              uint8 cmndId = inMsg.cmnd;
    646              uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
    647          
    648              switch ( cmndId )
    649              {
    650                case CMD_INCR:
    651                  counter += 1;  /* Increment the incoming counter */
    652                                 /* Intentionally fall through next case */
    653          
    654                case CMD_ECHO:
    655                {
    656                  userQueue_t outMsg;
    657          
    658                  outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
    659                  osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
    660                  osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
    661                  break;
    662                }
    663                
    664                default:
    665                  break;  /* Ignore unknown command */    
    666              }
    667            }
    668          }
    669          #endif
    670          
    671          /*********************************************************************
    672           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    673          void GenericApp_start_usrt_test(void)
   \                     GenericApp_start_usrt_test:
    674          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    675            HalUARTWrite(0," UART SUCCESS",12);
   \   000004                ; Setup parameters for call to function HalUARTWrite
   \   000004   7C0C         MOV     R4,#0xc
   \   000006   7D00         MOV     R5,#0x0
   \   000008   7A..         MOV     R2,#`?<Constant " UART SUCCESS">` & 0xff
   \   00000A   7B..         MOV     R3,#(`?<Constant " UART SUCCESS">` >> 8) & 0xff
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   12....       LCALL   ??HalUARTWrite?relay
    676          }
   \   000011                REQUIRE ?Subroutine0
   \   000011                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          static void rxCB(uint8 port,uint8 event)
   \                     rxCB:
    678          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 10
   \   000004   74F6         MOV     A,#-0xa
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    679            //HalUARTWrite(0,"I get",5);
    680            unsigned  char Uartbuf[10];
    681            unsigned char len;
    682            len=HalUARTRead(0,Uartbuf,10);
    683            //HalUARTWrite(0,""+len,1);
    684            if(len)
   \   000009                ; Setup parameters for call to function HalUARTRead
   \   000009   7C0A         MOV     R4,#0xa
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
   \   000017   7900         MOV     R1,#0x0
   \   000019   12....       LCALL   ??HalUARTRead?relay
   \   00001C   EA           MOV     A,R2
   \   00001D   601E         JZ      ??rxCB_0
    685            {
    686              HalUARTWrite(0,"I get",5);
   \   00001F                ; Setup parameters for call to function HalUARTWrite
   \   00001F   7C05         MOV     R4,#0x5
   \   000021   7D00         MOV     R5,#0x0
   \   000023   7A..         MOV     R2,#`?<Constant "I get">` & 0xff
   \   000025   7B..         MOV     R3,#(`?<Constant "I get">` >> 8) & 0xff
   \   000027   7900         MOV     R1,#0x0
   \   000029   12....       LCALL   ??HalUARTWrite?relay
    687              atoMSG_Struct(Uartbuf,&Uart_MSG);
                                   ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   00002C                ; Setup parameters for call to function atoMSG_Struct
   \   00002C   7C..         MOV     R4,#Uart_MSG & 0xff
   \   00002E   7D..         MOV     R5,#(Uart_MSG >> 8) & 0xff
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   AA82         MOV     R2,DPL
   \   000038   AB83         MOV     R3,DPH
   \   00003A   12....       LCALL   ??atoMSG_Struct?relay
    688              len=0;
    689            }
    690          }
   \                     ??rxCB_0:
   \   00003D   740A         MOV     A,#0xa
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   80..         SJMP    ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    691          void atoMSG_Struct(char* buf, MSGfrom_UART* temp)
   \                     atoMSG_Struct:
    692          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8C..         MOV     ?V0 + 0,R4
   \   00000C   8D..         MOV     ?V0 + 1,R5
    693          	char* p = buf;
   \   00000E   EA           MOV     A,R2
   \   00000F   FE           MOV     R6,A
   \   000010   EB           MOV     A,R3
   \   000011   FF           MOV     R7,A
    694          	char buffer[30];
    695          	int i = 0,j=0;
                 	    ^
Warning[Pe177]: variable "i" was declared but never referenced

  static void GenericApp_SendTheMessage( void )
              ^
"E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾ (2)\Source\GenericApp.c",593  Warning[Pe177]: 
          function "GenericApp_SendTheMessage" was declared but never
          referenced
   \   000012   7800         MOV     R0,#0x0
   \   000014   7900         MOV     R1,#0x0
   \   000016   800B         SJMP    ??CrossCallReturnLabel_0
    696          	while(*p!='#')
    697          	{
    698          		buffer[j++] = *p;
   \                     ??atoMSG_Struct_0:
   \   000018   E0           MOVX    A,@DPTR
   \   000019   C0E0         PUSH    A
   \   00001B   12....       LCALL   ?Subroutine6 & 0xFFFF
    699          		p++;
    700          	}
   \                     ??CrossCallReturnLabel_11:
   \   00001E   D0E0         POP     A
   \   000020   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6423         XRL     A,#0x23
   \   00002A   70EC         JNZ     ??atoMSG_Struct_0
    701          	buffer[j] = '\0';
   \   00002C   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00002F   12....       LCALL   ?Subroutine3 & 0xFFFF
    702          	temp->clusterId = atoi(buffer);
   \                     ??CrossCallReturnLabel_6:
   \   000032   12....       LCALL   ??atoi?relay
   \   000035   85..82       MOV     DPL,?V0 + 0
   \   000038   85..83       MOV     DPH,?V0 + 1
   \   00003B   EA           MOV     A,R2
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   EB           MOV     A,R3
   \   00003F   F0           MOVX    @DPTR,A
    703          	j=0;
   \   000040   7800         MOV     R0,#0x0
   \   000042   7900         MOV     R1,#0x0
   \   000044   800B         SJMP    ??CrossCallReturnLabel_1
    704          	while(*p!='#')
    705          	{
    706          		buffer[j++]=*p;
   \                     ??atoMSG_Struct_1:
   \   000046   E0           MOVX    A,@DPTR
   \   000047   C0E0         PUSH    A
   \   000049   12....       LCALL   ?Subroutine6 & 0xFFFF
    707          		p++;
    708          	}
   \                     ??CrossCallReturnLabel_12:
   \   00004C   D0E0         POP     A
   \   00004E   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   6423         XRL     A,#0x23
   \   000058   70EC         JNZ     ??atoMSG_Struct_1
    709          	buffer[j] = '\0';
   \   00005A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00005D   F0           MOVX    @DPTR,A
    710                  if(temp->clusterId == 1)
   \   00005E   85..82       MOV     DPL,?V0 + 0
   \   000061   85..83       MOV     DPH,?V0 + 1
   \   000064   E0           MOVX    A,@DPTR
   \   000065   6401         XRL     A,#0x1
   \   000067   7002         JNZ     ??atoMSG_Struct_2
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \                     ??atoMSG_Struct_2:
   \   00006B   701A         JNZ     ??atoMSG_Struct_3
    711                  {
    712                    temp->addr.shortAddr = (uint16)atoi(buffer);
   \   00006D                ; Setup parameters for call to function atoi
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   AA82         MOV     R2,DPL
   \   000075   AB83         MOV     R3,DPH
   \   000077   12....       LCALL   ??atoi?relay
   \   00007A   85..82       MOV     DPL,?V0 + 0
   \   00007D   85..83       MOV     DPH,?V0 + 1
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   EA           MOV     A,R2
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   EB           MOV     A,R3
   \   000086   F0           MOVX    @DPTR,A
    713                  }
    714          
    715          	j=0;
   \                     ??atoMSG_Struct_3:
   \   000087   7800         MOV     R0,#0x0
   \   000089   7900         MOV     R1,#0x0
   \   00008B   800A         SJMP    ??CrossCallReturnLabel_2
    716          	while(*p!='\0')
    717          	{
    718          		temp->UART_Char[j++] = *p;
   \                     ??atoMSG_Struct_4:
   \   00008D   C0E0         PUSH    A
   \   00008F   12....       LCALL   ?Subroutine4 & 0xFFFF
    719          		p++;
    720          	}
   \                     ??CrossCallReturnLabel_7:
   \   000092   D0E0         POP     A
   \   000094   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000097   8E82         MOV     DPL,R6
   \   000099   8F83         MOV     DPH,R7
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   70EF         JNZ     ??atoMSG_Struct_4
    721          	temp->UART_Char[j] = '\0';
   \   00009E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000A1   E4           CLR     A
   \   0000A2   F0           MOVX    @DPTR,A
    722          
    723          	HalUARTWrite(0,"change to the struce MSGfrom_UART",sizeof("change to the struce MSGfrom_UART"));
   \   0000A3                ; Setup parameters for call to function HalUARTWrite
   \   0000A3   7C22         MOV     R4,#0x22
   \   0000A5   FD           MOV     R5,A
   \   0000A6   7A..         MOV     R2,#`?<Constant "change to the struce ...">` & 0xff
   \   0000A8   7B..         MOV     R3,#(`?<Constant "change to the struce ...">` >> 8) & 0xff
   \   0000AA   F9           MOV     R1,A
   \   0000AB   12....       LCALL   ??HalUARTWrite?relay
    724          }
   \   0000AE   741E         MOV     A,#0x1e
   \   0000B0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B3   7F02         MOV     R7,#0x2
   \   0000B5   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   E583         MOV     A,DPH
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   2401         ADD     A,#0x1
   \   000004   08           INC     R0
   \   000005   E9           MOV     A,R1
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   AE82         MOV     R6,DPL
   \   000010   AF83         MOV     R7,DPH
   \   000012   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delays?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delays

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_start_usrt_test?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_start_usrt_test

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??atoMSG_Struct?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    atoMSG_Struct

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GenericApp">`:
   \   000000   47656E65     DB "GenericApp"
   \            72696341
   \            707000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Light">`:
   \   000000   4C696768     DB "Light"
   \            7400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "tem">`:
   \   000000   74656D00     DB "tem"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "hum">`:
   \   000000   68756D00     DB "hum"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello World">`:
   \   000000   48656C6C     DB "Hello World"
   \            6F20576F
   \            726C6400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " UART SUCCESS">`:
   \   000000   20554152     DB " UART SUCCESS"
   \            54205355
   \            43434553
   \            5300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I get">`:
   \   000000   49206765     DB "I get"
   \            7400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "change to the struce ...">`:
   \   000000   6368616E     DB "change to the struce MSGfrom_UART"
   \            67652074
   \            6F207468
   \            65207374
   \            72756365
   \            204D5347
   \            66726F6D
   \            5F554152
   \            5400    

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  Delays
       0      0     38  GenericApp_Init
                          0 0 38 -> HalLcdWriteString
                          0 0 38 -> HalUARTOpen
                          0 0 38 -> MT_UartInit
                          0 0 38 -> MT_UartRegisterTaskID
                          0 0 38 -> RegisterForKeys
                          0 0 38 -> ZDO_RegisterForZDOMsg
                          0 0 38 -> afRegister
       0      0     74  GenericApp_MessageMSGCB
                          0 0 36 -> HalUARTWrite
                          0 0 39 -> osal_memcpy
       2      0     44  GenericApp_ProcessEvent
                          0 0 44 -> AF_DataRequest
                          0 0 35 -> GenericApp_MessageMSGCB
                          0 0 35 -> GenericApp_start_usrt_test
                          0 0 35 -> HalLedSet
                          0 0 35 -> NLME_GetShortAddr
                          0 0 35 -> ZDO_ParseEPListRsp
                          0 0 44 -> ZDP_EndDeviceBindReq
                          0 0 43 -> ZDP_MatchDescReq
                          0 0 35 -> osal_mem_free
                          0 0 35 -> osal_msg_deallocate
                          0 0 35 -> osal_msg_receive
                          0 0 35 -> osal_start_timerEx
                          0 0 40 -> osal_strlen
       2      0     35  GenericApp_start_usrt_test
                          2 0  0 -> HalUARTWrite
       1      0     50  atoMSG_Struct
                          0 0 40 -> HalUARTWrite
                          0 0 40 -> atoi
       2      0     10  rxCB
                          2 0 10 -> HalUARTRead
                          2 0 10 -> HalUARTWrite
                          2 0 10 -> atoMSG_Struct


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?<Constant " UART SUCCESS">
      11  ?<Constant "GenericApp">
      12  ?<Constant "Hello World">
       6  ?<Constant "I get">
       6  ?<Constant "Light">
       2  ?<Constant "\n">
      34  ?<Constant "change to the struce ...">
       4  ?<Constant "hum">
       4  ?<Constant "tem">
       6  ??Delays?relay
       6  ??GenericApp_Init?relay
       6  ??GenericApp_MessageMSGCB?relay
       6  ??GenericApp_ProcessEvent?relay
       6  ??GenericApp_start_usrt_test?relay
       6  ??atoMSG_Struct?relay
       6  ??rxCB?relay
       7  ?Subroutine0
      19  ?Subroutine1
      23  ?Subroutine2
       8  ?Subroutine3
      21  ?Subroutine4
       5  ?Subroutine5
       4  ?Subroutine6
       8  ?Subroutine7
      17  ?Subroutine8
      20  Delays
      16  GenericApp_ClusterList
      12  GenericApp_DstAddr
     170  GenericApp_Init
     262  GenericApp_MessageMSGCB
       1  GenericApp_NwkState
     682  GenericApp_ProcessEvent
      12  GenericApp_SimpleDesc
       1  GenericApp_TaskID
       1  GenericApp_TransID
       6  GenericApp_epDesc
      17  GenericApp_start_usrt_test
      40  Uart_MSG
       1  _A_P1
     184  atoMSG_Struct
      68  rxCB

 
 1 515 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
   121 bytes in segment XDATA_ROM_C
    61 bytes in segment XDATA_Z
 
 1 557 bytes of CODE  memory
   121 bytes of CONST memory
     0 bytes of DATA  memory (+ 1 byte shared)
    61 bytes of XDATA memory

Errors: none
Warnings: 5
