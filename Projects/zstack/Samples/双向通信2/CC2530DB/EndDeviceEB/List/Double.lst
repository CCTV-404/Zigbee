###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         13/Mar/2014  14:49:48 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\OurEDA\Documents\Tencent                  #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\Source\Double.c                                  #
#    Command line       =  -f "C:\Users\OurEDA\Documents\Tencent              #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"   #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "C:\Users\OurEDA\Documents\ #
#                          Tencent Files\1534143789\FileRecv\ZStack-CC2530-2. #
#                          5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          Ë«ÏòÍ¨ÐÅ2\CC2530DB\..\..\..\Tools\CC2530DB\f8wConf #
#                          ig.cfg" (-DZIGBEEPRO -DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Users\OurEDA\Documents\ #
#                          Tencent Files\1534143789\FileRecv\ZStack-CC2530-2. #
#                          5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          Ë«ÏòÍ¨ÐÅ2\Source\Double.c" -D NWK_AUTO_POLL -D     #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC        #
#                          "C:\Users\OurEDA\Documents\Tencent                 #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\EndDeviceEB\List\" -lA                  #
#                          "C:\Users\OurEDA\Documents\Tencent                 #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\EndDeviceEB\List\" --diag_suppress      #
#                          Pe001,Pa010 -o "C:\Users\OurEDA\Documents\Tencent  #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\EndDeviceEB\Obj\" -e --no_code_motion   #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "C:\Users\OurEDA\Documents\Tencent              #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\" -I "C:\Users\OurEDA\Documents\Tencent #
#                           Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZS #
#                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨Ð #
#                          Å2\CC2530DB\..\Source\" -I                         #
#                          "C:\Users\OurEDA\Documents\Tencent                 #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\ZMain\TI2530DB\" -I            #
#                          "C:\Users\OurEDA\Documents\Tencent                 #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\hal\include\" #
#                           -I "C:\Users\OurEDA\Documents\Tencent             #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\hal\target\CC #
#                          2530EB\" -I "C:\Users\OurEDA\Documents\Tencent     #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\mac\include\" #
#                           -I "C:\Users\OurEDA\Documents\Tencent             #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\mac\high_leve #
#                          l\" -I "C:\Users\OurEDA\Documents\Tencent          #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\mac\low_level #
#                          \srf04\" -I "C:\Users\OurEDA\Documents\Tencent     #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\mac\low_level #
#                          \srf04\single_chip\" -I "C:\Users\OurEDA\Documents #
#                          \Tencent Files\1534143789\FileRecv\ZStack-CC2530-2 #
#                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\Samples #
#                          \Ë«ÏòÍ¨ÐÅ2\CC2530DB\..\..\..\..\..\Components\mt\" #
#                           -I "C:\Users\OurEDA\Documents\Tencent             #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\osal\include\ #
#                          " -I "C:\Users\OurEDA\Documents\Tencent            #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\services\sadd #
#                          r\" -I "C:\Users\OurEDA\Documents\Tencent          #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\services\sdat #
#                          a\" -I "C:\Users\OurEDA\Documents\Tencent          #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\stack\af\"    #
#                          -I "C:\Users\OurEDA\Documents\Tencent              #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\stack\nwk\"   #
#                          -I "C:\Users\OurEDA\Documents\Tencent              #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\stack\sapi\"  #
#                          -I "C:\Users\OurEDA\Documents\Tencent              #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\stack\sec\"   #
#                          -I "C:\Users\OurEDA\Documents\Tencent              #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\stack\sys\"   #
#                          -I "C:\Users\OurEDA\Documents\Tencent              #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\stack\zdo\"   #
#                          -I "C:\Users\OurEDA\Documents\Tencent              #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\zmac\" -I     #
#                          "C:\Users\OurEDA\Documents\Tencent                 #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"    #
#                          -Ohz                                               #
#    List file          =  C:\Users\OurEDA\Documents\Tencent                  #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\EndDeviceEB\List\Double.lst             #
#    Object file        =  C:\Users\OurEDA\Documents\Tencent                  #
#                          Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ #
#                          2\CC2530DB\EndDeviceEB\Obj\Double.r51              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\OurEDA\Documents\Tencent Files\1534143789\FileRecv\ZStack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ2\Source\Double.c
      1          /******************************************************************************
      2            Filename:       Double.c
      3            Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
      4            Revision:       $Revision: 29656 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends "Hello World" to another "Generic"
     45            application every 5 seconds.  The application will also
     46            receives "Hello World" packets.
     47          
     48            The "Hello World" messages are sent/received as MSG type message.
     49          
     50            This applications doesn't have a profile, so it handles everything
     51            directly - itself.
     52          
     53            Key control:
     54              SW1:
     55              SW2:  initiates end device binding
     56              SW3:
     57              SW4:  initiates a match description request
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include "OSAL.h"
     64          #include "AF.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          
     69          #include "Double.h"
     70          #include "DebugTrace.h"
     71          
     72          
     73          #if !defined( WIN32 )
     74            #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     75          #endif
     76          
     77          /* HAL */
     78          #include "hal_lcd.h"
     79          #include "hal_led.h"
     80          #include "hal_key.h"
     81          #include "hal_uart.h"
     82          
     83          /* RTOS */
     84          #if defined( IAR_ARMCM3_LM )
     85          #include "RTOS_App.h"
     86          #endif  
     87          
     88          /*********************************************************************
     89           * MACROS
     90           */
     91          
     92          /*********************************************************************
     93           * CONSTANTS
     94           */
     95          
     96          /*********************************************************************
     97           * TYPEDEFS
     98           */
     99          
    100          /*********************************************************************
    101           * GLOBAL VARIABLES
    102           */
    103          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    104          const cId_t Double_ClusterList[Double_MAX_CLUSTERS] =
   \                     Double_ClusterList:
   \   000000   0800         DW 8
    105          {
    106            Double_CLUSTERID
    107          };
    108          

   \                                 In  segment XDATA_ROM_C, align 1
    109          const SimpleDescriptionFormat_t Double_SimpleDesc =
   \                     Double_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW Double_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW Double_ClusterList
    110          {
    111            Double_ENDPOINT,              //  int Endpoint;
    112            Double_PROFID,                //  uint16 AppProfId[2];
    113            Double_DEVICEID,              //  uint16 AppDeviceId[2];
    114            Double_DEVICE_VERSION,        //  int   AppDevVer:4;
    115            Double_FLAGS,                 //  int   AppFlags:4;
    116            Double_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    117            (cId_t *)Double_ClusterList,  //  byte *pAppInClusterList;
    118            Double_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    119            (cId_t *)Double_ClusterList   //  byte *pAppInClusterList;
    120          };
    121          
    122          // This is the Endpoint/Interface description.  It is defined here, but
    123          // filled-in in Double_Init().  Another way to go would be to fill
    124          // in the structure here and make it a "const" (in code space).  The
    125          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    126          endPointDesc_t Double_epDesc;
   \                     Double_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    127          
    128          /*********************************************************************
    129           * EXTERNAL VARIABLES
    130           */
    131          
    132          /*********************************************************************
    133           * EXTERNAL FUNCTIONS
    134           */
    135          
    136          /*********************************************************************
    137           * LOCAL VARIABLES
    138           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          byte Double_TaskID;   // Task ID for internal task/event processing
   \                     Double_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140                                    // This variable will be received when
    141                                    // Double_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          devStates_t Double_NwkState;
   \                     Double_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    143          
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          byte Double_TransID;  // This is the unique message ID (counter)
   \                     Double_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          afAddrType_t Double_DstAddr;
   \                     Double_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          byte DoubleMeasurement_TaskID;
   \                     DoubleMeasurement_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          devStates_t DoubleMeasurement_NwkState;
   \                     DoubleMeasurement_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          byte DoubleMeasurement_TransID;
   \                     DoubleMeasurement_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    152          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          float fDouble;
   \                     fDouble:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    154          
    155          /*********************************************************************
    156           * LOCAL FUNCTIONS
    157           */
    158          static void Double_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    159          static void Double_HandleKeys( byte shift, byte keys );
    160          static void Double_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    161          static void Double_SendTheMessage( void );
    162          
    163          #if defined( IAR_ARMCM3_LM )
    164          static void Double_ProcessRtosMessage( void );
    165          #endif
    166          
    167          /*********************************************************************
    168           * NETWORK LAYER CALLBACKS
    169           */
    170          
    171          /*********************************************************************
    172           * PUBLIC FUNCTIONS
    173           */
    174          
    175          /*********************************************************************
    176           * @fn      Double_Init
    177           *
    178           * @brief   Initialization function for the Generic App Task.
    179           *          This is called during initialization and should contain
    180           *          any application specific initialization (ie. hardware
    181           *          initialization/setup, table initialization, power up
    182           *          notificaiton ... ).
    183           *
    184           * @param   task_id - the ID assigned by OSAL.  This ID should be
    185           *                    used to send messages and set timers.
    186           *
    187           * @return  none
    188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    189          void Double_Init( uint8 task_id )
   \                     Double_Init:
    190          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    191            Double_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#Double_TaskID
   \   000009   F0           MOVX    @DPTR,A
    192            Double_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#Double_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    193            Double_TransID = 0;
   \   000010   90....       MOV     DPTR,#Double_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    194          
    195            // Device hardware initialization can be added here or in main() (Zmain.c).
    196            // If the hardware is application specific - add it here.
    197            // If the hardware is other parts of the device add it in main().
    198          
    199            Double_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   000015   90....       MOV     DPTR,#Double_DstAddr + 8
   \   000018   F0           MOVX    @DPTR,A
    200            Double_DstAddr.endPoint = 0;
   \   000019   A3           INC     DPTR
   \   00001A   F0           MOVX    @DPTR,A
    201            Double_DstAddr.addr.shortAddr = 0;
   \   00001B   90....       MOV     DPTR,#Double_DstAddr
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   F0           MOVX    @DPTR,A
    202          
    203            // Fill out the endpoint description.
    204            Double_epDesc.endPoint = Double_ENDPOINT;
   \   000021   90....       MOV     DPTR,#Double_epDesc
   \   000024   740A         MOV     A,#0xa
   \   000026   F0           MOVX    @DPTR,A
    205            Double_epDesc.task_id = &Double_TaskID;
   \   000027   A3           INC     DPTR
   \   000028   74..         MOV     A,#Double_TaskID & 0xff
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   74..         MOV     A,#(Double_TaskID >> 8) & 0xff
   \   00002E   F0           MOVX    @DPTR,A
    206            Double_epDesc.simpleDesc
    207                      = (SimpleDescriptionFormat_t *)&Double_SimpleDesc;
   \   00002F   A3           INC     DPTR
   \   000030   74..         MOV     A,#Double_SimpleDesc & 0xff
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   74..         MOV     A,#(Double_SimpleDesc >> 8) & 0xff
   \   000036   F0           MOVX    @DPTR,A
    208            Double_epDesc.latencyReq = noLatencyReqs;
   \   000037   A3           INC     DPTR
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    209          
    210            // Register the endpoint description with the AF
    211            afRegister( &Double_epDesc );
   \   00003A                ; Setup parameters for call to function afRegister
   \   00003A   7A..         MOV     R2,#Double_epDesc & 0xff
   \   00003C   7B..         MOV     R3,#(Double_epDesc >> 8) & 0xff
   \   00003E   12....       LCALL   ??afRegister?relay
    212          
    213            // Register for all key events - This app will handle all key events
    214            RegisterForKeys( Double_TaskID );
   \   000041                ; Setup parameters for call to function RegisterForKeys
   \   000041   90....       MOV     DPTR,#Double_TaskID
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   ??RegisterForKeys?relay
    215          
    216            // Update the display
    217          #if defined ( LCD_SUPPORTED )
    218            HalLcdWriteString( "Double", HAL_LCD_LINE_1 );
   \   000049                ; Setup parameters for call to function HalLcdWriteString
   \   000049   7901         MOV     R1,#0x1
   \   00004B   7A..         MOV     R2,#`?<Constant "Double">` & 0xff
   \   00004D   7B..         MOV     R3,#(`?<Constant "Double">` >> 8) & 0xff
   \   00004F   12....       LCALL   ??HalLcdWriteString?relay
    219          #endif
    220          
    221            ZDO_RegisterForZDOMsg( Double_TaskID, End_Device_Bind_rsp );
   \   000052                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000052   7A20         MOV     R2,#0x20
   \   000054   7B80         MOV     R3,#-0x80
   \   000056   90....       MOV     DPTR,#Double_TaskID
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    222            ZDO_RegisterForZDOMsg( Double_TaskID, Match_Desc_rsp );
   \   00005E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00005E   7A06         MOV     R2,#0x6
   \   000060   7B80         MOV     R3,#-0x80
   \   000062   90....       MOV     DPTR,#Double_TaskID
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    223          
    224          #if defined( IAR_ARMCM3_LM )
    225            // Register this task with RTOS task initiator
    226            RTOS_RegisterApp( task_id, Double_RTOS_MSG_EVT );
    227          #endif
    228          }
   \   00006A                REQUIRE ?Subroutine0
   \   00006A                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    229          
    230          /*********************************************************************
    231           * @fn      Double_ProcessEvent
    232           *
    233           * @brief   Generic Application Task event processor.  This function
    234           *          is called to process all events for the task.  Events
    235           *          include timers, messages and any other user defined events.
    236           *
    237           * @param   task_id  - The OSAL assigned task ID.
    238           * @param   events - events to process.  This is a bit map and can
    239           *                   contain more than one event.
    240           *
    241           * @return  none
    242           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    243          uint16 Double_ProcessEvent( uint8 task_id, uint16 events )
   \                     Double_ProcessEvent:
    244          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
    245            afIncomingMSGPacket_t *MSGpkt;
    246            afDataConfirm_t *afDataConfirm;
    247          
    248            // Data Confirmation message fields
    249            byte sentEP;
    250            ZStatus_t sentStatus;
    251            byte sentTransID;       // This should match the value sent
    252            (void)task_id;  // Intentionally unreferenced parameter
    253          
    254            if ( events & SYS_EVENT_MSG )
   \   00000E   EB           MOV     A,R3
   \   00000F   5480         ANL     A,#0x80
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??Double_ProcessEvent_0 & 0xFFFF
    255            {
    256              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Double_TaskID );
   \   000016                ; Setup parameters for call to function osal_msg_receive
   \   000016   800D         SJMP    ??Double_ProcessEvent_1
    257              while ( MSGpkt )
    258              {
    259                switch ( MSGpkt->hdr.event )
    260                {
    261                  case ZDO_CB_MSG:
    262                    Double_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    263                    break;
    264          
    265                  case KEY_CHANGE:
    266                    Double_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    267                    break;
    268          
    269                  case AF_DATA_CONFIRM_CMD:
    270                    // This message is received as a confirmation of a data packet sent.
    271                    // The status is of ZStatus_t type [defined in ZComDef.h]
    272                    // The message fields are defined in AF.h
    273                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    274                    sentEP = afDataConfirm->endpoint;
    275                    sentStatus = afDataConfirm->hdr.status;
    276                    sentTransID = afDataConfirm->transID;
    277                    (void)sentEP;
    278                    (void)sentTransID;
    279          
    280                    // Action taken when confirmation is received.
    281                    if ( sentStatus != ZSuccess )
    282                    {
    283                      // The data wasn't delivered -- Do something
    284                    }
    285                    break;
    286          
    287                  case AF_INCOMING_MSG_CMD:
    288                    Double_MessageMSGCB( MSGpkt );
    289                    break;
    290          
    291                  case ZDO_STATE_CHANGE:
    292                    Double_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??Double_ProcessEvent_2:
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   90....       MOV     DPTR,#Double_NwkState
   \   00001D   F0           MOVX    @DPTR,A
    293                    if ( (Double_NwkState == DEV_ZB_COORD)
    294                        || (Double_NwkState == DEV_ROUTER)
    295                        || (Double_NwkState == DEV_END_DEVICE) )
    296                    {
    297                      // Start sending "the" message in a regular interval.
    298                      /*osal_start_timerEx( Double_TaskID,
    299                                          Double_SEND_MSG_EVT,
    300                                          Double_SEND_MSG_TIMEOUT );*/
    301                    }
    302                    break;
    303          
    304                  default:
    305                    break;
    306                }
    307          
    308                // Release the memory
    309                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??Double_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_msg_deallocate
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   FB           MOV     R3,A
   \   000022   12....       LCALL   ??osal_msg_deallocate?relay
    310          
    311                // Next
    312                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Double_TaskID );
   \   000025                ; Setup parameters for call to function osal_msg_receive
   \                     ??Double_ProcessEvent_1:
   \   000025   90....       MOV     DPTR,#Double_TaskID
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   12....       LCALL   ??osal_msg_receive?relay
   \   00002D   8A..         MOV     ?V0 + 0,R2
   \   00002F   8B..         MOV     ?V0 + 1,R3
   \   000031   AE..         MOV     R6,?V0 + 0
   \   000033   AF..         MOV     R7,?V0 + 1
   \   000035   EE           MOV     A,R6
   \   000036   4F           ORL     A,R7
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??Double_ProcessEvent_4 & 0xFFFF
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   E0           MOVX    A,@DPTR
   \   000041   24E6         ADD     A,#-0x1a
   \   000043   7003         JNZ     $+5
   \   000045   02....       LJMP    ??Double_ProcessEvent_5 & 0xFFFF
   \   000048   245A         ADD     A,#0x5a
   \   00004A   6060         JZ      ??Double_ProcessEvent_6
   \   00004C   24EF         ADD     A,#-0x11
   \   00004E   60C8         JZ      ??Double_ProcessEvent_2
   \   000050   24FE         ADD     A,#-0x2
   \   000052   70CA         JNZ     ??Double_ProcessEvent_3
   \   000054   EE           MOV     A,R6
   \   000055   240C         ADD     A,#0xc
   \   000057   F582         MOV     DPL,A
   \   000059   EF           MOV     A,R7
   \   00005A   3400         ADDC    A,#0x0
   \   00005C   F583         MOV     DPH,A
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6406         XRL     A,#0x6
   \   000061   7004         JNZ     ??Double_ProcessEvent_7
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   6480         XRL     A,#0x80
   \                     ??Double_ProcessEvent_7:
   \   000067   70B5         JNZ     ??Double_ProcessEvent_3
   \   000069                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000069   EE           MOV     A,R6
   \   00006A   FA           MOV     R2,A
   \   00006B   EF           MOV     A,R7
   \   00006C   FB           MOV     R3,A
   \   00006D   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   000070   EA           MOV     A,R2
   \   000071   4B           ORL     A,R3
   \   000072   60AA         JZ      ??Double_ProcessEvent_3
   \   000074   8A82         MOV     DPL,R2
   \   000076   8B83         MOV     DPH,R3
   \   000078   E0           MOVX    A,@DPTR
   \   000079   702B         JNZ     ??Double_ProcessEvent_8
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   6025         JZ      ??Double_ProcessEvent_8
   \   000081   90....       MOV     DPTR,#Double_DstAddr + 8
   \   000084   7402         MOV     A,#0x2
   \   000086   F0           MOVX    @DPTR,A
   \   000087   8A82         MOV     DPL,R2
   \   000089   8B83         MOV     DPH,R3
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F8           MOV     R0,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F9           MOV     R1,A
   \   000091   90....       MOV     DPTR,#Double_DstAddr
   \   000094   E8           MOV     A,R0
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   E9           MOV     A,R1
   \   000098   F0           MOVX    @DPTR,A
   \   000099   8A82         MOV     DPL,R2
   \   00009B   8B83         MOV     DPH,R3
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   90....       MOV     DPTR,#Double_DstAddr + 9
   \   0000A5   F0           MOVX    @DPTR,A
   \                     ??Double_ProcessEvent_8:
   \   0000A6                ; Setup parameters for call to function osal_mem_free
   \   0000A6   12....       LCALL   ??osal_mem_free?relay
   \   0000A9   02....       LJMP    ??Double_ProcessEvent_3 & 0xFFFF
   \                     ??Double_ProcessEvent_6:
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F5..         MOV     ?V0 + 2,A
   \   0000B2   8E82         MOV     DPL,R6
   \   0000B4   8F83         MOV     DPH,R7
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   6003         JZ      $+5
   \   0000BB   02....       LJMP    ??Double_ProcessEvent_3 & 0xFFFF
   \   0000BE   E5..         MOV     A,?V0 + 2
   \   0000C0   A2E1         MOV     C,0xE0 /* A   */.1
   \   0000C2   5066         JNC     ??Double_ProcessEvent_9
   \   0000C4   7408         MOV     A,#0x8
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   7402         MOV     A,#0x2
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   85..82       MOV     DPL,?XSP + 0
   \   0000CF   85..83       MOV     DPH,?XSP + 1
   \   0000D2   E4           CLR     A
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000D6   12....       LCALL   ??NLME_GetShortAddr?relay
   \   0000D9   8A..         MOV     ?V0 + 0,R2
   \   0000DB   8B..         MOV     ?V0 + 1,R3
   \   0000DD   AC..         MOV     R4,?V0 + 0
   \   0000DF   AD..         MOV     R5,?V0 + 1
   \   0000E1   75....       MOV     ?V0 + 0,#Double_ClusterList & 0xff
   \   0000E4   75....       MOV     ?V0 + 1,#(Double_ClusterList >> 8) & 0xff
   \   0000E7                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0000E7   75..00       MOV     ?V0 + 3,#0x0
   \   0000EA   78..         MOV     R0,#?V0 + 3
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EF   78..         MOV     R0,#?V0 + 0
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F4   75..01       MOV     ?V0 + 3,#0x1
   \   0000F7   78..         MOV     R0,#?V0 + 3
   \   0000F9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FC   78..         MOV     R0,#?V0 + 0
   \   0000FE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000101   75..01       MOV     ?V0 + 0,#0x1
   \   000104   78..         MOV     R0,#?V0 + 0
   \   000106   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000109   75..04       MOV     ?V0 + 0,#0x4
   \   00010C   75..0F       MOV     ?V0 + 1,#0xf
   \   00010F   78..         MOV     R0,#?V0 + 0
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000114   90....       MOV     DPTR,#Double_epDesc
   \   000117   E0           MOVX    A,@DPTR
   \   000118   F9           MOV     R1,A
   \   000119   7409         MOV     A,#0x9
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   AA82         MOV     R2,DPL
   \   000120   AB83         MOV     R3,DPH
   \   000122   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   000125   7409         MOV     A,#0x9
   \   000127   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??Double_ProcessEvent_9:
   \   00012A   E5..         MOV     A,?V0 + 2
   \   00012C   A2E3         MOV     C,0xE0 /* A   */.3
   \   00012E   4003         JC      $+5
   \   000130   02....       LJMP    ??Double_ProcessEvent_3 & 0xFFFF
   \   000133   7408         MOV     A,#0x8
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   740F         MOV     A,#0xf
   \   00013A   F0           MOVX    @DPTR,A
   \   00013B   85..82       MOV     DPL,?XSP + 0
   \   00013E   85..83       MOV     DPH,?XSP + 1
   \   000141   74FF         MOV     A,#-0x1
   \   000143   F0           MOVX    @DPTR,A
   \   000144   A3           INC     DPTR
   \   000145   F0           MOVX    @DPTR,A
   \   000146   75....       MOV     ?V0 + 0,#Double_ClusterList & 0xff
   \   000149   75....       MOV     ?V0 + 1,#(Double_ClusterList >> 8) & 0xff
   \   00014C                ; Setup parameters for call to function ZDP_MatchDescReq
   \   00014C   75..00       MOV     ?V0 + 2,#0x0
   \   00014F   78..         MOV     R0,#?V0 + 2
   \   000151   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000154   78..         MOV     R0,#?V0 + 0
   \   000156   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000159   75..01       MOV     ?V0 + 2,#0x1
   \   00015C   78..         MOV     R0,#?V0 + 2
   \   00015E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000161   78..         MOV     R0,#?V0 + 0
   \   000163   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000166   75..04       MOV     ?V0 + 0,#0x4
   \   000169   75..0F       MOV     ?V0 + 1,#0xf
   \   00016C   78..         MOV     R0,#?V0 + 0
   \   00016E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000171   7901         MOV     R1,#0x1
   \   000173   7CFF         MOV     R4,#-0x1
   \   000175   7DFF         MOV     R5,#-0x1
   \   000177   7408         MOV     A,#0x8
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   AA82         MOV     R2,DPL
   \   00017E   AB83         MOV     R3,DPH
   \   000180   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   000183   7408         MOV     A,#0x8
   \   000185   12....       LCALL   ?DEALLOC_XSTACK8
   \   000188   02....       LJMP    ??Double_ProcessEvent_3 & 0xFFFF
   \                     ??Double_ProcessEvent_5:
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   6408         XRL     A,#0x8
   \   000192   7002         JNZ     ??Double_ProcessEvent_10
   \   000194   A3           INC     DPTR
   \   000195   E0           MOVX    A,@DPTR
   \                     ??Double_ProcessEvent_10:
   \   000196   6003         JZ      $+5
   \   000198   02....       LJMP    ??Double_ProcessEvent_3 & 0xFFFF
   \   00019B   D2F0         SETB    B.0
   \   00019D   A290         MOV     C,0x90.0
   \   00019F   30F001       JNB     B.0,??Double_ProcessEvent_11
   \   0001A2   B3           CPL     C
   \                     ??Double_ProcessEvent_11:
   \   0001A3   9290         MOV     0x90.0,C
   \   0001A5                ; Setup parameters for call to function HalLcdWriteScreen
   \   0001A5   7C..         MOV     R4,#`?<Constant "rcvd">` & 0xff
   \   0001A7   7D..         MOV     R5,#(`?<Constant "rcvd">` >> 8) & 0xff
   \   0001A9   EE           MOV     A,R6
   \   0001AA   2422         ADD     A,#0x22
   \   0001AC   F582         MOV     DPL,A
   \   0001AE   EF           MOV     A,R7
   \   0001AF   3400         ADDC    A,#0x0
   \   0001B1   F583         MOV     DPH,A
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   FA           MOV     R2,A
   \   0001B5   A3           INC     DPTR
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   FB           MOV     R3,A
   \   0001B8   12....       LCALL   ??HalLcdWriteScreen?relay
   \   0001BB   02....       LJMP    ??Double_ProcessEvent_3 & 0xFFFF
    313              }
    314          
    315              // return unprocessed events
    316              return (events ^ SYS_EVENT_MSG);
   \                     ??Double_ProcessEvent_4:
   \   0001BE   AA..         MOV     R2,?V0 + 4
   \   0001C0   E5..         MOV     A,?V0 + 5
   \   0001C2   6480         XRL     A,#0x80
   \   0001C4   FB           MOV     R3,A
   \   0001C5   02....       LJMP    ??Double_ProcessEvent_12 & 0xFFFF
    317            }
    318          
    319            // Send a message out - This event is generated by a timer
    320            //  (setup in Double_Init()).
    321            if ( events & Double_SEND_MSG_EVT )
   \                     ??Double_ProcessEvent_0:
   \   0001C8   EA           MOV     A,R2
   \   0001C9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001CB   4003         JC      $+5
   \   0001CD   02....       LJMP    ??Double_ProcessEvent_13 & 0xFFFF
    322            {
    323              // Send "the" message
    324              Double_SendTheMessage();
   \   0001D0   90....       MOV     DPTR,#`?<Constant "Double:">`
   \   0001D3   C082         PUSH    DPL
   \   0001D5   7409         MOV     A,#0x9
   \   0001D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DA   AC82         MOV     R4,DPL
   \   0001DC   AD83         MOV     R5,DPH
   \   0001DE   7583..       MOV     DPH,#(`?<Constant "Double:">` >> 8) & 0xff
   \   0001E1   D082         POP     DPL
   \   0001E3   740F         MOV     A,#0xf
   \   0001E5   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   0001E8                ; Setup parameters for call to function _ltoa
   \   0001E8   740F         MOV     A,#0xf
   \   0001EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001ED   8582..       MOV     ?V0 + 0,DPL
   \   0001F0   8583..       MOV     ?V0 + 1,DPH
   \   0001F3   78..         MOV     R0,#?V0 + 0
   \   0001F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F8   790A         MOV     R1,#0xa
   \   0001FA   90....       MOV     DPTR,#fDouble
   \   0001FD   12....       LCALL   ?XLOAD_R2345
   \   000200   12....       LCALL   ?R2345_FLT_TO_UL
   \   000203   AA..         MOV     R2,?V0 + 0
   \   000205   AB..         MOV     R3,?V0 + 1
   \   000207   AC..         MOV     R4,?V0 + 2
   \   000209   AD..         MOV     R5,?V0 + 3
   \   00020B   12....       LCALL   ??_ltoa?relay
   \   00020E   7402         MOV     A,#0x2
   \   000210   12....       LCALL   ?DEALLOC_XSTACK8
   \   000213   7800         MOV     R0,#0x0
   \                     ??Double_ProcessEvent_14:
   \   000215   88..         MOV     ?V0 + 0,R0
   \   000217   7409         MOV     A,#0x9
   \   000219   12....       LCALL   ?XSTACK_DISP0_8
   \   00021C   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   700B         JNZ     ??Double_ProcessEvent_15
   \   000222   7409         MOV     A,#0x9
   \   000224   12....       LCALL   ?XSTACK_DISP0_8
   \   000227   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00022A   7420         MOV     A,#0x20
   \   00022C   F0           MOVX    @DPTR,A
   \                     ??Double_ProcessEvent_15:
   \   00022D   08           INC     R0
   \   00022E   E8           MOV     A,R0
   \   00022F   C3           CLR     C
   \   000230   940E         SUBB    A,#0xe
   \   000232   40E1         JC      ??Double_ProcessEvent_14
   \   000234                ; Setup parameters for call to function AF_DataRequest
   \   000234   75..1E       MOV     ?V0 + 0,#0x1e
   \   000237   78..         MOV     R0,#?V0 + 0
   \   000239   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00023C   75....       MOV     ?V0 + 0,#Double_TransID & 0xff
   \   00023F   75....       MOV     ?V0 + 1,#(Double_TransID >> 8) & 0xff
   \   000242   78..         MOV     R0,#?V0 + 0
   \   000244   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000247   740C         MOV     A,#0xc
   \   000249   12....       LCALL   ?XSTACK_DISP0_8
   \   00024C   8582..       MOV     ?V0 + 0,DPL
   \   00024F   8583..       MOV     ?V0 + 1,DPH
   \   000252   78..         MOV     R0,#?V0 + 0
   \   000254   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000257                ; Setup parameters for call to function osal_strlen
   \   000257   740E         MOV     A,#0xe
   \   000259   12....       LCALL   ?XSTACK_DISP0_8
   \   00025C   AA82         MOV     R2,DPL
   \   00025E   AB83         MOV     R3,DPH
   \   000260   12....       LCALL   ??osal_strlen?relay
   \   000263   EA           MOV     A,R2
   \   000264   2401         ADD     A,#0x1
   \   000266   F5..         MOV     ?V0 + 0,A
   \   000268   E4           CLR     A
   \   000269   3400         ADDC    A,#0x0
   \   00026B   F5..         MOV     ?V0 + 1,A
   \   00026D   78..         MOV     R0,#?V0 + 0
   \   00026F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000272   75..08       MOV     ?V0 + 0,#0x8
   \   000275   75..00       MOV     ?V0 + 1,#0x0
   \   000278   78..         MOV     R0,#?V0 + 0
   \   00027A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00027D   7920         MOV     R1,#0x20
   \   00027F   7C..         MOV     R4,#Double_epDesc & 0xff
   \   000281   7D..         MOV     R5,#(Double_epDesc >> 8) & 0xff
   \   000283   7A..         MOV     R2,#Double_DstAddr & 0xff
   \   000285   7B..         MOV     R3,#(Double_DstAddr >> 8) & 0xff
   \   000287   12....       LCALL   ??AF_DataRequest?relay
   \   00028A   7409         MOV     A,#0x9
   \   00028C   12....       LCALL   ?DEALLOC_XSTACK8
    325          
    326              // Setup to send message again
    327              osal_start_timerEx( Double_TaskID,
    328                                  Double_SEND_MSG_EVT,
    329                                  Double_SEND_MSG_TIMEOUT );
   \   00028F                ; Setup parameters for call to function osal_start_timerEx
   \   00028F   7CE8         MOV     R4,#-0x18
   \   000291   7D03         MOV     R5,#0x3
   \   000293   7A01         MOV     R2,#0x1
   \   000295   7B00         MOV     R3,#0x0
   \   000297   90....       MOV     DPTR,#Double_TaskID
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   F9           MOV     R1,A
   \   00029C   12....       LCALL   ??osal_start_timerEx?relay
    330          
    331              // return unprocessed events
    332              return (events ^ Double_SEND_MSG_EVT);
   \   00029F   E5..         MOV     A,?V0 + 4
   \   0002A1   6401         XRL     A,#0x1
   \   0002A3   FA           MOV     R2,A
   \   0002A4   AB..         MOV     R3,?V0 + 5
   \   0002A6   8004         SJMP    ??Double_ProcessEvent_12
    333            }
    334          
    335            
    336          #if defined( IAR_ARMCM3_LM )
    337            // Receive a message from the RTOS queue
    338            if ( events & Double_RTOS_MSG_EVT )
    339            {
    340              // Process message from RTOS queue
    341              Double_ProcessRtosMessage();
    342          
    343              // return unprocessed events
    344              return (events ^ Double_RTOS_MSG_EVT);
    345            }
    346          #endif
    347          
    348            // Discard unknown events
    349            return 0;
   \                     ??Double_ProcessEvent_13:
   \   0002A8   7A00         MOV     R2,#0x0
   \   0002AA   7B00         MOV     R3,#0x0
   \                     ??Double_ProcessEvent_12:
   \   0002AC   7418         MOV     A,#0x18
   \   0002AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002B1   7F06         MOV     R7,#0x6
   \   0002B3   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0002B6                REQUIRE _A_P1
    350          }
    351          
    352          /*********************************************************************
    353           * Event Generation Functions
    354           */
    355          
    356          /*********************************************************************
    357           * @fn      Double_ProcessZDOMsgs()
    358           *
    359           * @brief   Process response messages
    360           *
    361           * @param   none
    362           *
    363           * @return  none
    364           */
    365          static void Double_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    366          {
    367            switch ( inMsg->clusterID )
    368            {
    369              case End_Device_Bind_rsp:
    370                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    371                {
    372                  // Double LED
    373                  //HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    374                }
    375          #if defined( BLINK_LEDS )
    376                else
    377                {
    378                  // Flash LED to show failure
    379                  //HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
    380                }
    381          #endif
    382                break;
    383          
    384              case Match_Desc_rsp:
    385                {
    386                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    387                  if ( pRsp )
    388                  {
    389                    if ( pRsp->status == ZSuccess && pRsp->cnt )
    390                    {
    391                      Double_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    392                      Double_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    393                      // Take the first endpoint, Can be changed to search through endpoints
    394                      Double_DstAddr.endPoint = pRsp->epList[0];
    395          
    396                      // Double LED
    397                      //HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    398                    }
    399                    osal_mem_free( pRsp );
    400                  }
    401                }
    402                break;
    403            }
    404          }
    405          
    406          /*********************************************************************
    407           * @fn      Double_HandleKeys
    408           *
    409           * @brief   Handles all key events for this device.
    410           *
    411           * @param   shift - true if in shift/alt.
    412           * @param   keys - bit field for key events. Valid entries:
    413           *                 HAL_KEY_SW_4
    414           *                 HAL_KEY_SW_3
    415           *                 HAL_KEY_SW_2
    416           *                 HAL_KEY_SW_1
    417           *
    418           * @return  none
    419           */
    420          static void Double_HandleKeys( uint8 shift, uint8 keys )
    421          {
    422            zAddrType_t dstAddr;
    423          
    424            // Shift is used to make each button/switch dual purpose.
    425            if ( shift )
    426            {
    427              if ( keys & HAL_KEY_SW_1 )
    428              {
    429              }
    430              if ( keys & HAL_KEY_SW_2 )
    431              {
    432              }
    433              if ( keys & HAL_KEY_SW_3 )
    434              {
    435              }
    436              if ( keys & HAL_KEY_SW_4 )
    437              {
    438              }
    439            }
    440            else
    441            {
    442              if ( keys & HAL_KEY_SW_1 )
    443              {
    444                // Since SW1 isn't used for anything else in this application...
    445          #if defined( SWITCH1_BIND )
    446                // we can use SW1 to simulate SW2 for devices that only have one switch,
    447                keys |= HAL_KEY_SW_2;
    448          #elif defined( SWITCH1_MATCH )
    449                // or use SW1 to simulate SW4 for devices that only have one switch
    450                keys |= HAL_KEY_SW_4;
    451          #endif
    452              }
    453          
    454              if ( keys & HAL_KEY_SW_2 )
    455              {
    456                //HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    457          
    458                // Initiate an End Device Bind Request for the mandatory endpoint
    459                dstAddr.addrMode = Addr16Bit;
    460                dstAddr.addr.shortAddr = 0x0000; // Coordinator
    461                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    462                                      Double_epDesc.endPoint,
    463                                      Double_PROFID,
    464                                      Double_MAX_CLUSTERS, (cId_t *)Double_ClusterList,
    465                                      Double_MAX_CLUSTERS, (cId_t *)Double_ClusterList,
    466                                      FALSE );
    467              }
    468          
    469              if ( keys & HAL_KEY_SW_3 )
    470              {
    471              }
    472          
    473              if ( keys & HAL_KEY_SW_4 )
    474              {
    475                //HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    476                // Initiate a Match Description Request (Service Discovery)
    477                dstAddr.addrMode = AddrBroadcast;
    478                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    479                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    480                                  Double_PROFID,
    481                                  Double_MAX_CLUSTERS, (cId_t *)Double_ClusterList,
    482                                  Double_MAX_CLUSTERS, (cId_t *)Double_ClusterList,
    483                                  FALSE );
    484              }
    485            }
    486          }
    487          
    488          /*********************************************************************
    489           * LOCAL FUNCTIONS
    490           */
    491          
    492          /*********************************************************************
    493           * @fn      Double_MessageMSGCB
    494           *
    495           * @brief   Data message processor callback.  This function processes
    496           *          any incoming data - probably from other devices.  So, based
    497           *          on cluster ID, perform the intended action.
    498           *
    499           * @param   none
    500           *
    501           * @return  none
    502           */
    503          static void Double_MessageMSGCB( afIncomingMSGPacket_t *pkt )
    504          {
    505            switch ( pkt->clusterId )
    506            {
    507              case Double_CLUSTERID:
    508              P1_0=~P1_0;
    509          #if defined( LCD_SUPPORTED )
    510                HalLcdWriteScreen( (char*)pkt->cmd.Data, "rcvd" );
    511          #elif defined( WIN32 )
    512                WPRINTSTR( pkt->cmd.Data );
    513          #endif
    514                break;
    515            }
    516          }
    517          
    518          /*********************************************************************
    519           * @fn      Double_SendTheMessage
    520           *
    521           * @brief   Send "the" message.
    522           *
    523           * @param   none
    524           *
    525           * @return  none
    526           */
    527          static void Double_SendTheMessage( void )
    528          {
    529            unsigned char theMessageData[15] = "Double:";
    530            
    531            _ltoa( (uint32)(fDouble), &theMessageData[6], 10 );
    532            
    533            for (unsigned char i=0; i<15-1; i++)
    534            {
    535              if (theMessageData[i] == 0x00 )
    536              {
    537                theMessageData[i] = ' ';
    538              }
    539            }
    540          
    541            if ( AF_DataRequest( &Double_DstAddr, &Double_epDesc,
    542                                 Double_CLUSTERID,
    543                                 (byte)osal_strlen( theMessageData ) + 1,
                                                           ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    544                                 (byte *)&theMessageData,
    545                                 &Double_TransID,
    546                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    547            {
    548              // Successfully requested to be sent.
    549            }
    550            else
    551            {
    552              // Error occurred in request to send.
    553            }
    554          }
    555          
    556          #if defined( IAR_ARMCM3_LM )
    557          /*********************************************************************
    558           * @fn      Double_ProcessRtosMessage
    559           *
    560           * @brief   Receive message from RTOS queue, send response back.
    561           *
    562           * @param   none
    563           *
    564           * @return  none
    565           */
    566          static void Double_ProcessRtosMessage( void )
    567          {
    568            osalQueue_t inMsg;
    569          
    570            if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
    571            {
    572              uint8 cmndId = inMsg.cmnd;
    573              uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
    574          
    575              switch ( cmndId )
    576              {
    577                case CMD_INCR:
    578                  counter += 1;  /* Increment the incoming counter */
    579                                 /* Intentionally fall through next case */
    580          
    581                case CMD_ECHO:
    582                {
    583                  userQueue_t outMsg;
    584          
    585                  outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
    586                  osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
    587                  osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
    588                  break;
    589                }
    590                
    591                default:
    592                  break;  /* Ignore unknown command */    
    593              }
    594            }
    595          }
    596          
    597          #endif
    598          
    599          //***********************************************************************************
    600          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          uint16 DoubleMeasurement_ProcessEvent( uint8 task_id, uint16 events )
   \                     DoubleMeasurement_ProcessEvent:
    602          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    603            if ( events & DOUBLEMEASUREMENT_EVT )
   \   000009   EE           MOV     A,R6
   \   00000A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000C   5018         JNC     ??DoubleMeasurement_ProcessEvent_0
    604            {
    605            osal_start_timerEx( DoubleMeasurement_TaskID,
    606                                  DOUBLEMEASUREMENT_EVT,
    607                                  DOUBLEMEASUREMENT_TIMEOUT );
   \   00000E                ; Setup parameters for call to function osal_start_timerEx
   \   00000E   7CE8         MOV     R4,#-0x18
   \   000010   7D03         MOV     R5,#0x3
   \   000012   7A01         MOV     R2,#0x1
   \   000014   7B00         MOV     R3,#0x0
   \   000016   90....       MOV     DPTR,#DoubleMeasurement_TaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??osal_start_timerEx?relay
    608              
    609              //HalLedSet ( HAL_LED_2, HAL_LED_MODE_TOGGLE );
    610              // return unprocessed events
    611              return (events ^ DOUBLEMEASUREMENT_EVT);
   \   00001E   EE           MOV     A,R6
   \   00001F   6401         XRL     A,#0x1
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   8004         SJMP    ??DoubleMeasurement_ProcessEvent_1
    612            }
    613          
    614            // Discard unknown events
    615            return 0;
   \                     ??DoubleMeasurement_ProcessEvent_0:
   \   000026   7A00         MOV     R2,#0x0
   \   000028   7B00         MOV     R3,#0x0
   \                     ??DoubleMeasurement_ProcessEvent_1:
   \   00002A   02....       LJMP    ?Subroutine0 & 0xFFFF
    616          }
    617          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    618          void DoubleMeasurement_Init( uint8 task_id )
   \                     DoubleMeasurement_Init:
    619          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    620            DoubleMeasurement_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#DoubleMeasurement_TaskID
   \   000009   F0           MOVX    @DPTR,A
    621            DoubleMeasurement_TransID = 0;
   \   00000A   90....       MOV     DPTR,#DoubleMeasurement_TransID
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    622            
    623            osal_start_timerEx( DoubleMeasurement_TaskID,
    624                                  DOUBLEMEASUREMENT_EVT,
    625                                  DOUBLEMEASUREMENT_TIMEOUT );
   \   00000F                ; Setup parameters for call to function osal_start_timerEx
   \   00000F   7CE8         MOV     R4,#-0x18
   \   000011   7D03         MOV     R5,#0x3
   \   000013   7A01         MOV     R2,#0x1
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   ??osal_start_timerEx?relay
    626            
    627            RegisterForKeys( DoubleMeasurement_TaskID );  
   \   000019                ; Setup parameters for call to function RegisterForKeys
   \   000019   90....       MOV     DPTR,#DoubleMeasurement_TaskID
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ??RegisterForKeys?relay
    628          }
   \   000021   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E582         MOV     A,DPL
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   F582         MOV     DPL,A
   \   000006   E583         MOV     A,DPH
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Double_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Double_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Double_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Double_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DoubleMeasurement_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DoubleMeasurement_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DoubleMeasurement_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DoubleMeasurement_Init

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Double">`:
   \   000000   446F7562     DB "Double"
   \            6C6500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "rcvd">`:
   \   000000   72637664     DB "rcvd"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Double:">`:
   \   000000   446F7562     DB "Double:"
   \            6C653A00
   \   000008   00000000     DB 0, 0, 0, 0, 0, 0, 0
   \            000000  
    629          
    630          
    631          /*********************************************************************
    632           */

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     DoubleMeasurement_Init             0      0      9
       -> osal_start_timerEx            0      0     18
       -> RegisterForKeys               0      0     18
     DoubleMeasurement_ProcessEvent     0      0      9
       -> osal_start_timerEx            0      0     18
     Double_Init                        0      0      9
       -> afRegister                    0      0     18
       -> RegisterForKeys               0      0     18
       -> HalLcdWriteString             0      0     18
       -> ZDO_RegisterForZDOMsg         0      0     18
       -> ZDO_RegisterForZDOMsg         0      0     18
     Double_ProcessEvent                2      0     47
       -> osal_msg_receive              0      0     76
       -> osal_msg_deallocate           0      0     76
       -> osal_msg_receive              0      0     76
       -> ZDO_ParseEPListRsp            0      0     76
       -> osal_mem_free                 0      0     76
       -> NLME_GetShortAddr             0      0     76
       -> ZDP_EndDeviceBindReq          0      0     94
       -> ZDP_MatchDescReq              0      0     92
       -> HalLcdWriteScreen             0      0     76
       -> _ltoa                         0      0     80
       -> osal_strlen                   0      0     86
       -> AF_DataRequest                0      0     94
       -> osal_start_timerEx            0      0     76


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     _A_P1                                     1
     Double_ClusterList                        2
     Double_SimpleDesc                        12
     Double_epDesc                             6
     Double_TaskID                             1
     Double_NwkState                           1
     Double_TransID                            1
     Double_DstAddr                           12
     DoubleMeasurement_TaskID                  1
     DoubleMeasurement_NwkState                1
     DoubleMeasurement_TransID                 1
     fDouble                                   4
     Double_Init                             106
     ?Subroutine0                              5
     Double_ProcessEvent                     694
     DoubleMeasurement_ProcessEvent           45
     DoubleMeasurement_Init                   36
     ?Subroutine1                             13
     ??Double_Init?relay                       6
     ??Double_ProcessEvent?relay               6
     ??DoubleMeasurement_ProcessEvent?relay    6
     ??DoubleMeasurement_Init?relay            6
     ?<Constant "Double">                      7
     ?<Constant "rcvd">                        5
     ?<Constant "Double:">                    15

 
 899 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
  41 bytes in segment XDATA_ROM_C
  28 bytes in segment XDATA_Z
 
 923 bytes of CODE  memory
  41 bytes of CONST memory
   0 bytes of DATA  memory (+ 1 byte shared)
  28 bytes of XDATA memory

Errors: none
Warnings: 1
