///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        25/Jul/2015  11:13:26 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3ялнМ\Source\GAS.c                                /
//    Command line       =  -f C:\ZStack-CC2530-2.5.1a\Projects\zstack\Sample /
//                          s\03ялнМ\CC2530DB\..\..\..\Tools\CC2530DB\f8wEnde /
//                          v.cfg (-DCPU32MHZ -DROOT=__near_func              /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f C:\ZStack-CC2530-2.5.1a\Pr /
//                          ojects\zstack\Samples\03ялнМ\CC2530DB\..\..\..\To /
//                          ols\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO           /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00100000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\ZStack-CC2530-2.5.1a\Pr /
//                          ojects\zstack\Samples\03ялнМ\Source\GAS.c -D      /
//                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D           /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC          /
//                          C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3ялнМ\CC2530DB\EndDeviceEB\List\ -lA              /
//                          C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3ялнМ\CC2530DB\EndDeviceEB\List\ --diag_suppress  /
//                          Pe001,Pa010 -o C:\ZStack-CC2530-2.5.1a\Projects\z /
//                          stack\Samples\03ялнМ\CC2530DB\EndDeviceEB\Obj\    /
//                          -e --no_code_motion --debug --core=plain          /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3ялнМ\CC2530DB\ -I C:\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\03ялнМ\CC2530DB\..\Source\ -I   /
//                          C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3ялнМ\CC2530DB\..\..\..\ZMain\TI2530DB\ -I        /
//                          C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3ялнМ\CC2530DB\..\..\..\..\..\Components\hal\incl /
//                          ude\ -I C:\ZStack-CC2530-2.5.1a\Projects\zstack\S /
//                          amples\03ялнМ\CC2530DB\..\..\..\..\..\Components\ /
//                          hal\target\CC2530EB\ -I                           /
//                          C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3ялнМ\CC2530DB\..\..\..\..\..\Components\mac\incl /
//                          ude\ -I C:\ZStack-CC2530-2.5.1a\Projects\zstack\S /
//                          amples\03ялнМ\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\high_level\ -I C:\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\03ялнМ\CC2530DB\..\..\..\..\..\ /
//                          Components\mac\low_level\srf04\ -I                /
//                          C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3ялнМ\CC2530DB\..\..\..\..\..\Components\mac\low_ /
//                          level\srf04\single_chip\ -I                       /
//                          C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3ялнМ\CC2530DB\..\..\..\..\..\Components\mt\ -I   /
//                          C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3ялнМ\CC2530DB\..\..\..\..\..\Components\osal\inc /
//                          lude\ -I C:\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\03ялнМ\CC2530DB\..\..\..\..\..\Components /
//                          \services\saddr\ -I C:\ZStack-CC2530-2.5.1a\Proje /
//                          cts\zstack\Samples\03ялнМ\CC2530DB\..\..\..\..\.. /
//                          \Components\services\sdata\ -I                    /
//                          C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3ялнМ\CC2530DB\..\..\..\..\..\Components\stack\af /
//                          \ -I C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\03ялнМ\CC2530DB\..\..\..\..\..\Components\sta /
//                          ck\nwk\ -I C:\ZStack-CC2530-2.5.1a\Projects\zstac /
//                          k\Samples\03ялнМ\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sapi\ -I C:\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\03ялнМ\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\sec\ -I                           /
//                          C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3ялнМ\CC2530DB\..\..\..\..\..\Components\stack\sy /
//                          s\ -I C:\ZStack-CC2530-2.5.1a\Projects\zstack\Sam /
//                          ples\03ялнМ\CC2530DB\..\..\..\..\..\Components\st /
//                          ack\zdo\ -I C:\ZStack-CC2530-2.5.1a\Projects\zsta /
//                          ck\Samples\03ялнМ\CC2530DB\..\..\..\..\..\Compone /
//                          nts\zmac\ -I C:\ZStack-CC2530-2.5.1a\Projects\zst /
//                          ack\Samples\03ялнМ\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\f8w\ -Ohz                               /
//    List file          =  C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          3ялнМ\CC2530DB\EndDeviceEB\List\GAS.s51           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME GAS

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GAS_Init?relay
        FUNCTION ??GAS_Init?relay,0203H
        PUBLIC ??GAS_ProcessEvent?relay
        FUNCTION ??GAS_ProcessEvent?relay,0203H
        PUBLIC ??GAS_SendTheMessage?relay
        FUNCTION ??GAS_SendTheMessage?relay,0203H
        PUBLIC ??Scan?relay
        FUNCTION ??Scan?relay,0203H
        PUBLIC GAS_ClusterList
        PUBLIC GAS_Init
        FUNCTION GAS_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC GAS_NwkState
        PUBLIC GAS_ProcessEvent
        FUNCTION GAS_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC GAS_SendTheMessage
        FUNCTION GAS_SendTheMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 41, STACK
        PUBLIC GAS_SimpleDesc
        PUBLIC GAS_TaskID
        PUBLIC GAS_TransID
        PUBLIC GAS_epDesc
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBLIC Scan
        FUNCTION Scan,0201H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC TempDATA
        PUBWEAK _A_P1
        PUBLIC flag
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_set_event      SYMBOL "osal_set_event"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
GAS_Init            SYMBOL "GAS_Init"
??GAS_Init?relay    SYMBOL "?relay", GAS_Init
GAS_ProcessEvent    SYMBOL "GAS_ProcessEvent"
??GAS_ProcessEvent?relay SYMBOL "?relay", GAS_ProcessEvent
GAS_SendTheMessage  SYMBOL "GAS_SendTheMessage"
??GAS_SendTheMessage?relay SYMBOL "?relay", GAS_SendTheMessage
Scan                SYMBOL "Scan"
??Scan?relay        SYMBOL "?relay", Scan

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H

// C:\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\03ялнМ\Source\GAS.c
//    1 /******************************************************************************
//    2   Filename:       GAS.c
//    3   Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
//    4   Revision:       $Revision: 29656 $
//    5 
//    6   Description:    Generic Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ⌠AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 ******************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends "Hello World" to another "Generic"
//   45   application every 5 seconds.  The application will also
//   46   receives "Hello World" packets.
//   47 
//   48   The "Hello World" messages are sent/received as MSG type message.
//   49 
//   50   This applications doesn't have a profile, so it handles everything
//   51   directly - itself.
//   52 
//   53   Key control:
//   54     SW1:
//   55     SW2:  initiates end device binding
//   56     SW3:
//   57     SW4:  initiates a match description request
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 #include "OSAL.h"
//   64 #include "AF.h"
//   65 #include "ZDApp.h"
//   66 #include "ZDObject.h"
//   67 #include "ZDProfile.h"
//   68 #include <string.h>
//   69 //#include "Common.h"
//   70 #include "DebugTrace.h"
//   71 #include "GAS.h"
//   72 #include "MT.h"
//   73 
//   74 #if !defined( WIN32 )
//   75   #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   76 #endif
//   77 
//   78 /* HAL */
//   79 #include "hal_lcd.h"
//   80 #include "hal_led.h"
//   81 #include "hal_key.h"
//   82 #include "hal_uart.h"
//   83 #include "mt_uart.h"
//   84 
//   85 /*********************************************************************
//   86  * MACROS
//   87  */
//   88 
//   89 /*********************************************************************
//   90  * CONSTANTS
//   91  */
//   92 
//   93 /*********************************************************************
//   94  * TYPEDEFS
//   95  */
//   96 
//   97 /*********************************************************************
//   98  * GLOBAL VARIABLES
//   99  */
//  100 // This list should be filled with Application specific Cluster IDs.
//  101 #define SEND_DATA_EVENT 0x01

        RSEG XDATA_I:XDATA:NOROOT(0)
//  102 unsigned char flag='0';
flag:
        DATA8
        DS 1
        REQUIRE `?<Initializer for flag>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  103 const cId_t GAS_ClusterList[GAS_MAX_CLUSTERS] =
GAS_ClusterList:
        DW 2
//  104 {
//  105   GAS_CLUSTERID
//  106 };
//  107 
//  108 
//  109 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  110 const SimpleDescriptionFormat_t GAS_SimpleDesc =
GAS_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 0
        DATA16
        DW 0H
        DATA8
        DB 1
        DATA16
        DW GAS_ClusterList
//  111 {
//  112   GAS_ENDPOINT,              //  int Endpoint;
//  113   GAS_PROFID,                //  uint16 AppProfId[2];
//  114   GAS_DEVICEID,              //  uint16 AppDeviceId[2];
//  115   GAS_DEVICE_VERSION,        //  int   AppDevVer:4;
//  116   GAS_FLAGS,                 //  int   AppFlags:4;
//  117   
//  118   
//  119   0,          //  byte  AppNumInClusters;
//  120   (cId_t *)NULL,  //  byte *pAppInClusterList;
//  121   GAS_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  122   (cId_t *)GAS_ClusterList   //  byte *pAppInClusterList;
//  123 };
//  124 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  125 unsigned char TempDATA;
TempDATA:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  126 endPointDesc_t GAS_epDesc;
GAS_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  127 byte GAS_TaskID;
GAS_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  128 byte GAS_TransID;
GAS_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  129 devStates_t GAS_NwkState;
GAS_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  130 void GAS_MessageMSGCB(afIncomingMSGPacket_t *MSGpkt);
//  131 void GAS_SendTheMessage(void);
//  132 
//  133 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  134 void Scan()
Scan:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Scan
        CODE
//  135 {
        ; Saved register size: 0
        ; Auto size: 0
//  136   P1SEL &= ~0x08;
        ANL     0xf4,#0xf7
//  137   P1DIR &= ~0x08;
        ANL     0xfe,#0xf7
//  138 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE P1SEL
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  139 void GAS_Init( byte task_id )
GAS_Init:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function GAS_Init
        CODE
//  140 {
        FUNCALL GAS_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  141   halUARTCfg_t uartConfig;//╢╝©з
//  142     
//  143   GAS_TaskID = task_id;
        MOV     DPTR,#GAS_TaskID
        MOVX    @DPTR,A
//  144   GAS_NwkState=DEV_INIT;
        MOV     DPTR,#GAS_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  145   GAS_TransID = 0;
        MOV     DPTR,#GAS_TransID
        CLR     A
        MOVX    @DPTR,A
//  146 
//  147   
//  148   GAS_epDesc.endPoint = GAS_ENDPOINT;
        MOV     DPTR,#GAS_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  149   GAS_epDesc.task_id = &GAS_TaskID;
        INC     DPTR
        MOV     A,#GAS_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GAS_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  150   GAS_epDesc.simpleDesc
//  151             = (SimpleDescriptionFormat_t *)&GAS_SimpleDesc;
        INC     DPTR
        MOV     A,#GAS_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GAS_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  152   
//  153   GAS_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  154   afRegister( &GAS_epDesc ); 
        ; Setup parameters for call to function afRegister
        MOV     R2,#GAS_epDesc & 0xff
        MOV     R3,#(GAS_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  155   P1DIR &= ~(1<<3);
        ANL     0xfe,#0xf7
//  156 
//  157 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
        REQUIRE P1DIR
//  158 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  159 UINT16 GAS_ProcessEvent( byte task_id, UINT16 events )
GAS_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function GAS_ProcessEvent
        CODE
//  160 {
        FUNCALL GAS_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GAS_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GAS_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GAS_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GAS_ProcessEvent, Scan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GAS_ProcessEvent, GAS_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GAS_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  161   afIncomingMSGPacket_t *MSGpkt;
//  162 
//  163   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??GAS_ProcessEvent_0
//  164   {
//  165     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GAS_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??GAS_ProcessEvent_1
//  166     while ( MSGpkt )
//  167     {
//  168       switch ( MSGpkt->hdr.event )
??GAS_ProcessEvent_2:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,#0xd1
        JNZ     ??GAS_ProcessEvent_3
//  169       {
//  170        
//  171           case ZDO_STATE_CHANGE:
//  172             GAS_NwkState = (devStates_t)(MSGpkt->hdr.status);
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GAS_NwkState
        MOVX    @DPTR,A
//  173             if(GAS_NwkState==DEV_END_DEVICE)
        XRL     A,#0x6
        JNZ     ??GAS_ProcessEvent_3
//  174             {
//  175               P1_0=~P1_0;
        SETB    B.0
        MOV     C,0x90.0
        JNB     B.0,??GAS_ProcessEvent_4
        CPL     C
??GAS_ProcessEvent_4:
        MOV     0x90.0,C
//  176               osal_set_event(GAS_TaskID,SEND_DATA_EVENT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GAS_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  177             }
//  178             break;
//  179             
//  180           default:
//  181             break;
//  182       }
//  183       osal_msg_deallocate( (uint8 *)MSGpkt );
??GAS_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  184       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GAS_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??GAS_ProcessEvent_1:
        MOV     DPTR,#GAS_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  185     }
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??GAS_ProcessEvent_2
//  186     // return unprocessed events
//  187     return (events ^ SYS_EVENT_MSG);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??GAS_ProcessEvent_5:
        MOV     R3,A
        SJMP    ??GAS_ProcessEvent_6
//  188   }
//  189   if(events&SEND_DATA_EVENT)
??GAS_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??GAS_ProcessEvent_7
//  190   {
//  191     Scan();
        ; Setup parameters for call to function Scan
        LCALL   ??Scan?relay
//  192     GAS_SendTheMessage();
        ; Setup parameters for call to function GAS_SendTheMessage
        LCALL   ??GAS_SendTheMessage?relay
//  193     osal_start_timerEx(GAS_TaskID,SEND_DATA_EVENT,3000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x48
        MOV     R5,#0xb
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GAS_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  194     return(events^SEND_DATA_EVENT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??GAS_ProcessEvent_5
//  195   }
//  196   return 0;
??GAS_ProcessEvent_7:
        MOV     R2,#0x0
        MOV     R3,#0x0
??GAS_ProcessEvent_6:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
        REQUIRE _A_P1
//  197 }
//  198 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  199 void GAS_SendTheMessage(void)
GAS_SendTheMessage:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function GAS_SendTheMessage
        CODE
//  200 { 
        FUNCALL GAS_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  201   unsigned char theMessageData[10]="EndDevice";
        MOV     DPTR,#`?<Constant "EndDevice">`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "EndDevice">` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  202 
//  203   afAddrType_t my_DstAddr;
//  204 
//  205   my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  206   my_DstAddr.endPoint=GAS_ENDPOINT;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  207   my_DstAddr.addr.shortAddr=0x0000; 
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  208 
//  209 
//  210   P1DIR &= ~(1<<3);
        ANL     0xfe,#0xf7
//  211   
//  212   if(GASIN == 1)
        MOV     C,0x90.3
        MOV     A,#0xc
        JNC     ??GAS_SendTheMessage_0
//  213   {
//  214     theMessageData[0] = 'N';
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4e
        SJMP    ??GAS_SendTheMessage_1
//  215   } else {
//  216     theMessageData[0] = 'Y';
??GAS_SendTheMessage_0:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x59
??GAS_SendTheMessage_1:
        MOVX    @DPTR,A
//  217   }
//  218 
//  219   AF_DataRequest(&my_DstAddr
//  220   ,&GAS_epDesc
//  221   ,GAS_CLUSTERID
//  222   ,1
//  223   ,theMessageData
//  224   ,&GAS_TransID
//  225   ,AF_DISCV_ROUTE
//  226   ,AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,#GAS_TransID & 0xff
        MOV     ?V0 + 1,#(GAS_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R1,#0x20
        MOV     R4,#GAS_epDesc & 0xff
        MOV     R5,#(GAS_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 32)
//  227 }
        MOV     A,#0x16
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
        REQUIRE P1DIR
        REQUIRE _A_P1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for flag>`:
        DATA8
        DB 48

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Scan?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Scan

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GAS_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GAS_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GAS_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GAS_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GAS_SendTheMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GAS_SendTheMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EndDevice">`:
        DB "EndDevice"

        END
//  228 
// 
// 373 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//   3 bytes in segment SFR_AN
//   1 byte  in segment XDATA_I
//   1 byte  in segment XDATA_ID
//  24 bytes in segment XDATA_ROM_C
//  10 bytes in segment XDATA_Z
// 
// 398 bytes of CODE  memory
//  24 bytes of CONST memory
//   0 bytes of DATA  memory (+ 3 bytes shared)
//  11 bytes of XDATA memory
//
//Errors: none
//Warnings: none
