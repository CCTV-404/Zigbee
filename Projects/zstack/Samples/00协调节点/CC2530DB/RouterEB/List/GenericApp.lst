###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             06/Dec/2016  22:10:24 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\Source\G #
#                          enericApp.c                                        #
#    Command line       =  -f E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC253 #
#                          0DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg          #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg             #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00100000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 E:\Lib\micro-electromechani #
#                          cal\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\00Ð­µ÷½Úµã\Source\GenericApp.c -D ZTOOL_P1 -D  #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC E:\Lib\micro-electromechan #
#                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\00Ð­µ÷½Úµã\CC2530DB\RouterEB\List\ -lA        #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \RouterEB\List\ --diag_suppress Pe001,Pa010 -o     #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \RouterEB\Obj\ -e --no_code_motion --debug         #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\Lib\micro-electromechan #
#                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\00Ð­µ÷½Úµã\CC2530DB\ -I                       #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\Source\ -I E:\Lib\micro-electromechanical\Ê±ÑÓ #
#                          \ZStack-CC2530-2.5.1a\Projects\zstack\Samples\00Ð­ #
#                          µ÷½Úµã\CC2530DB\..\..\..\ZMain\TI2530DB\ -I        #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\hal\include\ -I         #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\hal\target\CC2530EB\    #
#                          -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\include\ -I      #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\mac\high_level\ -I      #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\mac\low_level\srf04\    #
#                          -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\low_level\srf04\ #
#                          single_chip\ -I E:\Lib\micro-electromechanical\Ê±Ñ #
#                          Ó\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\00Ð #
#                          ­µ÷½Úµã\CC2530DB\..\..\..\..\..\Components\mt\ -I  #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\osal\include\ -I        #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\services\saddr\ -I      #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\services\sdata\ -I      #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\stack\af\ -I            #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\stack\nwk\ -I           #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\stack\sapi\ -I          #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\stack\sec\ -I           #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\stack\sys\ -I           #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\stack\zdo\ -I           #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\zmac\ -I                #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\zmac\f8w\ -Ohz          #
#    List file          =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \RouterEB\List\GenericApp.lst                      #
#    Object file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \RouterEB\Obj\GenericApp.r51                       #
#                                                                             #
#                                                                             #
###############################################################################

E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\Source\GenericApp.c
      1          /******************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
      4            Revision:       $Revision: 29656 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends "Hello World" to another "Generic"
     45            application every 5 seconds.  The application will also
     46            receives "Hello World" packets.
     47          
     48            The "Hello World" messages are sent/received as MSG type message.
     49          
     50            This applications doesn't have a profile, so it handles everything
     51            directly - itself.
     52          
     53            Key control:
     54              SW1:
     55              SW2:  initiates end device binding
     56              SW3:
     57              SW4:  initiates a match description request
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include "OSAL.h"
     64          #include "AF.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          
     69          #include "GenericApp.h"
     70          #include "DebugTrace.h"
     71          
     72          #if !defined( WIN32 )
     73            #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     74          #endif
     75           
     76          #include "hal_uart.h"
     77          /* HAL */
     78          #include "hal_lcd.h"
     79          #include "hal_led.h"
     80          #include "hal_key.h"
     81          #include "hal_uart.h"
     82          
     83          /* RTOS */
     84          #if defined( IAR_ARMCM3_LM )
     85          #include "RTOS_App.h"
     86          #endif  
     87          
     88          #include<string.h>
     89          #include "MT_UART.h"
     90          /*********************************************************************
     91           * MACROS
     92           */
     93          
     94          /*********************************************************************
     95           * CONSTANTS
     96           */
     97          
     98          /*********************************************************************
     99           * TYPEDEFS
    100           */
    101          
    102          /*********************************************************************
    103           * GLOBAL VARIABLES
    104           */
    105          #define ADC_REF_AVDD5 0x80
    106          #define ADC_REF_125_V 0x00
    107          #define ADC_14_BIT 0x30
    108          #define ADC_AIN1_SENS 0x07
    109          #define ADC_TEMP_SENS 0x0E

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110           devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    111          char temp1='a';
   \                     temp1:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for temp1>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    112          char temp2='a';
   \                     temp2:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for temp2>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    113          char temp3 = 'a';
   \                     temp3:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for temp3>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    114          char temp4 = 'a';
   \                     temp4:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for temp4>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    115          char temp5 = 'a';
   \                     temp5:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for temp5>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          int flag1 = 0;
   \                     flag1:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          int flag2 = 0;
   \                     flag2:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    118          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    119          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0700         DW 7
   \   000004   0600         DW 6
   \   000006   0800         DW 8
   \   000008   0500         DW 5
   \   00000A   0400         DW 4
   \   00000C   0200         DW 2
   \   00000E   0000         DW 0
    120          {
    121            GENERICAPP_CLUSTERID_TEMHUM,
    122            GENERICAPP_CLUSTERID_LINGHT,
    123            GENERICAPP_CLUSTERID_SOUND,
    124            GENERICAPP_CLUSTERID_POSTURE,
    125            GENERICAPP_CLUSTERID_DISTANCE,
    126            GENERICAPP_CLUSTERID_GPS,
    127            GENERICAPP_CLUSTERID_GAS
    128          };
    129          

   \                                 In  segment XDATA_ROM_C, align 1
    130          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   08           DB 8
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   00           DB 0
   \   00000A   0000         DW 0H
    131          {
    132            GENERICAPP_ENDPOINT,              //  int Endpoint;
    133            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    134            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    135            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    136            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    137            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    138            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    139            0,          //  byte  AppNumInClusters;
    140            (cId_t *)NULL   //  byte *pAppInClusterList;
    141          };
    142          
    143          // This is the Endpoint/Interface description.  It is defined here, but
    144          // filled-in in GenericApp_Init().  Another way to go would be to fill
    145          // in the structure here and make it a "const" (in code space).  The
    146          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          byte GenericApp_TaskID;
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          byte GenericApp_TransID;
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    150          void GenericApp_MessageMSGCB(afIncomingMSGPacket_t *pkt);
    151          void GenericApp_SendTheMessage(unsigned char *theMessageData);
    152          
    153          //uint8 * GetShortAddr(void);
    154          uint8 hextoword1(uint8 t);
    155          uint8 hextoword2(uint8 t);
    156          void GenericApp_SPI(void);
    157          void GenericApp_UART1(afIncomingMSGPacket_t *pkt);
    158          
    159          #if defined( IAR_ARMCM3_LM )
    160          //static void GenericApp_ProcessRtosMessage( void );
    161          #endif
    162          
    163          /*********************************************************************
    164           * NETWORK LAYER CALLBACKS
    165           */
    166          
    167          /*********************************************************************
    168           * PUBLIC FUNCTIONS
    169           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          unsigned int  AdcValue;
   \                     AdcValue:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          unsigned int  value;
   \                     value:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          unsigned int ADCValue;
   \                     ADCValue:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          unsigned char ADCV[]="";
   \                     ADCV:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    174          void Delays(void) {
   \                     Delays:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    175            unsigned int itemp;
    176            for(itemp=0;itemp<500;itemp++) {
   \   000000   78F4         MOV     R0,#-0xc
   \   000002   7901         MOV     R1,#0x1
    177              asm("nop");
   \                     ??Delays_0:
   \   000004   00           nop
    178            }
   \   000005   E8           MOV     A,R0
   \   000006   24FF         ADD     A,#-0x1
   \   000008   18           DEC     R0
   \   000009   E9           MOV     A,R1
   \   00000A   34FF         ADDC    A,#-0x1
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   70F3         JNZ     ??Delays_0
    179          }
   \   000011   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void initUARTSEND(void)
   \                     initUARTSEND:
    181          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    182          
    183             /* CLKCONCMD &= ~0x40;                          //ÉèÖÃÏµÍ³Ê±ÖÓÔ´Îª32MHZ¾§Õñ
    184              while(CLKCONSTA & 0x40);                     //µÈ´ý¾§ÕñÎÈ¶¨
    185              CLKCONCMD &= ~0x47;                          //ÉèÖÃÏµÍ³Ö÷Ê±ÖÓÆµÂÊÎª32MHZ
    186             
    187            
    188              //PERCFG  Peripheral-control register
    189              PERCFG = 0x00;				//Î»ÖÃ1 P0¿Ú
    190              //POSEL Port0 function-select register
    191              P0SEL = 0x3c;				//P0_2,P0_3,P0_4,P0_5ÓÃ×÷´®¿Ú
    192              P2DIR &= ~0X80;                             //P0ÓÅÏÈ×÷ÎªUART1
    193          
    194              U1CSR |= 0x80;				//UART·½Ê½
    195              U1GCR |= 8;				       
    196              U1BAUD |= 59;				//²¨ÌØÂÊÉèÎª9600
    197              UTX1IF = 0;                                 //UART1 TXÖÐ¶Ï±êÖ¾³õÊ¼ÖÃÎ»0
    198          */
    199          
    200              //SLEEPCMD&= ~0X04;
    201             // CLKCONCMD = 0X10;                           //Ñ¡Ôñ32KHz¾§ÌåÕñµ´Æ÷,32MHz¾§ÌåÕñµ´Æ÷,¶¨Ê±Æ÷tickÊä³ö8MHz
    202             // while(CLKCONSTA!=0X10);                    //¾§ÕñÊÇ·ñÎÈ¶¨
    203             // SLEEPCMD = 0X04;    
    204          
    205              CLKCONCMD &= ~0x40;                          //ÉèÖÃÏµÍ³Ê±ÖÓÔ´Îª32MHZ¾§Õñ
   \   000000   53C6BF       ANL     0xc6,#0xbf
    206              while(CLKCONSTA & 0x40);                     //µÈ´ý¾§ÕñÎÈ¶¨
   \                     ??initUARTSEND_0:
   \   000003   E59E         MOV     A,0x9e
   \   000005   A2E6         MOV     C,0xE0 /* A   */.6
   \   000007   40FA         JC      ??initUARTSEND_0
    207              CLKCONCMD &= ~0x47; 
   \   000009   53C6B8       ANL     0xc6,#0xb8
    208              
    209              PERCFG = 0x00;				//Î»ÖÃ1 P0¿Ú
   \   00000C   75F100       MOV     0xf1,#0x0
    210              P0SEL = 0x3c;				//P0ÓÃ×÷´®¿Ú
   \   00000F   75F33C       MOV     0xf3,#0x3c
    211              //P2DIR &= ~0XC0;                             //P0ÓÅÏÈ×÷Îª´®¿Ú0
    212          
    213              U0CSR |= 0x80;				//UART·½Ê½
   \   000012   438680       ORL     0x86,#0x80
    214              U0GCR |= 8;				        //baud_e
   \   000015   43C508       ORL     0xc5,#0x8
    215              U0BAUD |= 59;				//²¨ÌØÂÊÉèÎª9600
   \   000018   43C23B       ORL     0xc2,#0x3b
    216              UTX0IF = 0;                                 //UART1 TXÖÐ¶Ï±êÖ¾³õÊ¼ÖÃÎ»0
   \   00001B   C2E9         CLR     0xe8.1
    217          
    218          
    219          }
   \   00001D   02....       LJMP    ?BRET
   \   000020                REQUIRE CLKCONCMD
   \   000020                REQUIRE CLKCONSTA
   \   000020                REQUIRE PERCFG
   \   000020                REQUIRE P0SEL
   \   000020                REQUIRE U0CSR
   \   000020                REQUIRE U0GCR
   \   000020                REQUIRE U0BAUD
   \   000020                REQUIRE _A_IRCON2
    220          
    221          
    222          /*static void rxCB(uint8 port,uint8 event)
    223          {
    224          unsigned  char LED[4];
    225          unsigned char len;
    226          
    227            len = HalUARTRead(1, LED, 2);
    228            if(!len)
    229              return;
    230           
    231            if((LED[0] - '1') == 0x00)
    232            {
    233              P1_0=~P1_0;
    234              GenericApp_SendTheMessage(LED);
    235            }   
    236            if((LED[0] - '2') == 0x00)
    237            {
    238              P1_0=~P1_0;
    239              GenericApp_SendTheMessage(LED);
    240            }    
    241          }*/
    242          /*********************************************************************
    243           * @fn      GenericApp_Init
    244           *
    245           * @brief   Initialization function for the Generic App Task.
    246           *          This is called during initialization and should contain
    247           *          any application specific initialization (ie. hardware
    248           *          initialization/setup, table initialization, power up
    249           *          notificaiton ... ).
    250           *
    251           * @param   task_id - the ID assigned by OSAL.  This ID should be
    252           *                    used to send messages and set timers.
    253           *
    254           * @return  none
    255           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    256          void GenericApp_Init( byte task_id )
   \                     GenericApp_Init:
    257          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    258            halUARTCfg_t uartConfig;
    259            GenericApp_TaskID = task_id;
   \   00000C   90....       MOV     DPTR,#GenericApp_TaskID
   \   00000F   F0           MOVX    @DPTR,A
    260            GenericApp_NwkState = DEV_INIT;
   \   000010   90....       MOV     DPTR,#GenericApp_NwkState
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    261            GenericApp_TransID = 0;   
   \   000016   90....       MOV     DPTR,#GenericApp_TransID
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
    262            //MT_UartInit();
    263            initUARTSEND();
   \   00001B                ; Setup parameters for call to function initUARTSEND
   \   00001B   12....       LCALL   ??initUARTSEND?relay
    264            
    265            //HalUARTWrite(1,"Hello World\n",12);
    266          
    267            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   00001E   90....       MOV     DPTR,#GenericApp_epDesc
   \   000021   740A         MOV     A,#0xa
   \   000023   F0           MOVX    @DPTR,A
    268            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   000024   A3           INC     DPTR
   \   000025   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   00002B   F0           MOVX    @DPTR,A
    269            GenericApp_epDesc.simpleDesc
    270                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   00002C   A3           INC     DPTR
   \   00002D   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   000033   F0           MOVX    @DPTR,A
    271            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   000034   A3           INC     DPTR
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
    272            
    273            
    274            afRegister( &GenericApp_epDesc );
   \   000037                ; Setup parameters for call to function afRegister
   \   000037   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000039   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   00003B   12....       LCALL   ??afRegister?relay
    275            RegisterForKeys( GenericApp_TaskID );
   \   00003E                ; Setup parameters for call to function RegisterForKeys
   \   00003E   90....       MOV     DPTR,#GenericApp_TaskID
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   12....       LCALL   ??RegisterForKeys?relay
    276            MT_UartRegisterTaskID(task_id);
   \   000046                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000046   EE           MOV     A,R6
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   ??MT_UartRegisterTaskID?relay
    277            
    278            uartConfig.configured = TRUE;
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   7401         MOV     A,#0x1
   \   000053   F0           MOVX    @DPTR,A
    279            uartConfig.baudRate = HAL_UART_BR_9600;
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   E4           CLR     A
   \   000058   F0           MOVX    @DPTR,A
    280            uartConfig.flowControl = FALSE;
   \   000059   7402         MOV     A,#0x2
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   E4           CLR     A
   \   00005F   F0           MOVX    @DPTR,A
    281            uartConfig.callBackFunc = NULL;
   \   000060   741B         MOV     A,#0x1b
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   E4           CLR     A
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   12....       LCALL   ?Subroutine3 & 0xFFFF
    282            HalUARTOpen(0,&uartConfig);
   \                     ??CrossCallReturnLabel_2:
   \   00006B   AA82         MOV     R2,DPL
   \   00006D   AB83         MOV     R3,DPH
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   ??HalUARTOpen?relay
    283          }
   \   000073   741D         MOV     A,#0x1d
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   7F01         MOV     R7,#0x1
   \   00007A   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    284          
    285          /*********************************************************************
    286           * @fn      GenericApp_ProcessEvent
    287           *
    288           * @brief   Generic Application Task event processor.  This function
    289           *          is called to process all events for the task.  Events
    290           *          include timers, messages and any other user defined events.
    291           *
    292           * @param   task_id  - The OSAL assigned task ID.
    293           * @param   events - events to process.  This is a bit map and can
    294           *                   contain more than one event.
    295           *
    296           * @return  none
    297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    298          UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
   \                     GenericApp_ProcessEvent:
    299          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    300            afIncomingMSGPacket_t *MSGpkt;
    301          
    302            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   6072         JZ      ??GenericApp_ProcessEvent_0
    303            {
    304              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   800E         SJMP    ??GenericApp_ProcessEvent_1
    305              while ( MSGpkt )
    306              {
    307                switch ( MSGpkt->hdr.event )
    308                {
    309                  case AF_INCOMING_MSG_CMD:
    310                    GenericApp_MessageMSGCB(MSGpkt);
    311                    break;
    312                  
    313                  case ZDO_STATE_CHANGE:
    314                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    315                    if ( (GenericApp_NwkState == DEV_ZB_COORD)
    316                        || (GenericApp_NwkState == DEV_ROUTER)
    317                        || (GenericApp_NwkState == DEV_END_DEVICE) )
    318                    {
    319                      GenericApp_SPI();
    320                      // Start sending "the" message in a regular interval.
    321                      osal_start_timerEx( GenericApp_TaskID,
    322                                          GENERICAPP_SEND_MSG_EVT,
    323                                          1000 );
    324                    }
    325                    break;
    326                    
    327                  case SPI_INCOMING_ZAPP_DATA:
    328                    
    329                    GenericApp_UART1(MSGpkt);
   \                     ??GenericApp_ProcessEvent_2:
   \   000010                ; Setup parameters for call to function GenericApp_UART1
   \   000010   EE           MOV     A,R6
   \   000011   FA           MOV     R2,A
   \   000012   EF           MOV     A,R7
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??GenericApp_UART1?relay
    330                    break;
    331                    default:
    332                    break;
    333                }
    334                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_3:
   \   000017                ; Setup parameters for call to function osal_msg_deallocate
   \   000017   EE           MOV     A,R6
   \   000018   FA           MOV     R2,A
   \   000019   EF           MOV     A,R7
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   ??osal_msg_deallocate?relay
    335                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00001E                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   00001E   90....       MOV     DPTR,#GenericApp_TaskID
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F9           MOV     R1,A
   \   000023   12....       LCALL   ??osal_msg_receive?relay
   \   000026   8A..         MOV     ?V0 + 2,R2
   \   000028   8B..         MOV     ?V0 + 3,R3
   \   00002A   AE..         MOV     R6,?V0 + 2
   \   00002C   AF..         MOV     R7,?V0 + 3
   \   00002E   EE           MOV     A,R6
   \   00002F   4F           ORL     A,R7
   \   000030   6045         JZ      ??GenericApp_ProcessEvent_4
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   E0           MOVX    A,@DPTR
   \   000037   24E6         ADD     A,#-0x1a
   \   000039   600A         JZ      ??GenericApp_ProcessEvent_5
   \   00003B   24F8         ADD     A,#-0x8
   \   00003D   60D1         JZ      ??GenericApp_ProcessEvent_2
   \   00003F   2451         ADD     A,#0x51
   \   000041   600B         JZ      ??GenericApp_ProcessEvent_6
   \   000043   80D2         SJMP    ??GenericApp_ProcessEvent_3
   \                     ??GenericApp_ProcessEvent_5:
   \   000045                ; Setup parameters for call to function GenericApp_MessageMSGCB
   \   000045   EE           MOV     A,R6
   \   000046   FA           MOV     R2,A
   \   000047   EF           MOV     A,R7
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   ??GenericApp_MessageMSGCB?relay
   \   00004C   80C9         SJMP    ??GenericApp_ProcessEvent_3
   \                     ??GenericApp_ProcessEvent_6:
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   90....       MOV     DPTR,#GenericApp_NwkState
   \   000053   F0           MOVX    @DPTR,A
   \   000054   6409         XRL     A,#0x9
   \   000056   600A         JZ      ??GenericApp_ProcessEvent_7
   \   000058   E0           MOVX    A,@DPTR
   \   000059   6407         XRL     A,#0x7
   \   00005B   6005         JZ      ??GenericApp_ProcessEvent_7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   6406         XRL     A,#0x6
   \   000060   70B5         JNZ     ??GenericApp_ProcessEvent_3
   \                     ??GenericApp_ProcessEvent_7:
   \   000062                ; Setup parameters for call to function GenericApp_SPI
   \   000062   12....       LCALL   ??GenericApp_SPI?relay
   \   000065                ; Setup parameters for call to function osal_start_timerEx
   \   000065   7CE8         MOV     R4,#-0x18
   \   000067   7D03         MOV     R5,#0x3
   \   000069   7A01         MOV     R2,#0x1
   \   00006B   7B00         MOV     R3,#0x0
   \   00006D   90....       MOV     DPTR,#GenericApp_TaskID
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   12....       LCALL   ??osal_start_timerEx?relay
   \   000075   80A0         SJMP    ??GenericApp_ProcessEvent_3
    336              }
    337          
    338              // return unprocessed events
    339              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_4:
   \   000077   AA..         MOV     R2,?V0 + 0
   \   000079   E5..         MOV     A,?V0 + 1
   \   00007B   6480         XRL     A,#0x80
   \   00007D   FB           MOV     R3,A
   \   00007E   8004         SJMP    ??GenericApp_ProcessEvent_8
    340            }
    341           /* if ( events & GENERICAPP_SEND_MSG_EVT )
    342            {
    343              // Send "the" message
    344              //GenericApp_SendTheMessage();
    345              P0DIR &= ~0x80;
    346              P0SEL |= 0x80;
    347              // Setup to send message again
    348              ADCCON3 = (ADC_REF_AVDD5 | ADC_14_BIT | ADC_AIN1_SENS);
    349              //ÉèÖÃADCCON1£¬×ª»»Ä£Ê½
    350              ADCCON1 |= 0x30;
    351              //¿ªÊ¼µ¥´Î×ª»»
    352              ADCCON1 |= 0x40;
    353              //µÈ´ýAD×ª»»Íê³É
    354              while(!(ADCCON1 & 0x80));
    355              //±£´æADC×ª»»½á¹û
    356              ADCValue = ADCL >> 2;
    357              ADCValue |= (((unsigned int)ADCH) << 6);
    358              Delays();
    359              if(ADCValue!=0)
    360              {
    361                ADCV[0]=ADCValue/1000+'0';
    362                ADCV[1]=(ADCValue-ADCValue/1000*1000)/100+'0';
    363                ADCV[2]=(ADCValue-ADCValue/100*100)/10+'0';
    364                ADCV[3]=ADCValue%10+'0';
    365                HalUARTWrite(1,"$u,14,00,",9);
    366                HalUARTWrite(1,ADCV,4);
    367                HalUARTWrite(1,",check,cr#",10);
    368                HalUARTWrite(1,"\n",1);
    369              }
    370              osal_start_timerEx( GenericApp_TaskID,
    371                                  GENERICAPP_SEND_MSG_EVT,
    372                                  1000 );
    373          
    374              // return unprocessed events
    375              return (events ^ GENERICAPP_SEND_MSG_EVT);
    376            }*/
    377            return 0;  
   \                     ??GenericApp_ProcessEvent_0:
   \   000080   7A00         MOV     R2,#0x0
   \   000082   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_8:
   \   000084                REQUIRE ?Subroutine0
   \   000084                ; // Fall through to label ?Subroutine0
    378          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    379          /*********************************************************************
    380           * LOCAL FUNCTIONS
    381           */
    382          
    383          /*********************************************************************
    384           * @fn      GenericApp_MessageMSGCB
    385           *
    386           * @brief   Data message processor callback.  This function processes
    387           *          any incoming data - probably from other devices.  So, based
    388           *          on cluster ID, perform the intended action.
    389           *
    390           * @param   none
    391           *
    392           * @return  none
    393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    394          void GenericApp_MessageMSGCB(afIncomingMSGPacket_t *pkt)
   \                     GenericApp_MessageMSGCB:
    395          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV     A,#-0x1c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    396            //unsigned char GPS[33];
    397            unsigned char buffer[24];
    398            unsigned char WenDuChars[2];
    399            unsigned char ShiDuChars[2]; 
    400            switch(pkt->clusterId)
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 1,A
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_MessageMSGCB>_0`:
   \   00001E   0000         DW        0
   \   000020   0200         DW        2
   \   000022   0100         DW        1
   \   000024   ....         DW        ??GenericApp_MessageMSGCB_0
   \   000026   0700         DW        7
   \   000028   ....         DW        ??GenericApp_MessageMSGCB_1
   \   00002A   ....         DW        ??GenericApp_MessageMSGCB_2
    401            {
    402             /* case GENERICAPP_CLUSTERID_POSTURE:
    403          
    404              osal_memcpy(buffer,pkt->cmd.Data,24);
    405              if(buffer[0]!=0)
    406                {
    407                  P1_1=~P1_1;
    408                  P1_0=~P1_0;
    409                  HalUARTWrite(1,"$u,12,00,",9);
    410                  HalUARTWrite(1,buffer,24);
    411                  HalUARTWrite(1,",check,cr#",10);
    412                  HalUARTWrite(1,"\n",1);
    413                }
    414              break;*/
    415              case GENERICAPP_CLUSTERID_LINGHT:
    416              P1_0=~P1_0;
   \                     ??GenericApp_MessageMSGCB_1:
   \   00002C   A290         MOV     C,0x90.0
   \   00002E   D2F0         SETB    B.0
   \   000030   A290         MOV     C,0x90.0
   \   000032   30F001       JNB     B.0,??GenericApp_MessageMSGCB_3
   \   000035   B3           CPL     C
   \                     ??GenericApp_MessageMSGCB_3:
   \   000036   9290         MOV     0x90.0,C
    417              P1_1=~P1_1;
   \   000038   A291         MOV     C,0x90.1
   \   00003A   A291         MOV     C,0x90.1
   \   00003C   30F001       JNB     B.0,??GenericApp_MessageMSGCB_4
   \   00003F   B3           CPL     C
   \                     ??GenericApp_MessageMSGCB_4:
   \   000040   9291         MOV     0x90.1,C
    418          
    419              P1_4=~P1_4;
   \   000042   A294         MOV     C,0x90.4
   \   000044   A294         MOV     C,0x90.4
   \   000046   30F001       JNB     B.0,??GenericApp_MessageMSGCB_5
   \   000049   B3           CPL     C
   \                     ??GenericApp_MessageMSGCB_5:
   \   00004A   9294         MOV     0x90.4,C
    420              
    421              osal_memcpy(buffer,pkt->cmd.Data,3);
   \   00004C                ; Setup parameters for call to function osal_memcpy
   \   00004C   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000052   7C03         MOV     R4,#0x3
   \   000054   7D00         MOV     R5,#0x0
   \   000056   7407         MOV     A,#0x7
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   AA82         MOV     R2,DPL
   \   00005D   AB83         MOV     R3,DPH
   \   00005F   12....       LCALL   ??osal_memcpy?relay
   \   000062   7403         MOV     A,#0x3
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
    422              //char Txdata[25];
    423             // strcpy(Txdata,"HELLO");
    424              if(buffer[0]!=0)
   \   000067   7404         MOV     A,#0x4
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   7003         JNZ     $+5
   \   00006F   02....       LJMP    ??GenericApp_MessageMSGCB_2 & 0xFFFF
    425                {
    426                  temp1 = buffer[0];
   \   000072   90....       MOV     DPTR,#temp1
   \   000075   F0           MOVX    @DPTR,A
    427                  temp2 = buffer[1];
   \   000076   7405         MOV     A,#0x5
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   90....       MOV     DPTR,#temp2
   \   00007F   F0           MOVX    @DPTR,A
    428                  temp3 = buffer[2];
   \   000080   7406         MOV     A,#0x6
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   E0           MOVX    A,@DPTR
   \   000086   90....       MOV     DPTR,#temp3
   \   000089   F0           MOVX    @DPTR,A
    429                  flag1++;
   \   00008A   90....       MOV     DPTR,#flag1
   \   00008D   12....       LCALL   ?Subroutine4 & 0xFFFF
    430                  //P1_1=~P1_1;
    431                  //P1_0=~P1_0;
    432                  HalUARTWrite(0,"Light",5);
   \                     ??CrossCallReturnLabel_5:
   \   000090                ; Setup parameters for call to function HalUARTWrite
   \   000090   7C05         MOV     R4,#0x5
   \   000092   7D00         MOV     R5,#0x0
   \   000094   7A..         MOV     R2,#`?<Constant "Light">` & 0xff
   \   000096   7B..         MOV     R3,#(`?<Constant "Light">` >> 8) & 0xff
   \   000098   7900         MOV     R1,#0x0
   \   00009A   12....       LCALL   ??HalUARTWrite?relay
    433                  HalUARTWrite(0,buffer,3);
   \   00009D                ; Setup parameters for call to function HalUARTWrite
   \   00009D   7C03         MOV     R4,#0x3
   \   00009F   02....       LJMP    ??GenericApp_MessageMSGCB_6 & 0xFFFF
    434                  HalUARTWrite(0,"\n",1);
    435                 /*HalUARTWrite(0,"guang",5);
    436                  HalUARTWrite(0,buffer,3);
    437                 HalUARTWrite(0,"\n",1);*/
    438                }
    439              break;
    440             /* case GENERICAPP_CLUSTERID_SOUND:
    441              //P1_1=~P1_1;
    442              
    443              osal_memcpy(buffer,pkt->cmd.Data,1);
    444              if(buffer[0]=='0' || buffer[0]=='1')
    445                {
    446                  P1_1=~P1_1;
    447                  P1_0=~P1_0;
    448                  HalUARTWrite(1,"$u,10,00,",9);
    449                  HalUARTWrite(1,buffer,1);
    450                  HalUARTWrite(1,",check,cr#",10);
    451                  HalUARTWrite(1,"\n",1);
    452                }
    453              break;
    454              
    455              case GENERICAPP_CLUSTERID_DISTANCE:
    456              P1_1=~P1_1;
    457              
    458              osal_memcpy(buffer,pkt->cmd.Data,3);
    459              if(buffer[0]!=0)
    460                {
    461                  P1_0=~P1_0;
    462                  HalUARTWrite(1,"$u,09,00,",9);
    463                  HalUARTWrite(1,buffer,3);
    464                  HalUARTWrite(1,",check,cr#",10);
    465                  HalUARTWrite(1,"\n",1);
    466                }
    467              break;
    468              */
    469             
    470              case GENERICAPP_CLUSTERID_TEMHUM:
    471              ////P1_0=~P1_0;
    472             // P1_1=~P1_1;
    473          
    474             // P1_4=~P1_4;
    475              osal_memcpy(buffer,pkt->cmd.Data,2);
   \                     ??GenericApp_MessageMSGCB_0:
   \   0000A2                ; Setup parameters for call to function osal_memcpy
   \   0000A2   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A8   7C02         MOV     R4,#0x2
   \   0000AA   7D00         MOV     R5,#0x0
   \   0000AC   7407         MOV     A,#0x7
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   AA82         MOV     R2,DPL
   \   0000B3   AB83         MOV     R3,DPH
   \   0000B5   12....       LCALL   ??osal_memcpy?relay
   \   0000B8   7403         MOV     A,#0x3
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
    476              
    477              
    478              if(buffer[0]!=0)
   \   0000BD   7404         MOV     A,#0x4
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   605D         JZ      ??GenericApp_MessageMSGCB_7
    479                {
    480                  flag2++;
   \   0000C5   90....       MOV     DPTR,#flag2
   \   0000C8   12....       LCALL   ?Subroutine4 & 0xFFFF
    481                  WenDuChars[0]=buffer[0]/10+'0';
   \                     ??CrossCallReturnLabel_6:
   \   0000CB   75F00A       MOV     B,#0xa
   \   0000CE   7404         MOV     A,#0x4
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   84           DIV     AB
   \   0000D5   2430         ADD     A,#0x30
   \   0000D7   C0E0         PUSH    A
   \   0000D9   7402         MOV     A,#0x2
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
    482                  WenDuChars[1]=buffer[0]%10+'0';
   \   0000E1   7404         MOV     A,#0x4
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   75F00A       MOV     B,#0xa
   \   0000EA   84           DIV     AB
   \   0000EB   E5F0         MOV     A,B
   \   0000ED   2430         ADD     A,#0x30
   \   0000EF   C0E0         PUSH    A
   \   0000F1   7403         MOV     A,#0x3
   \   0000F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F6   D0E0         POP     A
   \   0000F8   F0           MOVX    @DPTR,A
    483                  temp4 = WenDuChars[0];
   \   0000F9   7402         MOV     A,#0x2
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   90....       MOV     DPTR,#temp4
   \   000102   F0           MOVX    @DPTR,A
    484                  HalUARTWrite(0,"tem",3);
   \   000103                ; Setup parameters for call to function HalUARTWrite
   \   000103   7C03         MOV     R4,#0x3
   \   000105   7D00         MOV     R5,#0x0
   \   000107   7A..         MOV     R2,#`?<Constant "tem">` & 0xff
   \   000109   7B..         MOV     R3,#(`?<Constant "tem">` >> 8) & 0xff
   \   00010B   7900         MOV     R1,#0x0
   \   00010D   12....       LCALL   ??HalUARTWrite?relay
    485                  HalUARTWrite(0,buffer,1);
   \   000110                ; Setup parameters for call to function HalUARTWrite
   \   000110   7C01         MOV     R4,#0x1
   \   000112   7D00         MOV     R5,#0x0
   \   000114   7404         MOV     A,#0x4
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   AA82         MOV     R2,DPL
   \   00011B   AB83         MOV     R3,DPH
   \   00011D   7900         MOV     R1,#0x0
   \   00011F   12....       LCALL   ??HalUARTWrite?relay
    486                  /*HalUARTWrite(1,"$u,01,00,",9);
    487                  HalUARTWrite(1,WenDuChars,2);
    488                  HalUARTWrite(1,",check,cr#",10);
    489                  HalUARTWrite(1,"\n",1);*/
    490                }
    491                else
    492                {
    493                  //HalUARTWrite(1,"It's Wrong",10);
    494                }
    495                if(buffer[1]!=0)
   \                     ??GenericApp_MessageMSGCB_7:
   \   000122   7405         MOV     A,#0x5
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   E0           MOVX    A,@DPTR
   \   000128   6053         JZ      ??GenericApp_MessageMSGCB_8
    496                { 
    497                  ShiDuChars[0]=buffer[1]/10+'0';
   \   00012A   F8           MOV     R0,A
   \   00012B   75F00A       MOV     B,#0xa
   \   00012E   84           DIV     AB
   \   00012F   2430         ADD     A,#0x30
   \   000131   85..82       MOV     DPL,?XSP + 0
   \   000134   85..83       MOV     DPH,?XSP + 1
   \   000137   F0           MOVX    @DPTR,A
    498                  ShiDuChars[1]=buffer[1]%10+'0';
   \   000138   E8           MOV     A,R0
   \   000139   75F00A       MOV     B,#0xa
   \   00013C   84           DIV     AB
   \   00013D   E5F0         MOV     A,B
   \   00013F   2430         ADD     A,#0x30
   \   000141   C0E0         PUSH    A
   \   000143   7401         MOV     A,#0x1
   \   000145   12....       LCALL   ?XSTACK_DISP0_8
   \   000148   D0E0         POP     A
   \   00014A   12....       LCALL   ?Subroutine3 & 0xFFFF
    499                  temp5 =  ShiDuChars[0];
   \                     ??CrossCallReturnLabel_3:
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   90....       MOV     DPTR,#temp5
   \   000151   F0           MOVX    @DPTR,A
    500                  HalUARTWrite(0,"hum",3);
   \   000152                ; Setup parameters for call to function HalUARTWrite
   \   000152   7C03         MOV     R4,#0x3
   \   000154   7D00         MOV     R5,#0x0
   \   000156   7A..         MOV     R2,#`?<Constant "hum">` & 0xff
   \   000158   7B..         MOV     R3,#(`?<Constant "hum">` >> 8) & 0xff
   \   00015A   7900         MOV     R1,#0x0
   \   00015C   12....       LCALL   ??HalUARTWrite?relay
    501                   HalUARTWrite(0,buffer,1);
   \   00015F                ; Setup parameters for call to function HalUARTWrite
   \   00015F   7C01         MOV     R4,#0x1
   \                     ??GenericApp_MessageMSGCB_6:
   \   000161   7D00         MOV     R5,#0x0
   \   000163   7404         MOV     A,#0x4
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   AA82         MOV     R2,DPL
   \   00016A   AB83         MOV     R3,DPH
   \   00016C   7900         MOV     R1,#0x0
   \   00016E   12....       LCALL   ??HalUARTWrite?relay
    502                    HalUARTWrite(0,"\n",1);
   \   000171                ; Setup parameters for call to function HalUARTWrite
   \   000171   7C01         MOV     R4,#0x1
   \   000173   7D00         MOV     R5,#0x0
   \   000175   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000177   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000179   7900         MOV     R1,#0x0
   \   00017B   800A         SJMP    ??GenericApp_MessageMSGCB_9
    503                 /* HalUARTWrite(1,"$u,02,00,",9);
    504                  HalUARTWrite(1,ShiDuChars,2);
    505                  HalUARTWrite(1,",check,cr#",10);
    506                  HalUARTWrite(1,"\n",1);*/
    507                }
    508                else
    509                {
    510                  //HalUARTWrite(1,"It's Wrong",10);
    511                  HalUARTWrite(1,"\n",1);
   \                     ??GenericApp_MessageMSGCB_8:
   \   00017D                ; Setup parameters for call to function HalUARTWrite
   \   00017D   7C01         MOV     R4,#0x1
   \   00017F   7D00         MOV     R5,#0x0
   \   000181   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000183   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000185   7901         MOV     R1,#0x1
   \                     ??GenericApp_MessageMSGCB_9:
   \   000187   12....       LCALL   ??HalUARTWrite?relay
    512                } 
    513              break;
    514             /* case GENERICAPP_CLUSTERID_GAS:
    515              //P1_1=~P1_1;
    516              
    517              osal_memcpy(buffer,pkt->cmd.Data,1);
    518              if(buffer[0]!=0)
    519                {
    520                  P1_1=~P1_1;
    521                  P1_0=~P1_0;
    522                  HalUARTWrite(1,"$u,13,00,",9);
    523                  HalUARTWrite(1,buffer,1);
    524                  HalUARTWrite(1,",check,cr#",10);
    525                  HalUARTWrite(1,"\n",1);
    526                }
    527              break;
    528              case GENERICAPP_CLUSTERID_DOUBLE:
    529          
    530              break;
    531              case GENERICAPP_CLUSTERID_GPS:
    532                osal_memcpy(GPS,pkt->cmd.Data,33);
    533                if(buffer[0]!=0)
    534                {
    535                  HalUARTWrite(1,"$u,04,00,",9);
    536                  HalUARTWrite(1,pkt->cmd.Data,33);
    537                  HalUARTWrite(1,",check,cr#",10);
    538                  HalUARTWrite(1,"\n",1);
    539                }
    540              break;*/
    541            }
    542          }
   \                     ??GenericApp_MessageMSGCB_2:
   \   00018A   741C         MOV     A,#0x1c
   \   00018C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018F   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000192                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0 + 1,A
   \   000011   75..00       MOV     ?V0 + 2,#0x0
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   22           RET
    543          /*********************************************************************
    544           * @fn      GenericApp_SendTheMessage
    545           *
    546           * @brief   Send "the" message.
    547           *
    548           * @param   none
    549           *
    550           * @return  none
    551           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    552          void GenericApp_SendTheMessage(unsigned char *theMessageData)
   \                     GenericApp_SendTheMessage:
    553          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    554            afAddrType_t my_DstAddr;
    555            my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    556            my_DstAddr.endPoint=GENERICAPP_ENDPOINT;
   \   000012   7409         MOV     A,#0x9
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   740A         MOV     A,#0xa
   \   000019   12....       LCALL   ?Subroutine3 & 0xFFFF
    557            my_DstAddr.addr.shortAddr=0xFFFF; 
   \                     ??CrossCallReturnLabel_4:
   \   00001C   74FF         MOV     A,#-0x1
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   F0           MOVX    @DPTR,A
    558            
    559            AF_DataRequest(&my_DstAddr
    560                           ,&GenericApp_epDesc
    561                             ,GENERICAPP_CLUSTERID_DOUBLE
    562                                 ,4
    563                                 ,theMessageData
    564                                   ,&GenericApp_TransID
    565                                     ,AF_DISCV_ROUTE
    566                                       ,AF_DEFAULT_RADIUS);
   \   000021                ; Setup parameters for call to function AF_DataRequest
   \   000021   75..1E       MOV     ?V0 + 0,#0x1e
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   75....       MOV     ?V0 + 0,#GenericApp_TransID & 0xff
   \   00002C   75....       MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   8A..         MOV     ?V0 + 0,R2
   \   000036   8B..         MOV     ?V0 + 1,R3
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..04       MOV     ?V0 + 0,#0x4
   \   000040   75..00       MOV     ?V0 + 1,#0x0
   \   000043   78..         MOV     R0,#?V0 + 0
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   75..03       MOV     ?V0 + 0,#0x3
   \   00004B   78..         MOV     R0,#?V0 + 0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   7920         MOV     R1,#0x20
   \   000052   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   000054   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   000056   7409         MOV     A,#0x9
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   AA82         MOV     R2,DPL
   \   00005D   AB83         MOV     R3,DPH
   \   00005F   12....       LCALL   ??AF_DataRequest?relay
   \   000062   7409         MOV     A,#0x9
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
    567          }
   \   000067   740C         MOV     A,#0xc
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C                REQUIRE ?Subroutine1
   \   00006C                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    568          
    569          /*********************************************************************
    570           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    571          uint8 shortddr[8];
   \                     shortddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    572          void GenericApp_SPI(void)
   \                     GenericApp_SPI:
    573          {       
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    574            uint8 str_1[]="my short address is";
    575            //HalUARTWrite(0,&str_1[0],20);
    576            
    577            uint16 short_ddr;
    578            uint8 short_ddr_H;
    579            uint8 short_ddr_L;
    580            uint8 shortaddr[7];
    581            uint8* pointerl;
    582            
    583            short_ddr=NLME_GetShortAddr();
   \   000005                ; Setup parameters for call to function NLME_GetShortAddr
   \   000005   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000008   8A..         MOV     ?V0 + 0,R2
    584            short_ddr_H=(uint8)((short_ddr&0xff00)>>8);
    585            short_ddr_H=(uint8)short_ddr;
    586            
    587            shortddr[0]=48;
   \   00000A   90....       MOV     DPTR,#shortddr
   \   00000D   7430         MOV     A,#0x30
   \   00000F   F0           MOVX    @DPTR,A
    588            shortddr[1]=120;
   \   000010   A3           INC     DPTR
   \   000011   7478         MOV     A,#0x78
   \   000013   F0           MOVX    @DPTR,A
    589            shortddr[2]=hextoword1(short_ddr_H);
   \   000014                ; Setup parameters for call to function hextoword1
   \   000014   A9..         MOV     R1,?V0 + 0
   \   000016   12....       LCALL   ??hextoword1?relay
   \   000019   E9           MOV     A,R1
   \   00001A   90....       MOV     DPTR,#shortddr + 2
   \   00001D   F0           MOVX    @DPTR,A
    590            shortddr[3]=hextoword2(short_ddr_H);
   \   00001E   A3           INC     DPTR
   \   00001F   7430         MOV     A,#0x30
   \   000021   F0           MOVX    @DPTR,A
    591            shortddr[4]=hextoword1(short_ddr_L);
                                          ^
Warning[Pe549]: variable "short_ddr_L" is used before its value is set

    uint8 str_1[]="my short address is";
          ^
"E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\Source\GenericApp.c",574  Warning[Pe177]: 
          variable "str_1" was declared but never referenced

    uint8* pointerl;
           ^
"E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\Source\GenericApp.c",581  Warning[Pe550]: 
          variable "pointerl" was set but never used
   \   000022                ; Setup parameters for call to function hextoword1
   \   000022   7900         MOV     R1,#0x0
   \   000024   12....       LCALL   ??hextoword1?relay
   \   000027   E9           MOV     A,R1
   \   000028   90....       MOV     DPTR,#shortddr + 4
   \   00002B   F0           MOVX    @DPTR,A
    592            shortddr[5]=hextoword2(short_ddr_L);
   \   00002C   A3           INC     DPTR
   \   00002D   7430         MOV     A,#0x30
   \   00002F   F0           MOVX    @DPTR,A
    593            shortddr[6]='\n';
   \   000030   A3           INC     DPTR
   \   000031   740A         MOV     A,#0xa
   \   000033   F0           MOVX    @DPTR,A
    594            
    595            pointerl=&shortaddr[0];
    596            HalUARTWrite(0,"UART SUCCESS",12);
   \   000034                ; Setup parameters for call to function HalUARTWrite
   \   000034   7C0C         MOV     R4,#0xc
   \   000036   7D00         MOV     R5,#0x0
   \   000038   7A..         MOV     R2,#`?<Constant "UART SUCCESS">` & 0xff
   \   00003A   7B..         MOV     R3,#(`?<Constant "UART SUCCESS">` >> 8) & 0xff
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   12....       LCALL   ??HalUARTWrite?relay
    597          }
   \   000041   80..         SJMP    ?Subroutine1
    598          /*uint8 * GetShortAddr(void)
    599          {
    600            uint8 * p;
    601            shor_dr=NLME_GetShortAddr();
    602            
    603            short_dr_H=(uint8)((short_dr&0xff00)>>8);
    604            short_dr_L=(uint8)short_dr;
    605            
    606            shortadr[0]=48;
    607            shortadr[1]=120;
    608            shortadr[2]=hextoword1(short_dr_H);
    609            shortadr[3]=hextoword2(short_dr_H);
    610            shortadr[4]=hextoword1(short_dr_L);
    611            shortadr[5]=hextoword2(short_dr_L);
    612            shortadr[6]='\n';
    613            p=&shortaddr[0];
    614            return(p);
    615          }*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    616          uint8 hextoword1(uint8 t)
   \                     hextoword1:
    617          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
    618            uint8 abc;
    619            uint8 cba;
    620            uint8 xx1;
    621            abc = t;
    622            cba = 0xf0;
    623            abc=(abc&cba)>>4;
   \   000001   C4           SWAP    A
   \   000002   540F         ANL     A,#0xf
   \   000004   F9           MOV     R1,A
    624            if(abc<10)
   \   000005   C3           CLR     C
   \   000006   940A         SUBB    A,#0xa
   \   000008   5004         JNC     ??hextoword1_0
    625            {
    626              xx1 = abc+48;
   \   00000A   7430         MOV     A,#0x30
   \   00000C   8002         SJMP    ??hextoword1_1
    627            }
    628            else
    629            {
    630              xx1=abc+55;
   \                     ??hextoword1_0:
   \   00000E   7437         MOV     A,#0x37
   \                     ??hextoword1_1:
   \   000010   29           ADD     A,R1
   \   000011   F9           MOV     R1,A
    631            }
    632            return xx1;
   \   000012   02....       LJMP    ?BRET
    633          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    634          uint8 hextoword2(uint8 t)
   \                     hextoword2:
    635          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    636            uint8 abc;
    637            uint8 cba;
    638            uint8 xx2;
    639            abc = t;
    640            cba = 0x0f;
    641            abc=(abc&cba)>>4;
    642            if(abc<10)
    643            {
    644              xx2 = abc+48;
    645            }
    646            else
    647            {
    648              xx2=abc+55;
    649            }
    650            return xx2;
   \   000000   7930         MOV     R1,#0x30
   \   000002   02....       LJMP    ?BRET
    651          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    652          void GenericApp_UART1(afIncomingMSGPacket_t *pkt)
   \                     GenericApp_UART1:
    653          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    654            HalUARTWrite(0,(uint8 *)((osal_event_hdr_t *)pkt+1),pkt->hdr.status);
   \   000004                ; Setup parameters for call to function HalUARTWrite
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FC           MOV     R4,A
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   EA           MOV     A,R2
   \   00000E   2402         ADD     A,#0x2
   \   000010   FA           MOV     R2,A
   \   000011   EB           MOV     A,R3
   \   000012   3400         ADDC    A,#0x0
   \   000014   FB           MOV     R3,A
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   ??HalUARTWrite?relay
    655            MT_UartAppFlowControl(true);
   \   00001A                ; Setup parameters for call to function MT_UartAppFlowControl
   \   00001A   7901         MOV     R1,#0x1
   \   00001C   12....       LCALL   ??MT_UartAppFlowControl?relay
    656          }
   \   00001F   D083         POP     DPH
   \   000021   D082         POP     DPL
   \   000023   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for temp1>`:
   \   000000   61           DB 97

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for temp2>`:
   \   000000   61           DB 97

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for temp3>`:
   \   000000   61           DB 97

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for temp4>`:
   \   000000   61           DB 97

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for temp5>`:
   \   000000   61           DB 97

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delays?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delays

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??initUARTSEND?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initUARTSEND

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_SendTheMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_SPI?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_SPI

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??hextoword1?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hextoword1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??hextoword2?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hextoword2

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_UART1?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_UART1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Light">`:
   \   000000   4C696768     DB "Light"
   \            7400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "tem">`:
   \   000000   74656D00     DB "tem"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "hum">`:
   \   000000   68756D00     DB "hum"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UART SUCCESS">`:
   \   000000   55415254     DB "UART SUCCESS"
   \            20535543
   \            43455353
   \            00      

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  Delays
       0      0     38  GenericApp_Init
                          0 0 38 -> HalUARTOpen
                          0 0 38 -> MT_UartRegisterTaskID
                          0 0 38 -> RegisterForKeys
                          0 0 38 -> afRegister
                          0 0 38 -> initUARTSEND
       1      0     55  GenericApp_MessageMSGCB
                          0 0 40 -> HalUARTWrite
                          0 0 43 -> osal_memcpy
       0      0     12  GenericApp_ProcessEvent
                          0 0 12 -> GenericApp_MessageMSGCB
                          0 0 12 -> GenericApp_SPI
                          0 0 12 -> GenericApp_UART1
                          0 0 12 -> osal_msg_deallocate
                          0 0 12 -> osal_msg_receive
                          0 0 12 -> osal_start_timerEx
       0      0     22  GenericApp_SPI
                          0 0 10 -> HalUARTWrite
                          0 0 10 -> NLME_GetShortAddr
                          0 0 10 -> hextoword1
       0      0     31  GenericApp_SendTheMessage
                          0 0 31 -> AF_DataRequest
       2      0     12  GenericApp_UART1
                          2 0  0 -> HalUARTWrite
                          2 0  0 -> MT_UartAppFlowControl
       0      0     10  hextoword1
       0      0      0  hextoword2
       0      0     38  initUARTSEND


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Constant "Light">
      13  ?<Constant "UART SUCCESS">
       2  ?<Constant "\n">
       4  ?<Constant "hum">
       4  ?<Constant "tem">
       1  ?<Initializer for temp1>
       1  ?<Initializer for temp2>
       1  ?<Initializer for temp3>
       1  ?<Initializer for temp4>
       1  ?<Initializer for temp5>
       6  ??Delays?relay
       6  ??GenericApp_Init?relay
       6  ??GenericApp_MessageMSGCB?relay
       6  ??GenericApp_ProcessEvent?relay
       6  ??GenericApp_SPI?relay
       6  ??GenericApp_SendTheMessage?relay
       6  ??GenericApp_UART1?relay
       6  ??hextoword1?relay
       6  ??hextoword2?relay
       6  ??initUARTSEND?relay
       5  ?Subroutine0
       5  ?Subroutine1
      23  ?Subroutine2
       8  ?Subroutine3
      10  ?Subroutine4
       1  ADCV
       2  ADCValue
       2  AdcValue
       1  CLKCONCMD
       1  CLKCONSTA
      20  Delays
      16  GenericApp_ClusterList
     125  GenericApp_Init
     402  GenericApp_MessageMSGCB
       1  GenericApp_NwkState
     132  GenericApp_ProcessEvent
      67  GenericApp_SPI
     108  GenericApp_SendTheMessage
      12  GenericApp_SimpleDesc
       1  GenericApp_TaskID
       1  GenericApp_TransID
      38  GenericApp_UART1
       6  GenericApp_epDesc
       1  P0SEL
       1  PERCFG
       1  U0BAUD
       1  U0CSR
       1  U0GCR
       1  _A_IRCON2
       1  _A_P1
       2  flag1
       2  flag2
      21  hextoword1
       5  hextoword2
      32  initUARTSEND
       8  shortddr
       1  temp1
       1  temp2
       1  temp3
       1  temp4
       1  temp5
       2  value

 
 1 001 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
     9 bytes in segment SFR_AN
     5 bytes in segment XDATA_I
     5 bytes in segment XDATA_ID
    57 bytes in segment XDATA_ROM_C
    28 bytes in segment XDATA_Z
 
 1 066 bytes of CODE  memory
    57 bytes of CONST memory
     0 bytes of DATA  memory (+ 9 bytes shared)
    33 bytes of XDATA memory

Errors: none
Warnings: 3
