###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             06/Dec/2016  22:09:35 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Components\stack\zdo\ZDProfile.c            #
#    Command line       =  -f E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC253 #
#                          0DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg          #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wConfig.cfg             #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00100000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 E:\Lib\micro-electromechani #
#                          cal\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Components\stack\zdo #
#                          \ZDProfile.c -D ZTOOL_P1 -D MT_TASK -D             #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC25 #
#                          30DB\RouterEB\List\ -lA E:\Lib\micro-electromechan #
#                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\00Ð­µ÷½Úµã\CC2530DB\RouterEB\List\            #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \RouterEB\Obj\ -e --no_code_motion --debug         #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\Lib\micro-electromechan #
#                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\00Ð­µ÷½Úµã\CC2530DB\ -I                       #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\Source\ -I E:\Lib\micro-electromechanical\Ê±ÑÓ #
#                          \ZStack-CC2530-2.5.1a\Projects\zstack\Samples\00Ð­ #
#                          µ÷½Úµã\CC2530DB\..\..\..\ZMain\TI2530DB\ -I        #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\hal\include\ -I         #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\hal\target\CC2530EB\    #
#                          -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\include\ -I      #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\mac\high_level\ -I      #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\mac\low_level\srf04\    #
#                          -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC253 #
#                          0DB\..\..\..\..\..\Components\mac\low_level\srf04\ #
#                          single_chip\ -I E:\Lib\micro-electromechanical\Ê±Ñ #
#                          Ó\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\00Ð #
#                          ­µ÷½Úµã\CC2530DB\..\..\..\..\..\Components\mt\ -I  #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\osal\include\ -I        #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\services\saddr\ -I      #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\services\sdata\ -I      #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\stack\af\ -I            #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\stack\nwk\ -I           #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\stack\sapi\ -I          #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\stack\sec\ -I           #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\stack\sys\ -I           #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\stack\zdo\ -I           #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\zmac\ -I                #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \..\..\..\..\..\Components\zmac\f8w\ -Ohz          #
#    List file          =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \RouterEB\List\ZDProfile.lst                       #
#    Object file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\00Ð­µ÷½Úµã\CC2530DB #
#                          \RouterEB\Obj\ZDProfile.r51                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2010-10-13 10:54:13 -0700 (Wed, 13 Oct 2010) $
      4            Revision:       $Revision: 24112 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComdef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          /*********************************************************************
    113           * TYPEDEFS
    114           */
    115          typedef struct
    116          {
    117            void *next;
    118            uint8 taskID;
    119            uint16 clusterID;
    120          } ZDO_MsgCB_t;
    121          
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    128          
    129          /*********************************************************************
    130           * EXTERNAL VARIABLES
    131           */
    132          
    133          extern endPointDesc_t ZDApp_epDesc;
    134          
    135          /*********************************************************************
    136           * EXTERNAL FUNCTIONS
    137           */
    138          
    139          /*********************************************************************
    140           * LOCAL FUNCTIONS
    141           */
    142          
    143          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    144          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    145          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    146          
    147          /*********************************************************************
    148           * LOCAL VARIABLES
    149           */
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    156          
    157          /*********************************************************************
    158           * ZDO Message Processing table
    159           */
    160          
    161          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    162          
    163          typedef struct
    164          {
    165            uint16                clusterID;
    166            pfnZDPMsgProcessor    pFn;
    167          } zdpMsgProcItem_t;
    168          

   \                                 In  segment CODE_C, align 1
    169          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000         DW 0
   \   000002   ....         DW ??zdpProcessAddrReq?relay
   \   000004   1300         DW 19
   \   000006   ....         DW ??ZDO_ProcessDeviceAnnce?relay
   \   000008   0100         DW 1
   \   00000A   ....         DW ??zdpProcessAddrReq?relay
   \   00000C   0200         DW 2
   \   00000E   ....         DW ??ZDO_ProcessNodeDescReq?relay
   \   000010   0300         DW 3
   \   000012   ....         DW ??ZDO_ProcessPowerDescReq?relay
   \   000014   0400         DW 4
   \   000016   ....         DW ??ZDO_ProcessSimpleDescReq?relay
   \   000018   0500         DW 5
   \   00001A   ....         DW ??ZDO_ProcessActiveEPReq?relay
   \   00001C   0600         DW 6
   \   00001E   ....         DW ??ZDO_ProcessMatchDescReq?relay
   \   000020   1100         DW 17
   \   000022   ....         DW ??ZDO_ProcessUserDescReq?relay
   \   000024   1400         DW 20
   \   000026   ....         DW ??ZDO_ProcessUserDescSet?relay
   \   000028   1500         DW 21
   \   00002A   ....         DW ??ZDO_ProcessServerDiscReq?relay
   \   00002C   FFFF         DW 65535
   \   00002E   0000         DW 0H
    170          {
    171          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    172            // These aren't processed by sleeping end devices.
    173            { NWK_addr_req,           zdpProcessAddrReq },
    174            { Device_annce,           ZDO_ProcessDeviceAnnce },
    175          #endif
    176            { IEEE_addr_req,          zdpProcessAddrReq },
    177            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    178            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    179            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    180            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    181            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    182          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    183            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    184          #endif
    185          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    186            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    187          #endif
    188          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    189            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    192            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    198            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    202          #endif
    203          #if defined ( ZDO_USERDESC_RESPONSE )
    204            { User_Desc_req,          ZDO_ProcessUserDescReq },
    205          #endif
    206          #if defined ( ZDO_USERDESCSET_RESPONSE )
    207            { User_Desc_set,          ZDO_ProcessUserDescSet },
    208          #endif
    209          #if defined ( ZDO_SERVERDISC_RESPONSE )
    210            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    211          #endif
    212            {0xFFFF, NULL} // Last
    213          };
    214          
    215          /*********************************************************************
    216           * @fn          fillAndSend
    217           *
    218           * @brief       Combined to reduce space
    219           *
    220           * @param
    221           * @param
    222           *
    223           * @return      afStatus_t
    224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    225          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    226          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V0 + 6,R1
   \   000014   741C         MOV     A,#0x1c
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ??Subroutine115_0 & 0xFFFF
    227            afAddrType_t afAddr;
    228          
    229            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \                     ??CrossCallReturnLabel_204:
   \   00001C                ; Setup parameters for call to function osal_memset
   \   00001C   7C0C         MOV     R4,#0xc
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7900         MOV     R1,#0x0
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   AA82         MOV     R2,DPL
   \   00002A   AB83         MOV     R3,DPH
   \   00002C   12....       LCALL   ??osal_memset?relay
    230            ZADDR_TO_AFADDR( addr, afAddr );
   \   00002F   7409         MOV     A,#0x9
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C0E0         PUSH    A
   \   000045   7408         MOV     A,#0x8
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   D0E0         POP     A
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000054   F0           MOVX    @DPTR,A
    231          
    232            *(ZDP_TmpBuf-1) = *transSeq;
   \   000055   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000058   E0           MOVX    A,@DPTR
   \   000059   24FF         ADD     A,#-0x1
   \   00005B   F5..         MOV     ?V0 + 4,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   34FF         ADDC    A,#-0x1
   \   000061   F5..         MOV     ?V0 + 5,A
   \   000063   85..82       MOV     DPL,?V0 + 2
   \   000066   85..83       MOV     DPH,?V0 + 3
   \   000069   12....       LCALL   ?Subroutine45 & 0xFFFF
    233          
    234            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    235                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    236                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \                     ??CrossCallReturnLabel_54:
   \   00006C                ; Setup parameters for call to function AF_DataRequest
   \   00006C   75..1E       MOV     ?V0 + 7,#0x1e
   \   00006F   78..         MOV     R0,#?V0 + 7
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000074   78..         MOV     R0,#?V0 + 2
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   78..         MOV     R0,#?V0 + 4
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   85....       MOV     ?V0 + 2,?V0 + 6
   \   000081   E5..         MOV     A,?V0 + 2
   \   000083   2401         ADD     A,#0x1
   \   000085   F5..         MOV     ?V0 + 2,A
   \   000087   E4           CLR     A
   \   000088   3400         ADDC    A,#0x0
   \   00008A   F5..         MOV     ?V0 + 3,A
   \   00008C   78..         MOV     R0,#?V0 + 2
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   78..         MOV     R0,#?V0 + 0
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   90....       MOV     DPTR,#ZDP_TxOptions
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F9           MOV     R1,A
   \   00009B   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   00009D   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   00009F   7409         MOV     A,#0x9
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   AA82         MOV     R2,DPL
   \   0000A6   AB83         MOV     R3,DPH
   \   0000A8   12....       LCALL   ??AF_DataRequest?relay
   \   0000AB   7409         MOV     A,#0x9
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0   740C         MOV     A,#0xc
   \   0000B2   80..         SJMP    ??Subroutine82_0
    237          
    238          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine83_0
   \   000003                ; // Fall through to label ??Subroutine83_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 4
   \   000004   85..83       MOV     DPH,?V0 + 5
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E8           MOV     A,R0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    239          
    240          /*********************************************************************
    241           * @fn          ZDP_SendData
    242           *
    243           * @brief       This builds and send a request message that has
    244           *              NWKAddrOfInterest as its only parameter.
    245           *
    246           * @param       dstAddr - destination address
    247           * @param       cmd - clusterID
    248           * @param       dataLen - number of bytes of data
    249           * @param       data - pointer to the data
    250           * @param       SecurityEnable - Security Options
    251           *
    252           * @return      afStatus_t
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    255                                  byte len, uint8 *buf, byte SecurityEnable )
    256          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   740E         MOV     A,#0xe
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 1,A
    257            uint8 *pBuf = ZDP_TmpBuf;
   \   000017   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001A   12....       LCALL   ?Subroutine32 & 0xFFFF
    258            byte cnt = len;
   \                     ??CrossCallReturnLabel_32:
   \   00001D   EE           MOV     A,R6
   \   00001E   FF           MOV     R7,A
   \   00001F   7410         MOV     A,#0x10
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000027   801D         SJMP    ??ZDP_SendData_0
    259          
    260            while ( cnt-- )
    261            {
    262              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000029   8882         MOV     DPL,R0
   \   00002B   8983         MOV     DPH,R1
   \   00002D   12....       LCALL   ?Subroutine45 & 0xFFFF
    263            }
   \                     ??CrossCallReturnLabel_55:
   \   000030   8882         MOV     DPL,R0
   \   000032   8983         MOV     DPH,R1
   \   000034   A3           INC     DPTR
   \   000035   A882         MOV     R0,DPL
   \   000037   A983         MOV     R1,DPH
   \   000039   85..82       MOV     DPL,?V0 + 4
   \   00003C   85..83       MOV     DPH,?V0 + 5
   \   00003F   A3           INC     DPTR
   \   000040   8582..       MOV     ?V0 + 4,DPL
   \   000043   8583..       MOV     ?V0 + 5,DPH
   \                     ??ZDP_SendData_0:
   \   000046   8F..         MOV     ?V0 + 0,R7
   \   000048   74FF         MOV     A,#-0x1
   \   00004A   25..         ADD     A,?V0 + 0
   \   00004C   1F           DEC     R7
   \   00004D   04           INC     A
   \   00004E   70D9         JNZ     ??ZDP_SendData_1
    264          
    265            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   000050   E5..         MOV     A,?V0 + 1
   \   000052   90....       MOV     DPTR,#ZDP_TxOptions
   \   000055   6004         JZ      ??ZDP_SendData_2
   \   000057   7440         MOV     A,#0x40
   \   000059   8001         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   00005B   E4           CLR     A
   \                     ??ZDP_SendData_3:
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D                ; Setup parameters for call to function fillAndSend
   \   00005D   78..         MOV     R0,#?V0 + 2
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   EE           MOV     A,R6
   \   000063   F9           MOV     R1,A
   \   000064   12....       LCALL   ??fillAndSend?relay
   \   000067   7402         MOV     A,#0x2
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00006F   E4           CLR     A
   \   000070   F0           MOVX    @DPTR,A
   \   000071   02....       LJMP    ?Subroutine1 & 0xFFFF
    266          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   22           RET
    267          
    268          /*********************************************************************
    269           * @fn          ZDP_NWKAddrOfInterestReq
    270           *
    271           * @brief       This builds and send a request message that has
    272           *              NWKAddrOfInterest as its only parameter.
    273           *
    274           * @param       dstAddr - destination address
    275           * @param       nwkAddr - 16 bit address
    276           * @param       SecurityEnable - Security Options
    277           *
    278           * @return      afStatus_t
    279           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    280          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    281                                               byte cmd, byte SecurityEnable )
    282          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    283            (void)SecurityEnable;  // Intentionally unreferenced parameter
    284          
    285            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   12....       LCALL   ?Subroutine17 & 0xFFFF
    286            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    287          
    288            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \                     ??CrossCallReturnLabel_10:
   \   00000A                ; Setup parameters for call to function fillAndSend
   \   00000A   8E..         MOV     ?V0 + 0,R6
   \   00000C   02....       LJMP    ?Subroutine2 & 0xFFFF
    289          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75..00       MOV     ?V0 + 1,#0x0
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7902         MOV     R1,#0x2
   \   00000A                REQUIRE ??Subroutine85_0
   \   00000A                ; // Fall through to label ??Subroutine85_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine86_0
   \   000008                ; // Fall through to label ??Subroutine86_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000   12....       LCALL   ??fillAndSend?relay
   \   000003   7402         MOV     A,#0x2
   \   000005                REQUIRE ??Subroutine87_0
   \   000005                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000006   EC           MOV     A,R4
   \   000007   F0           MOVX    @DPTR,A
   \   000008   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00000B   ED           MOV     A,R5
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET
    290          
    291          /*********************************************************************
    292           * Address Requests
    293           */
    294          
    295          /*********************************************************************
    296           * @fn          ZDP_NwkAddrReq
    297           *
    298           * @brief       This builds and send a NWK_addr_req message.  This
    299           *              function sends a broadcast message looking for a 16
    300           *              bit address with a 64 bit address as bait.
    301           *
    302           * @param       IEEEAddress - looking for this device
    303           * @param       SecurityEnable - Security Options
    304           *
    305           * @return      afStatus_t
    306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    308                                     byte StartIndex, byte SecurityEnable )
    309          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 2,R1
   \   000010   8C..         MOV     ?V0 + 3,R4
    310            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   12....       LCALL   ?Subroutine11 & 0xFFFF
    311            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    312            zAddrType_t dstAddr;
    313          
    314            (void)SecurityEnable;  // Intentionally unreferenced parameter
    315          
    316            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_210:
   \   000015                ; Setup parameters for call to function sAddrExtCmp
   \   000015   EE           MOV     A,R6
   \   000016   FC           MOV     R4,A
   \   000017   EF           MOV     A,R7
   \   000018   FD           MOV     R5,A
   \   000019   7A..         MOV     R2,#saveExtAddr & 0xff
   \   00001B   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   00001D   12....       LCALL   ??sAddrExtCmp?relay
   \   000020   E9           MOV     A,R1
   \   000021   700A         JNZ     ??ZDP_NwkAddrReq_0
    317            {
    318              dstAddr.addrMode = AddrBroadcast;
   \   000023   7408         MOV     A,#0x8
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine63 & 0xFFFF
    319              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    320            }
   \                     ??CrossCallReturnLabel_83:
   \   00002B   800E         SJMP    ??CrossCallReturnLabel_23
    321            else
    322            {
    323              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7402         MOV     A,#0x2
   \   000034   F0           MOVX    @DPTR,A
    324              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000035   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000038   12....       LCALL   ?Subroutine25 & 0xFFFF
    325            }
   \                     ??CrossCallReturnLabel_23:
   \   00003B   F0           MOVX    @DPTR,A
    326          
    327            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   00003C                ; Setup parameters for call to function sAddrExtCpy
   \   00003C   EE           MOV     A,R6
   \   00003D   FC           MOV     R4,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FD           MOV     R5,A
   \   000040   AA..         MOV     R2,?V0 + 0
   \   000042   AB..         MOV     R3,?V0 + 1
   \   000044   12....       LCALL   ??sAddrExtCpy?relay
    328          
    329            *pBuf++ = ReqType;
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   E5..         MOV     A,?V0 + 2
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
    330            *pBuf++ = StartIndex;
   \   00004F   E5..         MOV     A,?V0 + 3
   \   000051   F0           MOVX    @DPTR,A
    331          
    332            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000052                ; Setup parameters for call to function fillAndSend
   \   000052   E4           CLR     A
   \   000053   F5..         MOV     ?V0 + 0,A
   \   000055   F5..         MOV     ?V0 + 1,A
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   790A         MOV     R1,#0xa
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   AC82         MOV     R4,DPL
   \   000065   AD83         MOV     R5,DPH
   \   000067   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000069   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00006B   12....       LCALL   ??fillAndSend?relay
   \   00006E   7402         MOV     A,#0x2
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   7409         MOV     A,#0x9
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   02....       LJMP    ?Subroutine1 & 0xFFFF
    333          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FD         MOV     A,#-0x3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine115_0
   \   000003                ; // Fall through to label ??Subroutine115_0
    334          
    335          /*********************************************************************
    336           * @fn          ZDP_IEEEAddrReq
    337           *
    338           * @brief       This builds and send a IEEE_addr_req message.  This
    339           *              function sends a unicast message looking for a 64
    340           *              bit IEEE address with a 16 bit address as bait.
    341           *
    342           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    343           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    344           * @param       SecurityEnable - Security Options
    345           *
    346           * @return      afStatus_t
    347           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    348          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    349                                      byte StartIndex, byte SecurityEnable )
    350          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    351            uint8 *pBuf = ZDP_TmpBuf;
   \   00000E   12....       LCALL   ??Subroutine123_0 & 0xFFFF
    352            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    353            zAddrType_t dstAddr;
    354          
    355            (void)SecurityEnable;  // Intentionally unreferenced parameter
    356          
    357            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_262:
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   7402         MOV     A,#0x2
   \   000018   F0           MOVX    @DPTR,A
    358            dstAddr.addr.shortAddr = shortAddr;
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   EA           MOV     A,R2
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   EB           MOV     A,R3
   \   000023   F0           MOVX    @DPTR,A
    359          
    360            *pBuf++ = LO_UINT16( shortAddr );
   \   000024   EA           MOV     A,R2
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
    361            *pBuf++ = HI_UINT16( shortAddr );
   \   00002B   EB           MOV     A,R3
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
    362          
    363            *pBuf++ = ReqType;
   \   00002E   EE           MOV     A,R6
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
    364            *pBuf++ = StartIndex;
   \   000031   EF           MOV     A,R7
   \   000032   F0           MOVX    @DPTR,A
    365          
    366            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   000033                ; Setup parameters for call to function fillAndSend
   \   000033   75..01       MOV     ?V0 + 0,#0x1
   \   000036   75..00       MOV     ?V0 + 1,#0x0
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7904         MOV     R1,#0x4
   \   000040                REQUIRE ?Subroutine6
   \   000040                ; // Fall through to label ?Subroutine6
    367          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?XSTACK_DISP0_8
   \   000005   AC82         MOV     R4,DPL
   \   000007   AD83         MOV     R5,DPH
   \   000009   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00000B   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00000D   12....       LCALL   ??fillAndSend?relay
   \   000010   7402         MOV     A,#0x2
   \   000012   12....       LCALL   ?DEALLOC_XSTACK8
   \   000015                REQUIRE ??Subroutine84_0
   \   000015                ; // Fall through to label ??Subroutine84_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000   7409         MOV     A,#0x9
   \   000002   80..         SJMP    ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine124_0
   \   000003                ; // Fall through to label ??Subroutine124_0
    368          
    369          /*********************************************************************
    370           * @fn          ZDP_MatchDescReq
    371           *
    372           * @brief       This builds and send a Match_Desc_req message.  This
    373           *              function sends a broadcast or unicast message
    374           *              requesting the list of endpoint/interfaces that
    375           *              match profile ID and cluster IDs.
    376           *
    377           * @param       dstAddr - destination address
    378           * @param       nwkAddr - network address of interest
    379           * @param       ProfileID - Profile ID
    380           * @param       NumInClusters - number of input clusters
    381           * @param       InClusterList - input cluster ID list
    382           * @param       NumOutClusters - number of output clusters
    383           * @param       OutClusterList - output cluster ID list
    384           * @param       SecurityEnable - Security Options
    385           *
    386           * @return      afStatus_t
    387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    389                                          uint16 ProfileID,
    390                                          byte NumInClusters, cId_t *InClusterList,
    391                                          byte NumOutClusters, cId_t *OutClusterList,
    392                                          byte SecurityEnable )
    393          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine41 & 0xFFFF
    394            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_246:
   \   000008   7412         MOV     A,#0x12
   \   00000A   12....       LCALL   ?XSTACK_DISP0_8
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
    395            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    396            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    397          
    398            (void)SecurityEnable;  // Intentionally unreferenced parameter
    399          
    400            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000010   EE           MOV     A,R6
   \   000011   25..         ADD     A,?V0 + 0
   \   000013   C3           CLR     C
   \   000014   33           RLC     A
   \   000015   2406         ADD     A,#0x6
   \   000017   FF           MOV     R7,A
    401          
    402            if ( len >= ZDP_BUF_SZ-1 )
   \   000018   C3           CLR     C
   \   000019   944F         SUBB    A,#0x4f
   \   00001B   4005         JC      ??ZDP_MatchDescReq_0
    403            {
    404              return afStatus_MEM_FAIL;
   \   00001D   7910         MOV     R1,#0x10
   \   00001F   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    405            }
    406          
    407            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    408            // this command to 0xFFFF.  So, here we will filter this and replace 
    409            // with 0xFFFD to only send to devices with RX ON.  This includes the 
    410            // network address of interest.
    411            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    412                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   640F         XRL     A,#0xf
   \   000031   6011         JZ      ??ZDP_MatchDescReq_2
   \   000033   8A82         MOV     DPL,R2
   \   000035   8B83         MOV     DPH,R3
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6402         XRL     A,#0x2
   \   000042   7018         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   000044   8A82         MOV     DPL,R2
   \   000046   8B83         MOV     DPH,R3
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F4           CPL     A
   \   00004A   7003         JNZ     ??ZDP_MatchDescReq_4
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F4           CPL     A
   \                     ??ZDP_MatchDescReq_4:
   \   00004F   700B         JNZ     ??ZDP_MatchDescReq_3
    413            {
    414              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000051   8A82         MOV     DPL,R2
   \   000053   8B83         MOV     DPH,R3
   \   000055   74FD         MOV     A,#-0x3
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   74FF         MOV     A,#-0x1
   \   00005B   F0           MOVX    @DPTR,A
    415            }
    416            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   00005C   74FF         MOV     A,#-0x1
   \   00005E   6C           XRL     A,R4
   \   00005F   7003         JNZ     ??ZDP_MatchDescReq_5
   \   000061   74FF         MOV     A,#-0x1
   \   000063   6D           XRL     A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   000064   7004         JNZ     ??ZDP_MatchDescReq_6
    417            {
    418              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000066   7CFD         MOV     R4,#-0x3
   \   000068   7DFF         MOV     R5,#-0x1
    419            }
    420            
    421            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   00006A   EC           MOV     A,R4
   \   00006B   8882         MOV     DPL,R0
   \   00006D   8983         MOV     DPH,R1
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
    422            *pBuf++ = HI_UINT16( nwkAddr );
   \   000071   ED           MOV     A,R5
   \   000072   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000075   740E         MOV     A,#0xe
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   12....       LCALL   ?Subroutine28 & 0xFFFF
    423          
    424            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
    425            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_26:
   \   00007D   A3           INC     DPTR
    426          
    427            *pBuf++ = NumInClusters; // Input cluster list
   \   00007E   EE           MOV     A,R6
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   08           INC     R0
   \   000082   08           INC     R0
   \   000083   08           INC     R0
   \   000084   A983         MOV     R1,DPH
    428            if ( NumInClusters )
   \   000086   6011         JZ      ??ZDP_MatchDescReq_7
    429            {
    430              for (i=0; i<NumInClusters; ++i)  {
   \   000088   75..00       MOV     ?V0 + 1,#0x0
   \   00008B   7410         MOV     A,#0x10
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?Subroutine33 & 0xFFFF
    431                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_35:
   \   000093   12....       LCALL   ?Subroutine10 & 0xFFFF
    432                *pBuf++ = HI_UINT16( InClusterList[i] );
    433              }
    434            }
   \                     ??CrossCallReturnLabel_6:
   \   000096   9E           SUBB    A,R6
   \   000097   40FA         JC      ??CrossCallReturnLabel_35
    435          
    436            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_7:
   \   000099   8882         MOV     DPL,R0
   \   00009B   8983         MOV     DPH,R1
   \   00009D   E5..         MOV     A,?V0 + 0
   \   00009F   12....       LCALL   ??Subroutine116_0 & 0xFFFF
    437            if ( NumOutClusters )
   \                     ??CrossCallReturnLabel_213:
   \   0000A2   6012         JZ      ??ZDP_MatchDescReq_8
    438            {
    439              for (i=0; i<NumOutClusters; ++i)  {
   \   0000A4   75..00       MOV     ?V0 + 1,#0x0
   \   0000A7   7413         MOV     A,#0x13
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL   ?Subroutine33 & 0xFFFF
    440                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_36:
   \   0000AF   12....       LCALL   ?Subroutine10 & 0xFFFF
    441                *pBuf++ = HI_UINT16( OutClusterList[i] );
    442              }
    443            }
   \                     ??CrossCallReturnLabel_7:
   \   0000B2   95..         SUBB    A,?V0 + 0
   \   0000B4   40F9         JC      ??CrossCallReturnLabel_36
    444          
    445            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_8:
   \   0000B6                ; Setup parameters for call to function fillAndSend
   \   0000B6   75..06       MOV     ?V0 + 0,#0x6
   \   0000B9   75..00       MOV     ?V0 + 1,#0x0
   \   0000BC   78..         MOV     R0,#?V0 + 0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   EF           MOV     A,R7
   \   0000C2   F9           MOV     R1,A
   \   0000C3   EA           MOV     A,R2
   \   0000C4   FC           MOV     R4,A
   \   0000C5   EB           MOV     A,R3
   \   0000C6   FD           MOV     R5,A
   \   0000C7   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000C9   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000CB   12....       LCALL   ??fillAndSend?relay
   \   0000CE   7402         MOV     A,#0x2
   \   0000D0   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000D3                REQUIRE ?Subroutine1
   \   0000D3                ; // Fall through to label ?Subroutine1
    446          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E5..         MOV     A,?V0 + 1
   \   000002   C3           CLR     C
   \   000003   33           RLC     A
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   E4           CLR     A
   \   000007   33           RLC     A
   \   000008   F5..         MOV     ?V0 + 3,A
   \   00000A   EC           MOV     A,R4
   \   00000B   25..         ADD     A,?V0 + 2
   \   00000D   F5..         MOV     ?V0 + 2,A
   \   00000F   ED           MOV     A,R5
   \   000010   35..         ADDC    A,?V0 + 3
   \   000012   F5..         MOV     ?V0 + 3,A
   \   000014   85..82       MOV     DPL,?V0 + 2
   \   000017   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00001A   85..82       MOV     DPL,?V0 + 2
   \   00001D   85..83       MOV     DPH,?V0 + 3
   \   000020   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000023   05..         INC     ?V0 + 1
   \   000025   E5..         MOV     A,?V0 + 1
   \   000027   C3           CLR     C
   \   000028   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine88_0
   \   000002                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005                REQUIRE ??Subroutine89_0
   \   000005                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   A882         MOV     R0,DPL
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine102_0
   \   000001                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine103_0
   \   000001                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EC           MOV     A,R4
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   ED           MOV     A,R5
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine122_0
   \   000001                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   FE           MOV     R6,A
   \   000001                REQUIRE ??Subroutine123_0
   \   000001                ; // Fall through to label ??Subroutine123_0
    447          
    448          /*********************************************************************
    449           * @fn          ZDP_SimpleDescReq
    450           *
    451           * @brief       This builds and send a NWK_Simple_Desc_req
    452           *              message.  This function sends unicast message to the
    453           *              destination device.
    454           *
    455           * @param       dstAddr - destination address
    456           * @param       nwkAddr - 16 bit address
    457           * @param       epIntf - endpoint/interface
    458           * @param       SecurityEnable - Security Options
    459           *
    460           * @return      afStatus_t
    461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    463                                              byte endPoint, byte SecurityEnable )
    464          
    465          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    466            (void)SecurityEnable;  // Intentionally unreferenced parameter
    467          
    468            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL   ?Subroutine17 & 0xFFFF
    469            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    470            ZDP_TmpBuf[2] = endPoint;
   \                     ??CrossCallReturnLabel_11:
   \   000008   12....       LCALL   ?Subroutine29 & 0xFFFF
    471          
    472            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_28:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV     ?V0 + 0,#0x4
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV     R1,#0x3
   \   000018   02....       LJMP    ??Subroutine85_0 & 0xFFFF
    473          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   A3           INC     DPTR
   \   000004   E9           MOV     A,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
    474          
    475          /*********************************************************************
    476           * @fn          ZDP_UserDescSet
    477           *
    478           * @brief       This builds and send a User_Desc_set message to set
    479           *              the user descriptor.  This function sends unicast
    480           *              message to the destination device.
    481           *
    482           * @param       dstAddr - destination address
    483           * @param       nwkAddr - 16 bit address
    484           * @param       UserDescriptor - user descriptor
    485           * @param       SecurityEnable - Security Options
    486           *
    487           * @return      afStatus_t
    488           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    489          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    490                                    UserDescriptorFormat_t *UserDescriptor,
    491                                    byte SecurityEnable )
    492          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    493            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000C   12....       LCALL   ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00000F   7413         MOV     A,#0x13
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000017   E8           MOV     A,R0
   \   000018   FA           MOV     R2,A
   \   000019   E9           MOV     A,R1
   \   00001A   FB           MOV     R3,A
    494            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    495                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   C3           CLR     C
   \   000021   9410         SUBB    A,#0x10
   \   000023   5005         JNC     ??ZDP_UserDescSet_0
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 6,A
   \   000028   8003         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00002A   75..10       MOV     ?V0 + 6,#0x10
    496            byte addrLen = 2;
    497          
    498            (void)SecurityEnable;  // Intentionally unreferenced parameter
    499          
    500            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   00002D   EC           MOV     A,R4
   \   00002E   85..82       MOV     DPL,?V0 + 2
   \   000031   85..83       MOV     DPH,?V0 + 3
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
    501            *pBuf++ = HI_UINT16( nwkAddr );
   \   000036   ED           MOV     A,R5
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
    502          
    503            *pBuf++ = len;
   \   000039   E5..         MOV     A,?V0 + 6
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   8582..       MOV     ?V0 + 2,DPL
   \   000040   8583..       MOV     ?V0 + 3,DPH
    504            addrLen = 3;
    505          
    506            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
    507            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   000043                ; Setup parameters for call to function osal_memset
   \   000043   F5..         MOV     ?V0 + 4,A
   \   000045   7410         MOV     A,#0x10
   \   000047   C3           CLR     C
   \   000048   95..         SUBB    A,?V0 + 4
   \   00004A   FC           MOV     R4,A
   \   00004B   95E0         SUBB    A,0xE0 /* A   */
   \   00004D   FD           MOV     R5,A
   \   00004E   7920         MOV     R1,#0x20
   \   000050   E9           MOV     A,R1
   \   000051   C0E0         PUSH    A
   \   000053   EC           MOV     A,R4
   \   000054   FE           MOV     R6,A
   \   000055   ED           MOV     A,R5
   \   000056   FF           MOV     R7,A
   \   000057                ; Setup parameters for call to function osal_memcpy
   \   000057   8A82         MOV     DPL,R2
   \   000059   8B83         MOV     DPH,R3
   \   00005B   A3           INC     DPTR
   \   00005C   A982         MOV     R1,DPL
   \   00005E   AA83         MOV     R2,DPH
   \   000060   89..         MOV     ?V0 + 8,R1
   \   000062   8A..         MOV     ?V0 + 9,R2
   \   000064   75..00       MOV     ?V0 + 10,#0x0
   \   000067   78..         MOV     R0,#?V0 + 8
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006C   AC..         MOV     R4,?V0 + 6
   \   00006E   7D00         MOV     R5,#0x0
   \   000070   AA..         MOV     R2,?V0 + 2
   \   000072   AB..         MOV     R3,?V0 + 3
   \   000074   12....       LCALL   ??osal_memcpy?relay
   \   000077   7403         MOV     A,#0x3
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007C   EE           MOV     A,R6
   \   00007D   FC           MOV     R4,A
   \   00007E   EF           MOV     A,R7
   \   00007F   FD           MOV     R5,A
   \   000080   D0E0         POP     A
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   ??osal_memset?relay
    508          
    509            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000086                ; Setup parameters for call to function fillAndSend
   \   000086   75..14       MOV     ?V0 + 2,#0x14
   \   000089   75..00       MOV     ?V0 + 3,#0x0
   \   00008C   78..         MOV     R0,#?V0 + 2
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   7913         MOV     R1,#0x13
   \   000093   AC..         MOV     R4,?V0 + 0
   \   000095   AD..         MOV     R5,?V0 + 1
   \   000097   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000099   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00009B   12....       LCALL   ??fillAndSend?relay
   \   00009E   7402         MOV     A,#0x2
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A3   7F0B         MOV     R7,#0xb
   \   0000A5   02....       LJMP    ?BANKED_LEAVE_XDATA
    510          }
    511          
    512          /*********************************************************************
    513           * @fn          ZDP_ServerDiscReq
    514           *
    515           * @brief       Build and send a Server_Discovery_req request message.
    516           *
    517           * @param       serverMask - 16-bit bit-mask of server services being sought.
    518           * @param       SecurityEnable - Security Options
    519           *
    520           * @return      afStatus_t
    521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    522          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    523          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine41 & 0xFFFF
    524            uint8 *pBuf = ZDP_TmpBuf;
    525            zAddrType_t dstAddr;
    526          
    527            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_247:
   \   00000D   7408         MOV     A,#0x8
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine49 & 0xFFFF
    528            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    529          
    530            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_61:
   \   000015   EA           MOV     A,R2
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
    531            *pBuf = HI_UINT16( serverMask );
   \   00001C   EB           MOV     A,R3
   \   00001D   F0           MOVX    @DPTR,A
    532          
    533            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    534                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00001E   EE           MOV     A,R6
   \   00001F   90....       MOV     DPTR,#ZDP_TxOptions
   \   000022   6004         JZ      ??ZDP_ServerDiscReq_0
   \   000024   7440         MOV     A,#0x40
   \   000026   8001         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000028   E4           CLR     A
   \                     ??ZDP_ServerDiscReq_1:
   \   000029   F0           MOVX    @DPTR,A
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..15       MOV     ?V0 + 0,#0x15
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7902         MOV     R1,#0x2
   \   000037   E9           MOV     A,R1
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   AC82         MOV     R4,DPL
   \   00003D   AD83         MOV     R5,DPH
   \   00003F   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000041   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000043   12....       LCALL   ??fillAndSend?relay
   \   000046   7402         MOV     A,#0x2
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   02....       LJMP    ??Subroutine84_0 & 0xFFFF
    535          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    536          
    537          /*********************************************************************
    538           * @fn          ZDP_DeviceAnnce
    539           *
    540           * @brief       This builds and send a Device_Annce message.  This
    541           *              function sends a broadcast message.
    542           *
    543           * @param       nwkAddr - 16 bit address of the device
    544           * @param       IEEEAddr - 64 bit address of the device
    545           * @param       capabilities - device capabilities.  This field is only
    546           *                 sent for v1.1 networks.
    547           * @param       SecurityEnable - Security Options
    548           *
    549           * @return      afStatus_t
    550           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    551          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    552                                        byte capabilities, byte SecurityEnable )
    553          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    554            zAddrType_t dstAddr;
    555            uint8 len;
    556          
    557            (void)SecurityEnable;  // Intentionally unreferenced parameter
    558          
    559            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV     A,#0x8
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine49 & 0xFFFF
    560            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    561          
    562            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_62:
   \   000014   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000017   EA           MOV     A,R2
   \   000018   12....       LCALL   ?Subroutine30 & 0xFFFF
    563            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_95:
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    564            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2402         ADD     A,#0x2
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   ??sAddrExtCpy?relay
    565            len = 2 + Z_EXTADDR_LEN;
    566          
    567            ZDP_TmpBuf[10] = capabilities;
   \   00002C   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   00002F   C8           XCH     A,R0
   \   000030   240A         ADD     A,#0xa
   \   000032   F582         MOV     DPL,A
   \   000034   E8           MOV     A,R0
   \   000035   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000038   EE           MOV     A,R6
   \   000039   F0           MOVX    @DPTR,A
    568            len++;
    569          
    570            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..13       MOV     ?V0 + 0,#0x13
   \   00003D   75..00       MOV     ?V0 + 1,#0x0
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   790B         MOV     R1,#0xb
   \   000047   02....       LJMP    ?Subroutine6 & 0xFFFF
    571          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine90_0
   \   000001                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine104_0
   \   000003                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine125_0
   \   000003                ; // Fall through to label ??Subroutine125_0
    572          
    573          /*********************************************************************
    574           * Address Responses
    575           */
    576          
    577          /*********************************************************************
    578           * @fn      zdpProcessAddrReq
    579           *
    580           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    581           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    582           *
    583           * @param   inMsg - incoming message
    584           *
    585           * @return  none
    586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    587          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    588          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
    589            associated_devices_t *pAssoc;
    590            uint8 reqType;
    591            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   75..FE       MOV     ?V0 + 2,#-0x2
   \   000011   75..FF       MOV     ?V0 + 3,#-0x1
    592            uint8 *ieee = NULL;
   \   000014   75..00       MOV     ?V0 + 0,#0x0
   \   000017   75..00       MOV     ?V0 + 1,#0x0
    593          
    594            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   00001A   EA           MOV     A,R2
   \   00001B   240C         ADD     A,#0xc
   \   00001D   F582         MOV     DPL,A
   \   00001F   EB           MOV     A,R3
   \   000020   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000023   7004         JNZ     ??zdpProcessAddrReq_0
   \   000025   7808         MOV     R0,#0x8
   \   000027   8002         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000029   7802         MOV     R0,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   00002B   EA           MOV     A,R2
   \   00002C   2413         ADD     A,#0x13
   \   00002E   F582         MOV     DPL,A
   \   000030   EB           MOV     A,R3
   \   000031   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000034   28           ADD     A,R0
   \   000035   FA           MOV     R2,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   3400         ADDC    A,#0x0
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   F583         MOV     DPH,A
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V0 + 6,A
    595          
    596            if ( inMsg->clusterID == NWK_addr_req )
   \   000041   E5..         MOV     A,?V0 + 4
   \   000043   240C         ADD     A,#0xc
   \   000045   F582         MOV     DPL,A
   \   000047   EB           MOV     A,R3
   \   000048   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   00004B   49           ORL     A,R1
   \   00004C   704C         JNZ     ??zdpProcessAddrReq_2
    597          
    598            {
    599              ieee = inMsg->asdu;
   \   00004E   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000051   12....       LCALL   ??Subroutine115_0 & 0xFFFF
    600          
    601              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \                     ??CrossCallReturnLabel_205:
   \   000054                ; Setup parameters for call to function sAddrExtCmp
   \   000054   AC..         MOV     R4,?V0 + 0
   \   000056   FD           MOV     R5,A
   \   000057   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000059   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   00005B   12....       LCALL   ??sAddrExtCmp?relay
   \   00005E   E9           MOV     A,R1
   \   00005F   6006         JZ      ??zdpProcessAddrReq_3
    602              {
    603                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000061   12....       LCALL   ?Subroutine13 & 0xFFFF
    604              }
   \                     ??CrossCallReturnLabel_110:
   \   000064   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    605              // Handle response for sleeping end devices
    606              else if ( (ZSTACK_ROUTER_BUILD)
    607                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    608                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_3:
   \   000067                ; Setup parameters for call to function AssocGetWithExt
   \   000067   AA..         MOV     R2,?V0 + 0
   \   000069   AB..         MOV     R3,?V0 + 1
   \   00006B   12....       LCALL   ??AssocGetWithExt?relay
   \   00006E   8A..         MOV     ?V0 + 8,R2
   \   000070   8B..         MOV     ?V0 + 9,R3
   \   000072   A8..         MOV     R0,?V0 + 8
   \   000074   A9..         MOV     R1,?V0 + 9
   \   000076   E8           MOV     A,R0
   \   000077   49           ORL     A,R1
   \   000078   7003         JNZ     $+5
   \   00007A   02....       LJMP    ??zdpProcessAddrReq_5 & 0xFFFF
   \   00007D   8882         MOV     DPL,R0
   \   00007F   8983         MOV     DPH,R1
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   6401         XRL     A,#0x1
   \   000088   6003         JZ      $+5
   \   00008A   02....       LJMP    ??zdpProcessAddrReq_5 & 0xFFFF
    609              {
    610                aoi = pAssoc->shortAddr;
   \   00008D   8882         MOV     DPL,R0
   \   00008F   8983         MOV     DPH,R1
   \   000091   12....       LCALL   ??Subroutine93_0 & 0xFFFF
    611                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??CrossCallReturnLabel_107:
   \   000094   E5..         MOV     A,?V0 + 6
   \   000096   707D         JNZ     ??zdpProcessAddrReq_6
   \   000098   807E         SJMP    ??zdpProcessAddrReq_4
    612                  reqType = 0xFF; // Force Invalid
    613              }
    614            }
   \                     ??zdpProcessAddrReq_2:
   \   00009A   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00009D   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000A0   FA           MOV     R2,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F9           MOV     R1,A
   \   0000A4   EA           MOV     A,R2
   \   0000A5   2400         ADD     A,#0x0
   \   0000A7   F5..         MOV     ?V0 + 2,A
   \   0000A9   E4           CLR     A
   \   0000AA   39           ADDC    A,R1
   \   0000AB   F5..         MOV     ?V0 + 3,A
    615            else  // if ( inMsg->clusterID == IEEE_addr_req )
    616            {
    617              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    618          
    619              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   0000AD   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   65..         XRL     A,?V0 + 2
   \   0000B3   7004         JNZ     ??zdpProcessAddrReq_7
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_7:
   \   0000B9   7008         JNZ     ??zdpProcessAddrReq_8
    620              {
    621                ieee = saveExtAddr;
   \   0000BB   75....       MOV     ?V0 + 0,#saveExtAddr & 0xff
   \   0000BE   75....       MOV     ?V0 + 1,#(saveExtAddr >> 8) & 0xff
   \   0000C1   8055         SJMP    ??zdpProcessAddrReq_4
    622              }
    623              else if ( (ZSTACK_ROUTER_BUILD)
    624                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    625                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_8:
   \   0000C3                ; Setup parameters for call to function AssocGetWithShort
   \   0000C3   AB..         MOV     R3,?V0 + 3
   \   0000C5   12....       LCALL   ??AssocGetWithShort?relay
   \   0000C8   8A..         MOV     ?V0 + 8,R2
   \   0000CA   8B..         MOV     ?V0 + 9,R3
   \   0000CC   A8..         MOV     R0,?V0 + 8
   \   0000CE   A9..         MOV     R1,?V0 + 9
   \   0000D0   E8           MOV     A,R0
   \   0000D1   49           ORL     A,R1
   \   0000D2   6056         JZ      ??zdpProcessAddrReq_5
   \   0000D4   8882         MOV     DPL,R0
   \   0000D6   8983         MOV     DPH,R1
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   6401         XRL     A,#0x1
   \   0000DF   7049         JNZ     ??zdpProcessAddrReq_5
    626              {
    627                AddrMgrEntry_t addrEntry;
    628                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000E1   7401         MOV     A,#0x1
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   E4           CLR     A
   \   0000E7   12....       LCALL   ?Subroutine56 & 0xFFFF
    629                addrEntry.index = pAssoc->addrIdx;
   \                     ??CrossCallReturnLabel_75:
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   0000EF   740C         MOV     A,#0xc
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   12....       LCALL   ??Subroutine109_0 & 0xFFFF
    630                if ( AddrMgrEntryGet( &addrEntry ) )
   \                     ??CrossCallReturnLabel_160:
   \   0000F7                ; Setup parameters for call to function AddrMgrEntryGet
   \   0000F7   7401         MOV     A,#0x1
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   AA82         MOV     R2,DPL
   \   0000FE   AB83         MOV     R3,DPH
   \   000100   12....       LCALL   ??AddrMgrEntryGet?relay
   \   000103   E9           MOV     A,R1
   \   000104   600B         JZ      ??zdpProcessAddrReq_9
    631                {
    632                  ieee = addrEntry.extAddr;
   \   000106   7404         MOV     A,#0x4
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   8582..       MOV     ?V0 + 0,DPL
   \   00010E   8583..       MOV     ?V0 + 1,DPH
    633                }
    634          
    635                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_9:
   \   000111   E5..         MOV     A,?V0 + 6
   \   000113   6003         JZ      ??zdpProcessAddrReq_4
    636                  reqType = 0xFF; // Force Invalid
   \                     ??zdpProcessAddrReq_6:
   \   000115   75..FF       MOV     ?V0 + 6,#-0x1
    637              }
    638            }
    639          
    640            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   000118   74FE         MOV     A,#-0x2
   \   00011A   65..         XRL     A,?V0 + 2
   \   00011C   7004         JNZ     ??zdpProcessAddrReq_10
   \   00011E   74FF         MOV     A,#-0x1
   \   000120   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_10:
   \   000122   6006         JZ      ??zdpProcessAddrReq_5
   \   000124   E5..         MOV     A,?V0 + 0
   \   000126   45..         ORL     A,?V0 + 1
   \   000128   7010         JNZ     ??zdpProcessAddrReq_11
   \                     ??zdpProcessAddrReq_5:
   \   00012A   E5..         MOV     A,?V0 + 4
   \   00012C   240B         ADD     A,#0xb
   \   00012E   F582         MOV     DPL,A
   \   000130   E5..         MOV     A,?V0 + 5
   \   000132   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000135   6003         JZ      $+5
   \   000137   02....       LJMP    ??zdpProcessAddrReq_12 & 0xFFFF
    641            {
    642              uint8 stat;
    643              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_11:
   \   00013A   12....       LCALL   ?Subroutine35 & 0xFFFF
    644              // Status + IEEE-Addr + Nwk-Addr.
    645              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \                     ??CrossCallReturnLabel_244:
   \   00013D   75..0B       MOV     ?V0 + 8,#0xb
    646              
    647              // If aoi and iee are both setup, we found results
    648              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   000140   74FE         MOV     A,#-0x2
   \   000142   65..         XRL     A,?V0 + 2
   \   000144   7004         JNZ     ??zdpProcessAddrReq_13
   \   000146   74FF         MOV     A,#-0x1
   \   000148   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_13:
   \   00014A   601A         JZ      ??zdpProcessAddrReq_14
   \   00014C   E5..         MOV     A,?V0 + 0
   \   00014E   45..         ORL     A,?V0 + 1
   \   000150   6014         JZ      ??zdpProcessAddrReq_14
    649              {
    650                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED)) 
    651                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   000152   E5..         MOV     A,?V0 + 6
   \   000154   6006         JZ      ??zdpProcessAddrReq_15
   \   000156   7401         MOV     A,#0x1
   \   000158   65..         XRL     A,?V0 + 6
   \   00015A   7005         JNZ     ??zdpProcessAddrReq_16
   \                     ??zdpProcessAddrReq_15:
   \   00015C   75..00       MOV     ?V0 + 7,#0x0
   \   00015F   8018         SJMP    ??zdpProcessAddrReq_17
   \                     ??zdpProcessAddrReq_16:
   \   000161   75..80       MOV     ?V0 + 7,#-0x80
   \   000164   8013         SJMP    ??zdpProcessAddrReq_17
    652              }
    653              else 
    654              {
    655                // not found and the req was unicast to this device
    656                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_14:
   \   000166   75..81       MOV     ?V0 + 7,#-0x7f
    657                
    658                // Fill in the missing field with this device's address
    659                if ( inMsg->clusterID == NWK_addr_req )
   \   000169   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00016C   7005         JNZ     ??zdpProcessAddrReq_18
    660                {
    661                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00016E   12....       LCALL   ?Subroutine13 & 0xFFFF
    662                }
   \                     ??CrossCallReturnLabel_111:
   \   000171   8006         SJMP    ??zdpProcessAddrReq_17
    663                else
    664                {
    665                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_18:
   \   000173   75....       MOV     ?V0 + 0,#saveExtAddr & 0xff
   \   000176   75....       MOV     ?V0 + 1,#(saveExtAddr >> 8) & 0xff
    666                }
    667              }
    668          
    669              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_17:
   \   000179   8E82         MOV     DPL,R6
   \   00017B   8F83         MOV     DPH,R7
   \   00017D   E5..         MOV     A,?V0 + 7
   \   00017F   F0           MOVX    @DPTR,A
   \   000180   A3           INC     DPTR
    670          
    671              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   000181                ; Setup parameters for call to function sAddrExtCpy
   \   000181   AC..         MOV     R4,?V0 + 0
   \   000183   AD..         MOV     R5,?V0 + 1
   \   000185   AA82         MOV     R2,DPL
   \   000187   AB83         MOV     R3,DPH
   \   000189   12....       LCALL   ??sAddrExtCpy?relay
   \   00018C   8A..         MOV     ?V0 + 0,R2
   \   00018E   8B..         MOV     ?V0 + 1,R3
   \   000190   AE..         MOV     R6,?V0 + 0
   \   000192   AF..         MOV     R7,?V0 + 1
    672          
    673              *pBuf++ = LO_UINT16( aoi );
   \   000194   8E82         MOV     DPL,R6
   \   000196   8F83         MOV     DPH,R7
   \   000198   E5..         MOV     A,?V0 + 2
   \   00019A   F0           MOVX    @DPTR,A
   \   00019B   A3           INC     DPTR
    674              *pBuf++ = HI_UINT16( aoi );
   \   00019C   E5..         MOV     A,?V0 + 3
   \   00019E   12....       LCALL   ??Subroutine111_0 & 0xFFFF
    675          
    676              if ( ZSTACK_ROUTER_BUILD )
    677              {
    678                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    679                     && (stat == ZDP_SUCCESS) )
   \                     ??CrossCallReturnLabel_172:
   \   0001A1   7401         MOV     A,#0x1
   \   0001A3   65..         XRL     A,?V0 + 6
   \   0001A5   6003         JZ      $+5
   \   0001A7   02....       LJMP    ??zdpProcessAddrReq_19 & 0xFFFF
   \   0001AA   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   65..         XRL     A,?V0 + 2
   \   0001B0   7004         JNZ     ??zdpProcessAddrReq_20
   \   0001B2   A3           INC     DPTR
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_20:
   \   0001B6   6003         JZ      $+5
   \   0001B8   02....       LJMP    ??zdpProcessAddrReq_19 & 0xFFFF
   \   0001BB   E5..         MOV     A,?V0 + 7
   \   0001BD   6003         JZ      $+5
   \   0001BF   02....       LJMP    ??zdpProcessAddrReq_19 & 0xFFFF
    680                {
    681                  uint8  cnt = 0;
   \   0001C2   85..82       MOV     DPL,?XSP + 0
   \   0001C5   85..83       MOV     DPH,?XSP + 1
   \   0001C8   E4           CLR     A
   \   0001C9   F0           MOVX    @DPTR,A
    682                  uint16 *list = AssocMakeList( &cnt );
   \   0001CA                ; Setup parameters for call to function AssocMakeList
   \   0001CA   AA82         MOV     R2,DPL
   \   0001CC   AB83         MOV     R3,DPH
   \   0001CE   12....       LCALL   ??AssocMakeList?relay
    683          
    684                  if ( list != NULL )
   \   0001D1   EA           MOV     A,R2
   \   0001D2   4B           ORL     A,R3
   \   0001D3   7003         JNZ     $+5
   \   0001D5   02....       LJMP    ??zdpProcessAddrReq_21 & 0xFFFF
    685                  {
    686                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   0001D8   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0001DB   7004         JNZ     ??zdpProcessAddrReq_22
   \   0001DD   7808         MOV     R0,#0x8
   \   0001DF   8002         SJMP    ??zdpProcessAddrReq_23
   \                     ??zdpProcessAddrReq_22:
   \   0001E1   7802         MOV     R0,#0x2
   \                     ??zdpProcessAddrReq_23:
   \   0001E3   E5..         MOV     A,?V0 + 4
   \   0001E5   2413         ADD     A,#0x13
   \   0001E7   F582         MOV     DPL,A
   \   0001E9   E5..         MOV     A,?V0 + 5
   \   0001EB   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   0001EE   28           ADD     A,R0
   \   0001EF   FC           MOV     R4,A
   \   0001F0   A3           INC     DPTR
   \   0001F1   E0           MOVX    A,@DPTR
   \   0001F2   3400         ADDC    A,#0x0
   \   0001F4   8C82         MOV     DPL,R4
   \   0001F6   F583         MOV     DPH,A
   \   0001F8   A3           INC     DPTR
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   FC           MOV     R4,A
    687                    uint16 *pList = list + idx;
   \   0001FB   C3           CLR     C
   \   0001FC   33           RLC     A
   \   0001FD   F8           MOV     R0,A
   \   0001FE   E4           CLR     A
   \   0001FF   33           RLC     A
   \   000200   F9           MOV     R1,A
   \   000201   EA           MOV     A,R2
   \   000202   28           ADD     A,R0
   \   000203   F8           MOV     R0,A
   \   000204   EB           MOV     A,R3
   \   000205   39           ADDC    A,R1
   \   000206   F9           MOV     R1,A
    688          
    689                    // NumAssocDev field is only present on success.
    690                    if ( cnt > idx )
   \   000207   85..82       MOV     DPL,?XSP + 0
   \   00020A   85..83       MOV     DPH,?XSP + 1
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   FD           MOV     R5,A
   \   00020F   EC           MOV     A,R4
   \   000210   C3           CLR     C
   \   000211   9D           SUBB    A,R5
   \   000212   500C         JNC     ??zdpProcessAddrReq_24
    691                    {
    692                      cnt -= idx;
   \   000214   E0           MOVX    A,@DPTR
   \   000215   C3           CLR     C
   \   000216   9C           SUBB    A,R4
   \   000217   F0           MOVX    @DPTR,A
    693                      len += (cnt * sizeof( uint16 ));
   \   000218   C3           CLR     C
   \   000219   33           RLC     A
   \   00021A   240B         ADD     A,#0xb
   \   00021C   F5..         MOV     ?V0 + 8,A
   \   00021E   8002         SJMP    ??zdpProcessAddrReq_25
    694                    }
    695                    else
    696                    {
    697                      cnt = 0;
   \                     ??zdpProcessAddrReq_24:
   \   000220   E4           CLR     A
   \   000221   F0           MOVX    @DPTR,A
    698                    }
    699                    *pBuf++ = cnt;
   \                     ??zdpProcessAddrReq_25:
   \   000222   12....       LCALL   ?Subroutine36 & 0xFFFF
    700                    len++;
    701          
    702                    // StartIndex field is only present if NumAssocDev field is non-zero.
    703                    *pBuf++ = idx;
   \                     ??CrossCallReturnLabel_40:
   \   000225   EC           MOV     A,R4
   \   000226   F0           MOVX    @DPTR,A
   \   000227   A3           INC     DPTR
   \   000228   0E           INC     R6
   \   000229   0E           INC     R6
   \   00022A   AF83         MOV     R7,DPH
    704                    len++;
   \   00022C   05..         INC     ?V0 + 8
   \   00022E   05..         INC     ?V0 + 8
   \   000230   801A         SJMP    ??zdpProcessAddrReq_26
    705          
    706                    while ( cnt != 0 )
    707                    {
    708                      *pBuf++ = LO_UINT16( *pList );
   \                     ??zdpProcessAddrReq_27:
   \   000232   12....       LCALL   ?Subroutine24 & 0xFFFF
    709                      *pBuf++ = HI_UINT16( *pList );
   \                     ??CrossCallReturnLabel_20:
   \   000235   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000238   0E           INC     R6
   \   000239   AF83         MOV     R7,DPH
    710                      pList++;
   \   00023B   E8           MOV     A,R0
   \   00023C   2402         ADD     A,#0x2
   \   00023E   F8           MOV     R0,A
   \   00023F   E9           MOV     A,R1
   \   000240   3400         ADDC    A,#0x0
   \   000242   F9           MOV     R1,A
    711                      cnt--;
   \   000243   85..82       MOV     DPL,?XSP + 0
   \   000246   85..83       MOV     DPH,?XSP + 1
   \   000249   E0           MOVX    A,@DPTR
   \   00024A   14           DEC     A
   \   00024B   F0           MOVX    @DPTR,A
    712                    }
   \                     ??zdpProcessAddrReq_26:
   \   00024C   85..82       MOV     DPL,?XSP + 0
   \   00024F   85..83       MOV     DPH,?XSP + 1
   \   000252   E0           MOVX    A,@DPTR
   \   000253   70DD         JNZ     ??zdpProcessAddrReq_27
    713          
    714                    osal_mem_free( (uint8 *)list );
   \   000255                ; Setup parameters for call to function osal_mem_free
   \   000255   12....       LCALL   ??osal_mem_free?relay
   \   000258   8009         SJMP    ??zdpProcessAddrReq_19
    715                  }
    716                  else
    717                  {
    718                    // NumAssocDev field is only present on success.
    719                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_21:
   \   00025A   8E82         MOV     DPL,R6
   \   00025C   8F83         MOV     DPH,R7
   \   00025E   E4           CLR     A
   \   00025F   F0           MOVX    @DPTR,A
    720                    len++;
   \   000260   75..0C       MOV     ?V0 + 8,#0xc
    721                  }
    722                }
    723              }
    724          
    725              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_19:
   \   000263   90....       MOV     DPTR,#ZDP_TxOptions
   \   000266   7410         MOV     A,#0x10
   \   000268   F0           MOVX    @DPTR,A
    726              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   000269                ; Setup parameters for call to function fillAndSend
   \   000269   E5..         MOV     A,?V0 + 4
   \   00026B   240C         ADD     A,#0xc
   \   00026D   F582         MOV     DPL,A
   \   00026F   E5..         MOV     A,?V0 + 5
   \   000271   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000274   F5..         MOV     ?V0 + 0,A
   \   000276   A3           INC     DPTR
   \   000277   E0           MOVX    A,@DPTR
   \   000278   4480         ORL     A,#0x80
   \   00027A   F5..         MOV     ?V0 + 1,A
   \   00027C   78..         MOV     R0,#?V0 + 0
   \   00027E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000281   A9..         MOV     R1,?V0 + 8
   \   000283   E5..         MOV     A,?V0 + 4
   \   000285   2402         ADD     A,#0x2
   \   000287   FC           MOV     R4,A
   \   000288   E5..         MOV     A,?V0 + 5
   \   00028A   3400         ADDC    A,#0x0
   \   00028C   FD           MOV     R5,A
   \   00028D   E5..         MOV     A,?V0 + 4
   \   00028F   240F         ADD     A,#0xf
   \   000291   FA           MOV     R2,A
   \   000292   E5..         MOV     A,?V0 + 5
   \   000294   3400         ADDC    A,#0x0
   \   000296   FB           MOV     R3,A
   \   000297   12....       LCALL   ??fillAndSend?relay
   \   00029A   7402         MOV     A,#0x2
   \   00029C   12....       LCALL   ?DEALLOC_XSTACK8
    727              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00029F   90....       MOV     DPTR,#ZDP_TxOptions
   \   0002A2   E4           CLR     A
   \   0002A3   F0           MOVX    @DPTR,A
    728            }
    729          }
   \                     ??zdpProcessAddrReq_12:
   \   0002A4   740E         MOV     A,#0xe
   \   0002A6   80..         SJMP    ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   240C         ADD     A,#0xc
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 5
   \   000008                REQUIRE ??Subroutine91_0
   \   000008                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004                REQUIRE ??Subroutine92_0
   \   000004                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000003                REQUIRE ??Subroutine93_0
   \   000003                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine95_0
   \   000003                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003                REQUIRE ??Subroutine105_0
   \   000003                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AE82         MOV     R6,DPL
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine110_0
   \   000001                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   2413         ADD     A,#0x13
   \   000004                REQUIRE ??Subroutine117_0
   \   000004                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine118_0
   \   000003                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine121_0
   \   000003                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
    730          
    731          /*********************************************************************
    732           * @fn          ZDP_NodeDescMsg
    733           *
    734           * @brief       Builds and sends a Node Descriptor message, unicast to the
    735           *              specified device.
    736           *
    737           * @param       inMsg - incoming message
    738           * @param       nwkAddr - 16 bit network address for device
    739           * @param       pNodeDesc - pointer to the node descriptor
    740           *
    741           * @return      afStatus_t
    742           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    743          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    744                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    745          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    746            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   12....       LCALL   ??Subroutine123_0 & 0xFFFF
    747            byte len;
    748          
    749            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    750          
    751            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_263:
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   12....       LCALL   ?Subroutine54 & 0xFFFF
    752          
    753            *pBuf++ = LO_UINT16( nwkAddr );
    754            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_70:
   \   00000F   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000012   740A         MOV     A,#0xa
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine33 & 0xFFFF
    755          
    756            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    757                               (pNodeDesc->UserDescAvail << 4) |
    758                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_37:
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   541F         ANL     A,#0x1f
   \   000021   12....       LCALL   ?Subroutine53 & 0xFFFF
    759          
    760            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_68:
   \   000024   12....       LCALL   ??Subroutine98_0 & 0xFFFF
    761            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_123:
   \   000027   12....       LCALL   ?Subroutine20 & 0xFFFF
    762            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_112:
   \   00002A   12....       LCALL   ??Subroutine96_0 & 0xFFFF
    763            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_114:
   \   00002D   12....       LCALL   ?Subroutine19 & 0xFFFF
    764            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_14:
   \   000030   12....       LCALL   ?Subroutine53 & 0xFFFF
    765            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_69:
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   12....       LCALL   ?Subroutine38 & 0xFFFF
    766            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_119:
   \   00003A   8C82         MOV     DPL,R4
   \   00003C   8D83         MOV     DPH,R5
   \   00003E   12....       LCALL   ?Subroutine15 & 0xFFFF
    767          
    768            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_131:
   \   000041   2408         ADD     A,#0x8
   \   000043   FE           MOV     R6,A
   \   000044   ED           MOV     A,R5
   \   000045   3400         ADDC    A,#0x0
   \   000047   FF           MOV     R7,A
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   12....       LCALL   ??Subroutine97_0 & 0xFFFF
    769            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_117:
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   12....       LCALL   ?Subroutine20 & 0xFFFF
    770            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_113:
   \   000056   12....       LCALL   ?Subroutine15 & 0xFFFF
    771            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \                     ??CrossCallReturnLabel_132:
   \   000059   240B         ADD     A,#0xb
   \   00005B   F582         MOV     DPL,A
   \   00005D   ED           MOV     A,R5
   \   00005E   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000061   12....       LCALL   ??Subroutine101_0 & 0xFFFF
    772            *pBuf = pNodeDesc->DescriptorCapability;
   \                     ??CrossCallReturnLabel_134:
   \   000064   240C         ADD     A,#0xc
   \   000066   F582         MOV     DPL,A
   \   000068   ED           MOV     A,R5
   \   000069   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00006C   8882         MOV     DPL,R0
   \   00006E   8983         MOV     DPH,R1
   \   000070   F0           MOVX    @DPTR,A
    773          
    774            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   000071                ; Setup parameters for call to function fillAndSend
   \   000071   75..02       MOV     ?V0 + 0,#0x2
   \   000074   75..80       MOV     ?V0 + 1,#-0x80
   \   000077   78..         MOV     R0,#?V0 + 0
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007C   7910         MOV     R1,#0x10
   \   00007E   EA           MOV     A,R2
   \   00007F   2402         ADD     A,#0x2
   \   000081   FC           MOV     R4,A
   \   000082   EB           MOV     A,R3
   \   000083   3400         ADDC    A,#0x0
   \   000085   FD           MOV     R5,A
   \   000086   EA           MOV     A,R2
   \   000087   240F         ADD     A,#0xf
   \   000089   FA           MOV     R2,A
   \   00008A   EB           MOV     A,R3
   \   00008B                REQUIRE ?Subroutine7
   \   00008B                ; // Fall through to label ?Subroutine7
    775          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   02....       LJMP    ??Subroutine86_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine96_0
   \   000001                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EC           MOV     A,R4
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   ED           MOV     A,R5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine97_0
   \   000001                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine100_0
   \   000006                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine101_0
   \   000001                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000003   EC           MOV     A,R4
   \   000004   22           RET
    776          
    777          /*********************************************************************
    778           * @fn          ZDP_PowerDescMsg
    779           *
    780           * @brief       Builds and sends a Power Descriptor message, unicast to the
    781           *              specified device.
    782           *
    783           * @param       inMsg - incoming message (request)
    784           * @param       nwkAddr - 16 bit network address for device
    785           * @param       pPowerDesc - pointer to the node descriptor
    786           *
    787           * @return      afStatus_t
    788           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    789          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    790                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    791          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    792            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   12....       LCALL   ?Subroutine43 & 0xFFFF
    793            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    794          
    795            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_152:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   12....       LCALL   ?Subroutine54 & 0xFFFF
    796          
    797            *pBuf++ = LO_UINT16( nwkAddr );
    798            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_71:
   \   000013   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000016   740A         MOV     A,#0xa
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine40 & 0xFFFF
    799          
    800            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    801                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_47:
   \   00001E   12....       LCALL   ??Subroutine119_0 & 0xFFFF
    802            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    803                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_235:
   \   000021   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000024   540F         ANL     A,#0xf
   \   000026   F9           MOV     R1,A
   \   000027   740C         MOV     A,#0xc
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?US_SHR
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   C4           SWAP    A
   \   000031   49           ORL     A,R1
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   F0           MOVX    @DPTR,A
    804          
    805            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..03       MOV     ?V0 + 0,#0x3
   \   00003A   75..80       MOV     ?V0 + 1,#-0x80
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7905         MOV     R1,#0x5
   \   000044   EE           MOV     A,R6
   \   000045   2402         ADD     A,#0x2
   \   000047   FC           MOV     R4,A
   \   000048   EF           MOV     A,R7
   \   000049   3400         ADDC    A,#0x0
   \   00004B   FD           MOV     R5,A
   \   00004C   EE           MOV     A,R6
   \   00004D   240F         ADD     A,#0xf
   \   00004F   FA           MOV     R2,A
   \   000050   EF           MOV     A,R7
   \   000051   80..         SJMP    ?Subroutine7
    806          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AA82         MOV     R2,DPL
   \   000004   AB83         MOV     R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine106_0
   \   000003                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   0A           INC     R2
   \   000007   AB83         MOV     R3,DPH
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   22           RET
    807          
    808          /*********************************************************************
    809           * @fn          ZDP_SimpleDescMsg
    810           *
    811           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    812           *              specified device.
    813           *
    814           * @param       inMsg - incoming message (request)
    815           * @param       Status - message status (ZDP_SUCCESS or other)
    816           * @param       pSimpleDesc - pointer to the node descriptor
    817           *
    818           * @return      afStatus_t
    819           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    820          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    821                                        SimpleDescriptionFormat_t *pSimpleDesc )
    822          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   12....       LCALL   ?Subroutine41 & 0xFFFF
    823            uint8 *pBuf = ZDP_TmpBuf;
    824            uint8 i, len;
    825          
    826            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_248:
   \   00000C   EE           MOV     A,R6
   \   00000D   702E         JNZ     ??ZDP_SimpleDescMsg_0
   \   00000F   EC           MOV     A,R4
   \   000010   4D           ORL     A,R5
   \   000011   602A         JZ      ??ZDP_SimpleDescMsg_0
    827            {
    828              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    829              len = 1 + 2 + 1 + 8;
    830              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   000013   8C82         MOV     DPL,R4
   \   000015   8D83         MOV     DPH,R5
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FA           MOV     R2,A
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   2A           ADD     A,R2
   \   00002E   C3           CLR     C
   \   00002F   33           RLC     A
   \   000030   240C         ADD     A,#0xc
   \   000032   FA           MOV     R2,A
    831            }
    832            else
    833            {
    834              len = 1 + 2 + 1; // Status + desc length
    835            }
    836            if ( len >= ZDP_BUF_SZ-1 )
   \   000033   C3           CLR     C
   \   000034   944F         SUBB    A,#0x4f
   \   000036   4007         JC      ??ZDP_SimpleDescMsg_1
    837            {
    838              return afStatus_MEM_FAIL;
   \   000038   7910         MOV     R1,#0x10
   \   00003A   02....       LJMP    ??ZDP_SimpleDescMsg_2 & 0xFFFF
    839            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   00003D   7A04         MOV     R2,#0x4
    840          
    841            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   00003F   12....       LCALL   ?Subroutine46 & 0xFFFF
    842          
    843            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_217:
   \   000042   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000045   12....       LCALL   ??Subroutine97_0 & 0xFFFF
    844            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_118:
   \   000048   90....       MOV     DPTR,#ZDAppNwkAddr + 1
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   8882         MOV     DPL,R0
   \   00004E   8983         MOV     DPH,R1
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
    845          
    846            if ( len > 4 )
   \   000052   EA           MOV     A,R2
   \   000053   C3           CLR     C
   \   000054   9405         SUBB    A,#0x5
   \   000056   5003         JNC     $+5
   \   000058   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    847            {
    848              *pBuf++ = len - 4;   // Simple descriptor length
   \   00005B   74FC         MOV     A,#-0x4
   \   00005D   2A           ADD     A,R2
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   08           INC     R0
   \   000061   08           INC     R0
   \   000062   A983         MOV     R1,DPH
    849          
    850              *pBuf++ = pSimpleDesc->EndPoint;
   \   000064   12....       LCALL   ?Subroutine21 & 0xFFFF
    851              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_121:
   \   000067   8582..       MOV     ?V0 + 2,DPL
   \   00006A   8583..       MOV     ?V0 + 3,DPH
   \   00006D   12....       LCALL   ??Subroutine99_0 & 0xFFFF
    852              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_130:
   \   000070   12....       LCALL   ??Subroutine100_0 & 0xFFFF
    853              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_133:
   \   000073   2403         ADD     A,#0x3
   \   000075   12....       LCALL   ?Subroutine16 & 0xFFFF
    854              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_128:
   \   000078   12....       LCALL   ?Subroutine19 & 0xFFFF
    855          
    856              *pBuf++ = (byte)(pSimpleDesc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_15:
   \   00007B   C4           SWAP    A
   \   00007C   54F0         ANL     A,#0xf0
   \   00007E   12....       LCALL   ??Subroutine103_0 & 0xFFFF
    857          
    858              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_135:
   \   000081   EC           MOV     A,R4
   \   000082   2406         ADD     A,#0x6
   \   000084   12....       LCALL   ?Subroutine16 & 0xFFFF
    859              if ( pSimpleDesc->AppNumInClusters )
   \                     ??CrossCallReturnLabel_129:
   \   000087   E0           MOVX    A,@DPTR
   \   000088   6024         JZ      ??ZDP_SimpleDescMsg_4
    860              {
    861                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   00008A   7B00         MOV     R3,#0x0
   \   00008C   800F         SJMP    ??CrossCallReturnLabel_0
    862                {
    863                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_5:
   \   00008E   EB           MOV     A,R3
   \   00008F   C3           CLR     C
   \   000090   33           RLC     A
   \   000091   F5..         MOV     ?V0 + 2,A
   \   000093   E4           CLR     A
   \   000094   33           RLC     A
   \   000095   F5..         MOV     ?V0 + 3,A
   \   000097   EC           MOV     A,R4
   \   000098   2407         ADD     A,#0x7
   \   00009A   12....       LCALL   ?Subroutine8 & 0xFFFF
    864                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
    865                }
   \                     ??CrossCallReturnLabel_0:
   \   00009D   8C82         MOV     DPL,R4
   \   00009F   8D83         MOV     DPH,R5
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FF           MOV     R7,A
   \   0000A9   EB           MOV     A,R3
   \   0000AA   C3           CLR     C
   \   0000AB   9F           SUBB    A,R7
   \   0000AC   40E0         JC      ??ZDP_SimpleDescMsg_5
    866              }
    867          
    868              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000AE   EC           MOV     A,R4
   \   0000AF   2409         ADD     A,#0x9
   \   0000B1   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000B4   12....       LCALL   ?Subroutine39 & 0xFFFF
    869              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_45:
   \   0000B7   85..82       MOV     DPL,?V0 + 2
   \   0000BA   85..83       MOV     DPH,?V0 + 3
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   6029         JZ      ??ZDP_SimpleDescMsg_6
    870              {
    871                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   0000C0   7B00         MOV     R3,#0x0
   \                     ??ZDP_SimpleDescMsg_7:
   \   0000C2   8C82         MOV     DPL,R4
   \   0000C4   8D83         MOV     DPH,R5
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   FF           MOV     R7,A
   \   0000D1   EB           MOV     A,R3
   \   0000D2   C3           CLR     C
   \   0000D3   9F           SUBB    A,R7
   \   0000D4   5013         JNC     ??ZDP_SimpleDescMsg_6
    872                {
    873                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   0000D6   EB           MOV     A,R3
   \   0000D7   C3           CLR     C
   \   0000D8   33           RLC     A
   \   0000D9   F5..         MOV     ?V0 + 2,A
   \   0000DB   E4           CLR     A
   \   0000DC   33           RLC     A
   \   0000DD   F5..         MOV     ?V0 + 3,A
   \   0000DF   EC           MOV     A,R4
   \   0000E0   240A         ADD     A,#0xa
   \   0000E2   12....       LCALL   ?Subroutine8 & 0xFFFF
    874                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
    875                }
    876              }
    877            }
   \                     ??CrossCallReturnLabel_1:
   \   0000E5   80DB         SJMP    ??ZDP_SimpleDescMsg_7
    878          
    879            else
    880            {
    881              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   0000E7   E4           CLR     A
   \   0000E8   F0           MOVX    @DPTR,A
    882            }
    883          
    884            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_6:
   \   0000E9                ; Setup parameters for call to function fillAndSend
   \   0000E9   75..04       MOV     ?V0 + 2,#0x4
   \   0000EC   75..80       MOV     ?V0 + 3,#-0x80
   \   0000EF   78..         MOV     R0,#?V0 + 2
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F4   EA           MOV     A,R2
   \   0000F5   F9           MOV     R1,A
   \   0000F6   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000F9   E5..         MOV     A,?V0 + 0
   \   0000FB   240F         ADD     A,#0xf
   \   0000FD   FA           MOV     R2,A
   \   0000FE   E5..         MOV     A,?V0 + 1
   \   000100   3400         ADDC    A,#0x0
   \   000102   FB           MOV     R3,A
   \   000103   12....       LCALL   ??fillAndSend?relay
   \   000106   7402         MOV     A,#0x2
   \   000108   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   00010B   02....       LJMP    ??Subroutine83_0 & 0xFFFF
    885          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004                REQUIRE ??Subroutine98_0
   \   000004                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003                REQUIRE ??Subroutine99_0
   \   000003                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000003   85..82       MOV     DPL,?V0 + 2
   \   000006   85..83       MOV     DPH,?V0 + 3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   ED           MOV     A,R5
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   85..82       MOV     DPL,?V0 + 2
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F5..         MOV     ?V0 + 4,A
   \   000002   ED           MOV     A,R5
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   85..82       MOV     DPL,?V0 + 4
   \   00000A   F583         MOV     DPH,A
   \   00000C   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00000F   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000012   85..82       MOV     DPL,?V0 + 4
   \   000015   85..83       MOV     DPH,?V0 + 5
   \   000018   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00001B   F583         MOV     DPH,A
   \   00001D   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000020   0B           INC     R3
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 2
   \   000003   FF           MOV     R7,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 3
   \   000008   8F82         MOV     DPL,R7
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   EE           MOV     A,R6
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005                REQUIRE ??Subroutine116_0
   \   000005                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000003   22           RET
    886          
    887          /*********************************************************************
    888           * @fn          ZDP_EPRsp
    889           *
    890           * @brief       This builds and send an endpoint list. Used in
    891           *              Active_EP_rsp and Match_Desc_Rsp
    892           *              message.  This function sends unicast message to the
    893           *              requesting device.
    894           *
    895           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    896           * @param       dstAddr - destination address
    897           * @param       Status - message status (ZDP_SUCCESS or other)
    898           * @param       nwkAddr - Device's short address that this response describes
    899           * @param       Count - number of endpoint/interfaces in list
    900           * @param       pEPIntfList - Array of Endpoint/Interfaces
    901           * @param       SecurityEnable - Security Options
    902           *
    903           * @return      afStatus_t
    904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    905          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    906                                  byte Status, uint16 nwkAddr, byte Count,
    907                                  uint8 *pEPList,
    908                                  byte SecurityEnable )
    909          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 2,R2
   \   000014   8B..         MOV     ?V0 + 3,R3
   \   000016   EC           MOV     A,R4
   \   000017   FE           MOV     R6,A
   \   000018   ED           MOV     A,R5
   \   000019   FF           MOV     R7,A
   \   00001A   7410         MOV     A,#0x10
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   7414         MOV     A,#0x14
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine32 & 0xFFFF
    910            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_33:
   \   000029   12....       LCALL   ?Subroutine43 & 0xFFFF
    911            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_153:
   \   00002C   75..04       MOV     ?V0 + 0,#0x4
    912            byte txOptions;
    913          
    914            (void)SecurityEnable;  // Intentionally unreferenced parameter
    915          
    916            if ( MsgType == Match_Desc_rsp )
   \   00002F   7406         MOV     A,#0x6
   \   000031   65..         XRL     A,?V0 + 2
   \   000033   7004         JNZ     ??ZDP_EPRsp_0
   \   000035   7480         MOV     A,#-0x80
   \   000037   65..         XRL     A,?V0 + 3
   \                     ??ZDP_EPRsp_0:
   \   000039   7005         JNZ     ??ZDP_EPRsp_1
    917              txOptions = AF_MSG_ACK_REQUEST;
   \   00003B   75..10       MOV     ?V0 + 1,#0x10
   \   00003E   8003         SJMP    ??ZDP_EPRsp_2
    918            else
    919              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000040   75..00       MOV     ?V0 + 1,#0x0
    920          
    921              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000043   E8           MOV     A,R0
   \   000044   8A82         MOV     DPL,R2
   \   000046   8B83         MOV     DPH,R3
   \   000048   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00004B   7411         MOV     A,#0x11
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   12....       LCALL   ?Subroutine22 & 0xFFFF
    922            *pBuf++ = LO_UINT16( nwkAddr );
    923            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_16:
   \   000053   7413         MOV     A,#0x13
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F9           MOV     R1,A
    924          
    925            *pBuf++ = Count;   // Endpoint/Interface count
   \   00005A   8A82         MOV     DPL,R2
   \   00005C   8B83         MOV     DPH,R3
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   0A           INC     R2
   \   000061   AB83         MOV     R3,DPH
    926          
    927            if ( Count )
   \   000063   601B         JZ      ??ZDP_EPRsp_3
    928            {
    929              len += Count;
   \   000065   7404         MOV     A,#0x4
   \   000067   29           ADD     A,R1
   \   000068   F5..         MOV     ?V0 + 0,A
    930              osal_memcpy( pBuf, pEPList, Count );
   \   00006A                ; Setup parameters for call to function osal_memcpy
   \   00006A   75..00       MOV     ?V0 + 6,#0x0
   \   00006D   78..         MOV     R0,#?V0 + 4
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000072   89..         MOV     ?V0 + 4,R1
   \   000074   AC..         MOV     R4,?V0 + 4
   \   000076   7D00         MOV     R5,#0x0
   \   000078   12....       LCALL   ??osal_memcpy?relay
   \   00007B   7403         MOV     A,#0x3
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
    931            }
    932          
    933            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000080   E5..         MOV     A,?V0 + 1
   \   000082   90....       MOV     DPTR,#ZDP_TxOptions
   \   000085   F0           MOVX    @DPTR,A
   \   000086                ; Setup parameters for call to function fillAndSend
   \   000086   78..         MOV     R0,#?V0 + 2
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   A9..         MOV     R1,?V0 + 0
   \   00008D   EE           MOV     A,R6
   \   00008E   FC           MOV     R4,A
   \   00008F   EF           MOV     A,R7
   \   000090   FD           MOV     R5,A
   \   000091   7402         MOV     A,#0x2
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   AA82         MOV     R2,DPL
   \   000098   AB83         MOV     R3,DPH
   \   00009A   12....       LCALL   ??fillAndSend?relay
   \   00009D   7402         MOV     A,#0x2
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A2   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000A5   E4           CLR     A
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   04           INC     A
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   7F07         MOV     R7,#0x7
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    934          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   0A           INC     R2
   \   000004   0A           INC     R2
   \   000005   AB83         MOV     R3,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E9           MOV     A,R1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET
    935          
    936          /*********************************************************************
    937           * @fn          ZDP_UserDescRsp
    938           *
    939           * @brief       Build and send the User Decriptor Response.
    940           *
    941           *
    942           * @param       dstAddr - destination address
    943           * @param       nwkAddrOfInterest -
    944           * @param       userDesc -
    945           * @param       SecurityEnable - Security Options
    946           *
    947           * @return      ZStatus_t
    948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine94_0
   \   000002                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    949          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    950                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    951                          byte SecurityEnable )
    952          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
    953            uint8 *pBuf = ZDP_TmpBuf;
   \   000016   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000019   7413         MOV     A,#0x13
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000021   88..         MOV     ?V0 + 8,R0
   \   000023   89..         MOV     ?V0 + 9,R1
    954            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    955          
    956            (void)SecurityEnable;  // Intentionally unreferenced parameter
    957          
    958            len += userDesc->len;
   \   000025   8882         MOV     DPL,R0
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   2404         ADD     A,#0x4
   \   00002C   F5..         MOV     ?V0 + 2,A
    959          
    960            *pBuf++ = ZSUCCESS;
   \   00002E   85..82       MOV     DPL,?V0 + 0
   \   000031   85..83       MOV     DPH,?V0 + 1
   \   000034   12....       LCALL   ?Subroutine54 & 0xFFFF
    961          
    962            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
    963            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \                     ??CrossCallReturnLabel_72:
   \   000037   12....       LCALL   ?Subroutine51 & 0xFFFF
    964          
    965            *pBuf++ = userDesc->len;
   \                     ??CrossCallReturnLabel_63:
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   85..82       MOV     DPL,?V0 + 0
   \   00003E   85..83       MOV     DPH,?V0 + 1
   \   000041   12....       LCALL   ?Subroutine51 & 0xFFFF
    966            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_64:
   \   000044   A3           INC     DPTR
   \   000045   A982         MOV     R1,DPL
   \   000047   AA83         MOV     R2,DPH
   \   000049   89..         MOV     ?V0 + 4,R1
   \   00004B   8A..         MOV     ?V0 + 5,R2
   \   00004D   75..00       MOV     ?V0 + 6,#0x0
   \   000050   78..         MOV     R0,#?V0 + 4
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000055   85..82       MOV     DPL,?V0 + 8
   \   000058   85..83       MOV     DPH,?V0 + 9
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FC           MOV     R4,A
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   AA..         MOV     R2,?V0 + 0
   \   000061   AB..         MOV     R3,?V0 + 1
   \   000063   12....       LCALL   ??osal_memcpy?relay
   \   000066   7403         MOV     A,#0x3
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
    967          
    968            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   00006B                ; Setup parameters for call to function fillAndSend
   \   00006B   75..11       MOV     ?V0 + 0,#0x11
   \   00006E   75..80       MOV     ?V0 + 1,#-0x80
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   A9..         MOV     R1,?V0 + 2
   \   000078   EE           MOV     A,R6
   \   000079   FC           MOV     R4,A
   \   00007A   EF           MOV     A,R7
   \   00007B   FD           MOV     R5,A
   \   00007C   7402         MOV     A,#0x2
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   AA82         MOV     R2,DPL
   \   000083   AB83         MOV     R3,DPH
   \   000085   12....       LCALL   ??fillAndSend?relay
   \   000088   7402         MOV     A,#0x2
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008D   02....       LJMP    ?Subroutine3 & 0xFFFF
    969          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V0 + 0,DPL
   \   000005   8583..       MOV     ?V0 + 1,DPH
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   22           RET
    970          
    971          /*********************************************************************
    972           * @fn          ZDP_ServerDiscRsp
    973           *
    974           * @brief       Build and send the Server_Discovery_rsp response.
    975           *
    976           * @param       transID - Transaction sequence number of request.
    977           * @param       dstAddr - Network Destination Address.
    978           * @param       status - Status of response to request.
    979           * @param       aoi - Network Address of Interest of request.
    980           * @param       serverMask - Bit map of service(s) being sought.
    981           * @param       SecurityEnable - Security Options
    982           *
    983           * @return      ZStatus_t
    984           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    985          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
    986                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
    987          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EC           MOV     A,R4
   \   000013   12....       LCALL   ??Subroutine122_0 & 0xFFFF
    988            const byte len = 1  + 2;  // status + aoi + mask.
    989            uint8 *pBuf = ZDP_TmpBuf;
    990            ZStatus_t stat;
    991          
    992            // Intentionally unreferenced parameters
    993            (void)aoi;
    994            (void)SecurityEnable;
    995          
    996            *pBuf++ = status;
   \                     ??CrossCallReturnLabel_249:
   \   000016   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000019   740D         MOV     A,#0xd
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine28 & 0xFFFF
    997          
    998            *pBuf++ = LO_UINT16( serverMask );
    999            *pBuf++ = HI_UINT16( serverMask );
   1000          
   1001            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??CrossCallReturnLabel_27:
   \   000021   90....       MOV     DPTR,#ZDP_TxOptions
   \   000024   7410         MOV     A,#0x10
   \   000026   F0           MOVX    @DPTR,A
   1002            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000027                ; Setup parameters for call to function fillAndSend
   \   000027   75..15       MOV     ?V0 + 0,#0x15
   \   00002A   75..80       MOV     ?V0 + 1,#-0x80
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7903         MOV     R1,#0x3
   \   000034   EA           MOV     A,R2
   \   000035   FC           MOV     R4,A
   \   000036   EB           MOV     A,R3
   \   000037   FD           MOV     R5,A
   \   000038   7402         MOV     A,#0x2
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   AA82         MOV     R2,DPL
   \   00003F   AB83         MOV     R3,DPH
   \   000041   12....       LCALL   ??fillAndSend?relay
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
   1003            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000049   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   1004          
   1005            return ( stat );
   \   00004E   04           INC     A
   \   00004F   02....       LJMP    ??Subroutine87_0 & 0xFFFF
   1006          }
   1007          
   1008          /*********************************************************************
   1009           * @fn          ZDP_GenericRsp
   1010           *
   1011           * @brief       Sends a response message with only the parameter status
   1012           *              byte and the addr of interest for data.
   1013           *              This function sends unicast message to the
   1014           *              requesting device.
   1015           *
   1016           * @param       dstAddr - destination address
   1017           * @param       status  - generic status for response
   1018           * @param       aoi     - address of interest
   1019           * @param       dstAddr - destination address
   1020           * @param       rspId   - response cluster ID
   1021           * @param       SecurityEnable - Security Options
   1022           *
   1023           * @return      afStatus_t
   1024           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1025          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1026                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1027          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   740D         MOV     A,#0xd
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   1028            uint8 len;
   1029          
   1030            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1031          
   1032            ZDP_TmpBuf[0] = status;
   \                     ??CrossCallReturnLabel_207:
   \   00001A   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   00001D   EC           MOV     A,R4
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   740B         MOV     A,#0xb
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   1033            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_254:
   \   000027   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FC           MOV     R4,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F583         MOV     DPH,A
   \   000030   8C82         MOV     DPL,R4
   \   000032   A3           INC     DPTR
   \   000033   E8           MOV     A,R0
   \   000034   F0           MOVX    @DPTR,A
   1034            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \   000035   12....       LCALL   ?Subroutine29 & 0xFFFF
   1035          
   1036            // Length byte
   1037            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_29:
   \   000038   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
   1038            len = 4;
   1039          
   1040            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   00003F                ; Setup parameters for call to function fillAndSend
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   7904         MOV     R1,#0x4
   \   000046   EA           MOV     A,R2
   \   000047   FC           MOV     R4,A
   \   000048   EB           MOV     A,R3
   \   000049   FD           MOV     R5,A
   \   00004A   7402         MOV     A,#0x2
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   AA82         MOV     R2,DPL
   \   000051   AB83         MOV     R3,DPH
   \   000053   12....       LCALL   ??fillAndSend?relay
   \   000056   7402         MOV     A,#0x2
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   7401         MOV     A,#0x1
   \   00005D   02....       LJMP    ??Subroutine87_0 & 0xFFFF
   1041          }
   1042          
   1043          /*********************************************************************
   1044           * Binding
   1045           */
   1046          /*********************************************************************
   1047           * @fn          ZDP_EndDeviceBindReq
   1048           *
   1049           * @brief       This builds and sends a End_Device_Bind_req message.
   1050           *              This function sends a unicast message.
   1051           *
   1052           * @param       dstAddr - destination address
   1053           * @param       LocalCoordinator - short address of local coordinator
   1054           * @param       epIntf - Endpoint/Interface of Simple Desc
   1055           * @param       ProfileID - Profile ID
   1056           *
   1057           *   The Input cluster list is the opposite of what you would think.
   1058           *   This is the output cluster list of this device
   1059           * @param       NumInClusters - number of input clusters
   1060           * @param       InClusterList - input cluster ID list
   1061           *
   1062           *   The Output cluster list is the opposite of what you would think.
   1063           *   This is the input cluster list of this device
   1064           * @param       NumOutClusters - number of output clusters
   1065           * @param       OutClusterList - output cluster ID list
   1066           *
   1067           * @param       SecurityEnable - Security Options
   1068           *
   1069           * @return      afStatus_t
   1070           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1071          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1072                                           uint16 LocalCoordinator,
   1073                                           byte endPoint,
   1074                                           uint16 ProfileID,
   1075                                           byte NumInClusters, cId_t *InClusterList,
   1076                                           byte NumOutClusters, cId_t *OutClusterList,
   1077                                           byte SecurityEnable )
   1078          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   8C..         MOV     ?V0 + 4,R4
   \   00000B   8D..         MOV     ?V0 + 5,R5
   \   00000D   89..         MOV     ?V0 + 3,R1
   1079            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000012   7414         MOV     A,#0x14
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 2,A
   \   00001A   7417         MOV     A,#0x17
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 1,A
   1080            uint8 i, len;
   1081            uint8 *ieeeAddr;
   1082          
   1083            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1084          
   1085            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1086            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1087            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000022   E5..         MOV     A,?V0 + 2
   \   000024   25..         ADD     A,?V0 + 1
   \   000026   C3           CLR     C
   \   000027   33           RLC     A
   \   000028   240F         ADD     A,#0xf
   \   00002A   F5..         MOV     ?V0 + 0,A
   1088          
   1089            if ( len >= ZDP_BUF_SZ-1 )
   \   00002C   C3           CLR     C
   \   00002D   944F         SUBB    A,#0x4f
   \   00002F   4005         JC      ??ZDP_EndDeviceBindReq_0
   1090            {
   1091              return afStatus_MEM_FAIL;
   \   000031   7910         MOV     R1,#0x10
   \   000033   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1092            }
   1093          
   1094            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000036                ; Setup parameters for call to function NLME_GetShortAddr
   \   000036   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000039   EA           MOV     A,R2
   \   00003A   65..         XRL     A,?V0 + 4
   \   00003C   7003         JNZ     ??ZDP_EndDeviceBindReq_2
   \   00003E   EB           MOV     A,R3
   \   00003F   65..         XRL     A,?V0 + 5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000041   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1095            {
   1096              return afStatus_INVALID_PARAMETER;
   \   000043   7902         MOV     R1,#0x2
   \   000045   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1097            }
   1098          
   1099            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   12....       LCALL   ?Subroutine47 & 0xFFFF
   1100            *pBuf++ = HI_UINT16( LocalCoordinator );
   1101          
   1102            ieeeAddr = NLME_GetExtAddr();
   1103            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \                     ??CrossCallReturnLabel_170:
   \   00004F                ; Setup parameters for call to function sAddrExtCpy
   \   00004F                ; Setup parameters for call to function NLME_GetExtAddr
   \   00004F   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000052   EA           MOV     A,R2
   \   000053   FC           MOV     R4,A
   \   000054   EB           MOV     A,R3
   \   000055   FD           MOV     R5,A
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   ??sAddrExtCpy?relay
   \   00005D   8A..         MOV     ?V0 + 4,R2
   \   00005F   8B..         MOV     ?V0 + 5,R3
   \   000061   AE..         MOV     R6,?V0 + 4
   \   000063   AF..         MOV     R7,?V0 + 5
   1104          
   1105            *pBuf++ = endPoint;
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   E5..         MOV     A,?V0 + 3
   \   00006B   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00006E   7412         MOV     A,#0x12
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   1106          
   1107            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_255:
   \   000076   E8           MOV     A,R0
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   1108            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_159:
   \   00007E   A3           INC     DPTR
   1109          
   1110            *pBuf++ = NumInClusters; // Input cluster list
   \   00007F   E5..         MOV     A,?V0 + 2
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   0E           INC     R6
   \   000084   0E           INC     R6
   \   000085   0E           INC     R6
   \   000086   AF83         MOV     R7,DPH
   1111            for ( i = 0; i < NumInClusters; ++i )
   \   000088   7C00         MOV     R4,#0x0
   \   00008A   7415         MOV     A,#0x15
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000092   8003         SJMP    ??CrossCallReturnLabel_8
   1112            {
   1113              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_4:
   \   000094   12....       LCALL   ?Subroutine14 & 0xFFFF
   1114              *pBuf++ = HI_UINT16(InClusterList[i]);
   1115            }
   \                     ??CrossCallReturnLabel_8:
   \   000097   EC           MOV     A,R4
   \   000098   C3           CLR     C
   \   000099   95..         SUBB    A,?V0 + 2
   \   00009B   40F7         JC      ??ZDP_EndDeviceBindReq_4
   1116          
   1117            *pBuf++ = NumOutClusters; // Output cluster list
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   E5..         MOV     A,?V0 + 1
   \   0000A3   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   1118            for ( i = 0; i < NumOutClusters; ++i )
   \                     ??CrossCallReturnLabel_174:
   \   0000A6   7C00         MOV     R4,#0x0
   \   0000A8   7418         MOV     A,#0x18
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   0000B0   8003         SJMP    ??CrossCallReturnLabel_9
   1119            {
   1120              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0000B2   12....       LCALL   ?Subroutine14 & 0xFFFF
   1121              *pBuf++ = HI_UINT16(OutClusterList[i]);
   1122            }
   \                     ??CrossCallReturnLabel_9:
   \   0000B5   EC           MOV     A,R4
   \   0000B6   C3           CLR     C
   \   0000B7   95..         SUBB    A,?V0 + 1
   \   0000B9   40F7         JC      ??ZDP_EndDeviceBindReq_5
   1123          
   1124            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   0000BB                ; Setup parameters for call to function fillAndSend
   \   0000BB   75..20       MOV     ?V0 + 4,#0x20
   \   0000BE   75..00       MOV     ?V0 + 5,#0x0
   \   0000C1   78..         MOV     R0,#?V0 + 4
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C6   A9..         MOV     R1,?V0 + 0
   \   0000C8   AC..         MOV     R4,?V0 + 6
   \   0000CA   AD..         MOV     R5,?V0 + 7
   \   0000CC   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000CE   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000D0   12....       LCALL   ??fillAndSend?relay
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   0000D8   02....       LJMP    ??Subroutine95_0 & 0xFFFF
   1125          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EC           MOV     A,R4
   \   000001   C3           CLR     C
   \   000002   33           RLC     A
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   FB           MOV     R3,A
   \   000007   E8           MOV     A,R0
   \   000008   2A           ADD     A,R2
   \   000009   FA           MOV     R2,A
   \   00000A   E9           MOV     A,R1
   \   00000B   3B           ADDC    A,R3
   \   00000C   FB           MOV     R3,A
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00001C   0C           INC     R4
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 5
   \   000006                REQUIRE ??Subroutine111_0
   \   000006                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   0E           INC     R6
   \   000006   AF83         MOV     R7,DPH
   \   000008   22           RET
   1126          
   1127          /*********************************************************************
   1128           * @fn          ZDP_BindUnbindReq
   1129           *
   1130           * @brief       This builds and send a Bind_req or Unbind_req message
   1131           *              Depending on the ClusterID. This function
   1132           *              sends a unicast message to the local coordinator.
   1133           *
   1134           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1135           * @param       dstAddr - destination address of the message
   1136           * @param       SourceAddr - source 64 bit address of the binding
   1137           * @param       SrcEPIntf - Source endpoint/interface
   1138           * @param       ClusterID - Binding cluster ID
   1139           * @param       DestinationAddr - destination 64 bit addr of binding
   1140           * @param       DstEPIntf - destination endpoint/interface
   1141           * @param       SecurityEnable - Security Options
   1142           *
   1143           * @return      afStatus_t
   1144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1145          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1146                                        uint8 *SourceAddr, byte SrcEndPoint,
   1147                                        cId_t ClusterID,
   1148                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1149                                        byte SecurityEnable )
   1150          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   89..         MOV     ?V0 + 1,R1
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000017   7418         MOV     A,#0x18
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 4,A
   1151            uint8 *pBuf = ZDP_TmpBuf;
   \   00001F   12....       LCALL   ?Subroutine43 & 0xFFFF
   1152            byte len;
   1153          
   1154            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1155          
   1156            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1157            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_154:
   \   000022   75..0C       MOV     ?V0 + 0,#0xc
   \   000025   7416         MOV     A,#0x16
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   1158            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_241:
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6403         XRL     A,#0x3
   \   00003C   7005         JNZ     ??ZDP_BindUnbindReq_0
   1159              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   00003E   75..15       MOV     ?V0 + 0,#0x15
   \   000041   8014         SJMP    ??ZDP_BindUnbindReq_1
   1160            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6401         XRL     A,#0x1
   \   000052   7003         JNZ     ??ZDP_BindUnbindReq_1
   1161              len += sizeof ( uint16 );
   \   000054   75..0E       MOV     ?V0 + 0,#0xe
   1162          
   1163            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   000057                ; Setup parameters for call to function sAddrExtCpy
   \   000057   12....       LCALL   ??sAddrExtCpy?relay
   1164            *pBuf++ = SrcEndPoint;
   \   00005A   8A82         MOV     DPL,R2
   \   00005C   8B83         MOV     DPH,R3
   \   00005E   E5..         MOV     A,?V0 + 1
   \   000060   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000063   7414         MOV     A,#0x14
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   12....       LCALL   ?Subroutine22 & 0xFFFF
   1165          
   1166            *pBuf++ = LO_UINT16( ClusterID );
   1167          
   1168            *pBuf++ = HI_UINT16( ClusterID );
   1169            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_17:
   \   00006B   EE           MOV     A,R6
   \   00006C   2408         ADD     A,#0x8
   \   00006E   12....       LCALL   ?Subroutine23 & 0xFFFF
   1170            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_18:
   \   000071   700F         JNZ     ??ZDP_BindUnbindReq_2
   1171            {
   1172              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1173              *pBuf = DstEndPoint;
   \   000073                ; Setup parameters for call to function sAddrExtCpy
   \   000073   EE           MOV     A,R6
   \   000074   FC           MOV     R4,A
   \   000075   EF           MOV     A,R7
   \   000076   FD           MOV     R5,A
   \   000077   12....       LCALL   ??sAddrExtCpy?relay
   \   00007A   8A82         MOV     DPL,R2
   \   00007C   8B83         MOV     DPH,R3
   \   00007E   E5..         MOV     A,?V0 + 4
   \   000080   8024         SJMP    ??ZDP_BindUnbindReq_3
   1174            }
   1175            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_2:
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   6401         XRL     A,#0x1
   \   000091   7014         JNZ     ??ZDP_BindUnbindReq_4
   1176            {
   1177              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00009A   AB83         MOV     R3,DPH
   1178              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   8A82         MOV     DPL,R2
   \   0000A4   8B83         MOV     DPH,R3
   \                     ??ZDP_BindUnbindReq_3:
   \   0000A6   F0           MOVX    @DPTR,A
   1179            }
   1180          
   1181            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_4:
   \   0000A7   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000AA   7410         MOV     A,#0x10
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD                ; Setup parameters for call to function fillAndSend
   \   0000AD   78..         MOV     R0,#?V0 + 6
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   A9..         MOV     R1,?V0 + 0
   \   0000B4   AC..         MOV     R4,?V0 + 2
   \   0000B6   AD..         MOV     R5,?V0 + 3
   \   0000B8   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000BA   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000BC   12....       LCALL   ??fillAndSend?relay
   \   0000BF   7402         MOV     A,#0x2
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C4   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000C7   E4           CLR     A
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   02....       LJMP    ??Subroutine95_0 & 0xFFFF
   1182          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   6403         XRL     A,#0x3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000005                REQUIRE ??Subroutine119_0
   \   000005                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0A           INC     R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
   1183          
   1184          /*********************************************************************
   1185           * Network Management
   1186           */
   1187          
   1188          /*********************************************************************
   1189           * @fn          ZDP_MgmtNwkDiscReq
   1190           *
   1191           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1192           *              function sends a unicast message.
   1193           *
   1194           * @param       dstAddr - destination address of the message
   1195           * @param       ScanChannels - 32 bit address bit map
   1196           * @param       StartIndex - Starting index within the reporting network
   1197           *                           list
   1198           * @param       SecurityEnable - Security Options
   1199           *
   1200           * @return      afStatus_t
   1201           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000002   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000004   12....       LCALL   ??fillAndSend?relay
   \   000007   7402         MOV     A,#0x2
   \   000009                REQUIRE ??Subroutine82_0
   \   000009                ; // Fall through to label ??Subroutine82_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1202          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1203                                         uint32 ScanChannels,
   1204                                         byte ScanDuration,
   1205                                         byte StartIndex,
   1206                                         byte SecurityEnable )
   1207          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   8C..         MOV     ?V0 + 1,R4
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   78..         MOV     R0,#?V0 + 4
   \   000014   12....       LCALL   ?L_MOV_X
   1208            uint8 *pBuf = ZDP_TmpBuf;
   1209            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1210          
   1211            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1212          
   1213            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   000017                ; Setup parameters for call to function osal_buffer_uint32
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00001C   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00001F   12....       LCALL   ??osal_buffer_uint32?relay
   \   000022   7404         MOV     A,#0x4
   \   000024   12....       LCALL   ?DEALLOC_XSTACK8
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   1214          
   1215            *pBuf++ = ScanDuration;
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   1216            *pBuf = StartIndex;
   \   00002F   E5..         MOV     A,?V0 + 1
   \   000031   F0           MOVX    @DPTR,A
   1217          
   1218            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   000032                ; Setup parameters for call to function fillAndSend
   \   000032   75..30       MOV     ?V0 + 2,#0x30
   \   000035   75..00       MOV     ?V0 + 3,#0x0
   \   000038   78..         MOV     R0,#?V0 + 2
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7906         MOV     R1,#0x6
   \   00003F   EE           MOV     A,R6
   \   000040   FC           MOV     R4,A
   \   000041   EF           MOV     A,R7
   \   000042   FD           MOV     R5,A
   \   000043   02....       LJMP    ?Subroutine0 & 0xFFFF
   1219          }
   1220          
   1221          /*********************************************************************
   1222           * @fn          ZDP_MgmtDirectJoinReq
   1223           *
   1224           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1225           *              function sends a unicast message.
   1226           *
   1227           * @param       dstAddr - destination address of the message
   1228           * @param       deviceAddr - 64 bit IEEE Address
   1229           * @param       SecurityEnable - Security Options
   1230           *
   1231           * @return      afStatus_t
   1232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1233          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1234                                         uint8 *deviceAddr,
   1235                                         byte capInfo,
   1236                                         byte SecurityEnable )
   1237          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   1238            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1239          
   1240            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00000E   12....       LCALL   ??sAddrExtCpy?relay
   1241            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   000011   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000014   E5..         MOV     A,?V0 + 0
   \   000016   F0           MOVX    @DPTR,A
   1242          
   1243            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000017                ; Setup parameters for call to function fillAndSend
   \   000017   75..35       MOV     ?V0 + 2,#0x35
   \   00001A                REQUIRE ?Subroutine4
   \   00001A                ; // Fall through to label ?Subroutine4
   1244          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   75..00       MOV     ?V0 + 3,#0x0
   \   000003   78..         MOV     R0,#?V0 + 2
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV     R1,#0x9
   \   00000A   EE           MOV     A,R6
   \   00000B   FC           MOV     R4,A
   \   00000C   EF           MOV     A,R7
   \   00000D   FD           MOV     R5,A
   \   00000E   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000010   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000012   12....       LCALL   ??fillAndSend?relay
   \   000015   7402         MOV     A,#0x2
   \   000017                REQUIRE ??Subroutine107_0
   \   000017                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F04         MOV     R7,#0x4
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   C8           XCH     A,R0
   \   000004   2408         ADD     A,#0x8
   \   000006   F582         MOV     DPL,A
   \   000008   E8           MOV     A,R0
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F583         MOV     DPH,A
   \   00000D   22           RET
   1245          
   1246          /*********************************************************************
   1247           * @fn          ZDP_MgmtPermitJoinReq
   1248           *
   1249           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1250           *
   1251           * @param       dstAddr - destination address of the message
   1252           * @param       duration - Permit duration
   1253           * @param       TcSignificance - Trust Center Significance
   1254           *
   1255           * @return      afStatus_t
   1256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1257          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1258                                            byte TcSignificance, byte SecurityEnable )
   1259          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1260            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1261          
   1262            // Build buffer
   1263            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   000005   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000008   E9           MOV     A,R1
   \   000009   12....       LCALL   ?Subroutine30 & 0xFFFF
   1264            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_96:
   \   00000C   EC           MOV     A,R4
   \   00000D   F0           MOVX    @DPTR,A
   1265          
   1266            // Send the message
   1267            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1268                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00000E                ; Setup parameters for call to function fillAndSend
   \   00000E   75..36       MOV     ?V0 + 0,#0x36
   \   000011   02....       LJMP    ?Subroutine2 & 0xFFFF
   1269          }
   1270          
   1271          /*********************************************************************
   1272           * @fn          ZDP_MgmtLeaveReq
   1273           *
   1274           * @brief       This builds and send a Mgmt_Leave_req message.
   1275           *
   1276           * @param       dstAddr - destination address of the message
   1277           *              IEEEAddr - IEEE adddress of device that is removed
   1278           *              RemoveChildren - set to 1 to remove the children of the
   1279           *                                device as well. 0 otherwise.
   1280           *              Rejoin - set to 1 if the removed device should rejoin
   1281                                   afterwards. 0 otherwise.
   1282           *
   1283           * @return      afStatus_t
   1284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1285          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1286                           uint8 Rejoin, uint8 SecurityEnable )
   1287          
   1288          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   740C         MOV     A,#0xc
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 1,A
   1289            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1290          
   1291            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \   000013                ; Setup parameters for call to function sAddrExtCpy
   \   000013   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000016   12....       LCALL   ??sAddrExtCpy?relay
   1292            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   000019   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00001C   E4           CLR     A
   \   00001D   F0           MOVX    @DPTR,A
   1293          
   1294            if ( RemoveChildren == TRUE )
   \   00001E   04           INC     A
   \   00001F   65..         XRL     A,?V0 + 0
   \   000021   7006         JNZ     ??ZDP_MgmtLeaveReq_0
   1295            {
   1296              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000023   12....       LCALL   ?Subroutine9 & 0xFFFF
   1297            }
   \                     ??CrossCallReturnLabel_4:
   \   000026   7440         MOV     A,#0x40
   \   000028   F0           MOVX    @DPTR,A
   1298            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000029   7401         MOV     A,#0x1
   \   00002B   65..         XRL     A,?V0 + 1
   \   00002D   7007         JNZ     ??ZDP_MgmtLeaveReq_1
   1299            {
   1300              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   00002F   12....       LCALL   ?Subroutine9 & 0xFFFF
   1301            }
   \                     ??CrossCallReturnLabel_5:
   \   000032   E0           MOVX    A,@DPTR
   \   000033   D2E7         SETB    0xE0 /* A   */.7
   \   000035   F0           MOVX    @DPTR,A
   1302          
   1303            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000036                ; Setup parameters for call to function fillAndSend
   \   000036   75..34       MOV     ?V0 + 2,#0x34
   \   000039   80..         SJMP    ?Subroutine4
   1304          }
   1305          
   1306          /*********************************************************************
   1307           * @fn          ZDP_MgmtNwkUpdateReq
   1308           *
   1309           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1310           *              function sends a unicast or broadcast message.
   1311           *
   1312           * @param       dstAddr - destination address of the message
   1313           * @param       ChannelMask - 32 bit address bit map
   1314           * @param       ScanDuration - length of time to spend scanning each channel
   1315           * @param       ScanCount - number of energy scans to be conducted
   1316           * @param       NwkUpdateId - NWk Update Id value
   1317           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1318           *                               bit set in its Node Descriptor
   1319           *
   1320           * @return      afStatus_t
   1321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1322          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1323                                           uint32 ChannelMask,
   1324                                           uint8 ScanDuration,
   1325                                           uint8 ScanCount,
   1326                                           uint8 NwkUpdateId,
   1327                                           uint16 NwkManagerAddr )
   1328          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FE           MOV     R6,A
   \   00000B   8C..         MOV     ?V0 + 4,R4
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?L_MOV_X
   1329            uint8 *pBuf = ZDP_TmpBuf;
   1330            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   000019   75..05       MOV     ?V0 + 5,#0x5
   1331          
   1332            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   00001C                ; Setup parameters for call to function osal_buffer_uint32
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000021   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000024   12....       LCALL   ??osal_buffer_uint32?relay
   \   000027   7404         MOV     A,#0x4
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002C   8A..         MOV     ?V0 + 0,R2
   \   00002E   8B..         MOV     ?V0 + 1,R3
   \   000030   A8..         MOV     R0,?V0 + 0
   \   000032   A9..         MOV     R1,?V0 + 1
   1333          
   1334            *pBuf++ = ScanDuration;
   \   000034   EE           MOV     A,R6
   \   000035   8882         MOV     DPL,R0
   \   000037   8983         MOV     DPH,R1
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   1335          
   1336            if ( ScanDuration <= 0x05 )
   \   00003B   C3           CLR     C
   \   00003C   9406         SUBB    A,#0x6
   \   00003E   5007         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1337            {
   1338              // Request is to scan over channelMask
   1339              len += sizeof( uint8 );
   \   000040   75..06       MOV     ?V0 + 5,#0x6
   1340          
   1341              *pBuf++ = ScanCount;
   \   000043   E5..         MOV     A,?V0 + 4
   \   000045   8028         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1342            }
   1343            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   000047   74FE         MOV     A,#-0x2
   \   000049   6E           XRL     A,R6
   \   00004A   6005         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   00004C   74FF         MOV     A,#-0x1
   \   00004E   6E           XRL     A,R6
   \   00004F   701F         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1344            {
   1345              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1346              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000051   75..06       MOV     ?V0 + 5,#0x6
   1347          
   1348              *pBuf++ = NwkUpdateId;
   \   000054   EF           MOV     A,R7
   \   000055   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   1349          
   1350              if ( ScanDuration == 0xFF )
   \                     ??CrossCallReturnLabel_215:
   \   000058   74FF         MOV     A,#-0x1
   \   00005A   6E           XRL     A,R6
   \   00005B   7013         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1351              {
   1352                len += sizeof( uint16 );
   \   00005D   75..08       MOV     ?V0 + 5,#0x8
   \   000060   7414         MOV     A,#0x14
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   12....       LCALL   ?Subroutine42 & 0xFFFF
   1353          
   1354                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \                     ??CrossCallReturnLabel_49:
   \   000068   8882         MOV     DPL,R0
   \   00006A   8983         MOV     DPH,R1
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   1355                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   00006E   EB           MOV     A,R3
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   00006F   F0           MOVX    @DPTR,A
   1356              }
   1357            }
   1358          
   1359            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_3:
   \   000070                ; Setup parameters for call to function fillAndSend
   \   000070   75..38       MOV     ?V0 + 0,#0x38
   \   000073   75..00       MOV     ?V0 + 1,#0x0
   \   000076   78..         MOV     R0,#?V0 + 0
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   A9..         MOV     R1,?V0 + 5
   \   00007D   AC..         MOV     R4,?V0 + 6
   \   00007F   AD..         MOV     R5,?V0 + 7
   \   000081   02....       LJMP    ?Subroutine0 & 0xFFFF
   1360          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET
   1361          
   1362          
   1363          /*********************************************************************
   1364           * Network Management Responses
   1365           */
   1366          
   1367          /*********************************************************************
   1368           * @fn          ZDP_MgmtNwkDiscRsp
   1369           *
   1370           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1371           *              function sends a unicast message.
   1372           *
   1373           * @param       dstAddr - destination address of the message
   1374           * @param       Status - message status (ZDP_SUCCESS or other)
   1375           * @param       NetworkCount - Total number of networks found
   1376           * @param       StartIndex - Starting index within the reporting network
   1377           *                           list
   1378           * @param       NetworkListCount - number of network lists included
   1379           *                                 in this message
   1380           * @param       NetworkList - List of network descriptors
   1381           * @param       SecurityEnable - Security Options
   1382           *
   1383           * @return      afStatus_t
   1384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1385          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1386                                      byte Status,
   1387                                      byte NetworkCount,
   1388                                      byte StartIndex,
   1389                                      byte NetworkListCount,
   1390                                      networkDesc_t *NetworkList,
   1391                                      byte SecurityEnable )
   1392          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 10,R2
   \   000014   8B..         MOV     ?V0 + 11,R3
   \   000016   8C..         MOV     ?V0 + 8,R4
   \   000018   8D..         MOV     ?V0 + 6,R5
   \   00001A   7417         MOV     A,#0x17
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 2,A
   \   000022   7418         MOV     A,#0x18
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 4,A
   1393            uint8 *buf;
   1394            uint8 *pBuf;
   1395            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1396            byte idx;
   1397          
   1398            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1399          
   1400            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   00002A   75F00C       MOV     B,#0xc
   \   00002D   12....       LCALL   ?Subroutine59 & 0xFFFF
   1401          
   1402            buf = osal_mem_alloc( len+1 );
   \                     ??CrossCallReturnLabel_236:
   \   000030   12....       LCALL   ??osal_mem_alloc?relay
   \   000033   8A..         MOV     ?V0 + 0,R2
   \   000035   8B..         MOV     ?V0 + 1,R3
   1403            if ( buf == NULL )
   \   000037   EA           MOV     A,R2
   \   000038   45..         ORL     A,?V0 + 1
   \   00003A   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1404            {
   1405              return afStatus_MEM_FAIL;
   \   00003C   7910         MOV     R1,#0x10
   \   00003E   02....       LJMP    ??CrossCallReturnLabel_65 & 0xFFFF
   1406            }
   1407          
   1408            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   1409          
   1410            *pBuf++ = Status;
   \   000046   E5..         MOV     A,?V0 + 8
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   1411            *pBuf++ = NetworkCount;
   \   00004A   E5..         MOV     A,?V0 + 6
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   1412            *pBuf++ = StartIndex;
   \   00004E   E5..         MOV     A,?V0 + 2
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   1413            *pBuf++ = NetworkListCount;
   \   000052   E5..         MOV     A,?V0 + 4
   \   000054   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   1414          
   1415            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??CrossCallReturnLabel_175:
   \   000057   75..00       MOV     ?V0 + 7,#0x0
   \   00005A   7419         MOV     A,#0x19
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   12....       LCALL   ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000062   8016         SJMP    ??ZDP_MgmtNwkDiscRsp_1
   1416            {
   1417              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1418              pBuf += Z_EXTADDR_LEN;
   1419          
   1420              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1421              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1422              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1423              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1424              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   1425          
   1426              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1427              {
   1428                *pBuf++ = TRUE;                         // Permit Joining
   1429              }
   1430              else
   1431              {
   1432                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   000064   E4           CLR     A
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   0E           INC     R6
   \   000068   AF83         MOV     R7,DPH
   1433              }
   1434          
   1435              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   00006A   E5..         MOV     A,?V0 + 2
   \   00006C   2414         ADD     A,#0x14
   \   00006E   F582         MOV     DPL,A
   \   000070   E5..         MOV     A,?V0 + 3
   \   000072   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000075   12....       LCALL   ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000078   05..         INC     ?V0 + 7
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   00007A   E5..         MOV     A,?V0 + 7
   \   00007C   C3           CLR     C
   \   00007D   95..         SUBB    A,?V0 + 4
   \   00007F   4003         JC      $+5
   \   000081   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   \   000084                ; Setup parameters for call to function sAddrExtCpy
   \   000084   E5..         MOV     A,?V0 + 2
   \   000086   240B         ADD     A,#0xb
   \   000088   FC           MOV     R4,A
   \   000089   E5..         MOV     A,?V0 + 3
   \   00008B   3400         ADDC    A,#0x0
   \   00008D   FD           MOV     R5,A
   \   00008E   EE           MOV     A,R6
   \   00008F   FA           MOV     R2,A
   \   000090   EF           MOV     A,R7
   \   000091   FB           MOV     R3,A
   \   000092   12....       LCALL   ??sAddrExtCpy?relay
   \   000095   EE           MOV     A,R6
   \   000096   2408         ADD     A,#0x8
   \   000098   FE           MOV     R6,A
   \   000099   EF           MOV     A,R7
   \   00009A   3400         ADDC    A,#0x0
   \   00009C   FF           MOV     R7,A
   \   00009D   85..82       MOV     DPL,?V0 + 2
   \   0000A0   85..83       MOV     DPH,?V0 + 3
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000A8   AE82         MOV     R6,DPL
   \   0000AA   AF83         MOV     R7,DPH
   \   0000AC   85..82       MOV     DPL,?V0 + 2
   \   0000AF   85..83       MOV     DPH,?V0 + 3
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   0000BB   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000BE   85..82       MOV     DPL,?V0 + 2
   \   0000C1   85..83       MOV     DPH,?V0 + 3
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000CC   8E82         MOV     DPL,R6
   \   0000CE   8F83         MOV     DPH,R7
   \   0000D0   740F         MOV     A,#0xf
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   08           INC     R0
   \   0000D4   EF           MOV     A,R7
   \   0000D5   F9           MOV     R1,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   0E           INC     R6
   \   0000D8   AF83         MOV     R7,DPH
   \   0000DA   8882         MOV     DPL,R0
   \   0000DC   8983         MOV     DPH,R1
   \   0000DE   740F         MOV     A,#0xf
   \   0000E0   44F0         ORL     A,#0xf0
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   85..82       MOV     DPL,?V0 + 2
   \   0000E6   85..83       MOV     DPH,?V0 + 3
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   64FE         XRL     A,#0xfe
   \   0000F3   7003         JNZ     ??ZDP_MgmtNwkDiscRsp_5
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F4           CPL     A
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   0000F8   8E82         MOV     DPL,R6
   \   0000FA   8F83         MOV     DPH,R7
   \   0000FC   7003         JNZ     $+5
   \   0000FE   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
   \   000101   7401         MOV     A,#0x1
   \   000103   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   1436            }
   1437          
   1438            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   000106   85..82       MOV     DPL,?V0 + 0
   \   000109   85..83       MOV     DPH,?V0 + 1
   \   00010C   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   00010F                ; Setup parameters for call to function fillAndSend
   \   00010F   75..30       MOV     ?V0 + 2,#0x30
   \   000112   75..80       MOV     ?V0 + 3,#-0x80
   \   000115   78..         MOV     R0,#?V0 + 2
   \   000117   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011A   A9..         MOV     R1,?V0 + 5
   \   00011C   AC..         MOV     R4,?V0 + 10
   \   00011E   AD..         MOV     R5,?V0 + 11
   \   000120   7402         MOV     A,#0x2
   \   000122   12....       LCALL   ?XSTACK_DISP0_8
   \   000125   AA82         MOV     R2,DPL
   \   000127   AB83         MOV     R3,DPH
   \   000129   12....       LCALL   ??fillAndSend?relay
   \   00012C   7402         MOV     A,#0x2
   \   00012E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000131   E9           MOV     A,R1
   \   000132   FE           MOV     R6,A
   \   000133                ; Setup parameters for call to function osal_mem_free
   \   000133   AA..         MOV     R2,?V0 + 0
   \   000135   AB..         MOV     R3,?V0 + 1
   \   000137   12....       LCALL   ??osal_mem_free?relay
   \   00013A   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00013D                REQUIRE ?Subroutine5
   \   00013D                ; // Fall through to label ?Subroutine5
   1439          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F0E         MOV     R7,#0xe
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   A3           INC     DPTR
   \   000001   A882         MOV     R0,DPL
   \   000003   A983         MOV     R1,DPH
   \   000005   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000008                REQUIRE ??Subroutine109_0
   \   000008                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   F8           MOV     R0,A
   \   000003   EF           MOV     A,R7
   \   000004   F9           MOV     R1,A
   \   000005   A3           INC     DPTR
   \   000006   0E           INC     R6
   \   000007   AF83         MOV     R7,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C4           SWAP    A
   \   000002   54F0         ANL     A,#0xf0
   \   000004   FA           MOV     R2,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   4A           ORL     A,R2
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   A4           MUL     AB
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V0 + 5,A
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                REQUIRE ??Subroutine120_0
   \   000005                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   2401         ADD     A,#0x1
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   3400         ADDC    A,#0x0
   \   000006   FB           MOV     R3,A
   \   000007   22           RET
   1440          
   1441          /*********************************************************************
   1442           * @fn          ZDP_MgmtLqiRsp
   1443           *
   1444           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1445           *              function sends a unicast message.
   1446           *
   1447           * @param       dstAddr - destination address of the message
   1448           * @param       Status - message status (ZDP_SUCCESS or other)
   1449           * @param       NeighborLqiEntries - Total number of entries found
   1450           * @param       StartIndex - Starting index within the reporting list
   1451           * @param       NeighborLqiCount - number of lists included
   1452           *                                 in this message
   1453           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1454           *                is the list to be sent, not the entire list
   1455           * @param       SecurityEnable - true if secure
   1456           *
   1457           * @return      ZStatus_t
   1458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine108_0
   \   000006                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1459          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1460                                    byte Status,
   1461                                    byte NeighborLqiEntries,
   1462                                    byte StartIndex,
   1463                                    byte NeighborLqiCount,
   1464                                    ZDP_MgmtLqiItem_t* NeighborList,
   1465                                    byte SecurityEnable )
   1466          {
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 10,R2
   \   000014   8B..         MOV     ?V0 + 11,R3
   \   000016   8D..         MOV     ?V0 + 12,R5
   \   000018   7416         MOV     A,#0x16
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 4,A
   \   000020   7418         MOV     A,#0x18
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   1467            ZDP_MgmtLqiItem_t* list = NeighborList;
   1468            uint8 *buf, *pBuf;
   1469            byte len, x;
   1470          
   1471            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1472          
   1473            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_208:
   \   000028   EC           MOV     A,R4
   \   000029   602A         JZ      ??ZDP_MgmtLqiRsp_0
   1474            {
   1475              ZDP_TmpBuf[0] = Status;
   \   00002B   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00002E   EC           MOV     A,R4
   \   00002F   F0           MOVX    @DPTR,A
   1476              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   000030                ; Setup parameters for call to function fillAndSend
   \   000030   75..31       MOV     ?V0 + 0,#0x31
   \   000033   75..80       MOV     ?V0 + 1,#-0x80
   \   000036   78..         MOV     R0,#?V0 + 0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7901         MOV     R1,#0x1
   \   00003D   AC..         MOV     R4,?V0 + 10
   \   00003F   AD..         MOV     R5,?V0 + 11
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   AA82         MOV     R2,DPL
   \   000048   AB83         MOV     R3,DPH
   \   00004A   12....       LCALL   ??fillAndSend?relay
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000052   02....       LJMP    ??CrossCallReturnLabel_66 & 0xFFFF
   1477            }
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000055   7417         MOV     A,#0x17
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F5..         MOV     ?V0 + 5,A
   1478          
   1479            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1480            //  neighbor LQI data.
   1481            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   00005D   75F016       MOV     B,#0x16
   \   000060   A4           MUL     AB
   \   000061   2404         ADD     A,#0x4
   \   000063   F5..         MOV     ?V0 + 6,A
   1482          
   1483            buf = osal_mem_alloc( len+1 );
   \   000065                ; Setup parameters for call to function osal_mem_alloc
   \   000065   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000068   12....       LCALL   ??osal_mem_alloc?relay
   \   00006B   8A..         MOV     ?V0 + 2,R2
   \   00006D   8B..         MOV     ?V0 + 3,R3
   1484            if ( buf == NULL )
   \   00006F   EA           MOV     A,R2
   \   000070   45..         ORL     A,?V0 + 3
   \   000072   7005         JNZ     ??ZDP_MgmtLqiRsp_1
   1485            {
   1486              return afStatus_MEM_FAIL;
   \   000074   7910         MOV     R1,#0x10
   \   000076   02....       LJMP    ??CrossCallReturnLabel_66 & 0xFFFF
   1487            }
   1488          
   1489            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_1:
   \   000079   8A82         MOV     DPL,R2
   \   00007B   8B83         MOV     DPH,R3
   \   00007D   A3           INC     DPTR
   1490          
   1491            *pBuf++ = Status;
   \   00007E   E4           CLR     A
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   1492            *pBuf++ = NeighborLqiEntries;
   \   000081   E5..         MOV     A,?V0 + 12
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   1493            *pBuf++ = StartIndex;
   \   000085   12....       LCALL   ?Subroutine47 & 0xFFFF
   1494            *pBuf++ = NeighborLqiCount;
   1495          
   1496            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_171:
   \   000088   75..00       MOV     ?V0 + 4,#0x0
   \   00008B   02....       LJMP    ??ZDP_MgmtLqiRsp_2 & 0xFFFF
   1497            {
   1498              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_3:
   \   00008E                ; Setup parameters for call to function sAddrExtCpy
   \   00008E   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000091   EE           MOV     A,R6
   \   000092   FA           MOV     R2,A
   \   000093   EF           MOV     A,R7
   \   000094   FB           MOV     R3,A
   \   000095   12....       LCALL   ??sAddrExtCpy?relay
   1499              pBuf += Z_EXTADDR_LEN;
   1500          
   1501              // EXTADDR
   1502              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   000098                ; Setup parameters for call to function sAddrExtCpy
   \   000098   E5..         MOV     A,?V0 + 0
   \   00009A   240A         ADD     A,#0xa
   \   00009C   FC           MOV     R4,A
   \   00009D   E5..         MOV     A,?V0 + 1
   \   00009F   3400         ADDC    A,#0x0
   \   0000A1   FD           MOV     R5,A
   \   0000A2   EE           MOV     A,R6
   \   0000A3   2408         ADD     A,#0x8
   \   0000A5   FA           MOV     R2,A
   \   0000A6   EF           MOV     A,R7
   \   0000A7   3400         ADDC    A,#0x0
   \   0000A9   FB           MOV     R3,A
   \   0000AA   12....       LCALL   ??sAddrExtCpy?relay
   \   0000AD   8A..         MOV     ?V0 + 8,R2
   \   0000AF   8B..         MOV     ?V0 + 9,R3
   \   0000B1   AE..         MOV     R6,?V0 + 8
   \   0000B3   AF..         MOV     R7,?V0 + 9
   1503          
   1504              // NWKADDR
   1505              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000B5   E5..         MOV     A,?V0 + 0
   \   0000B7   2412         ADD     A,#0x12
   \   0000B9   F8           MOV     R0,A
   \   0000BA   E5..         MOV     A,?V0 + 1
   \   0000BC   3400         ADDC    A,#0x0
   \   0000BE   F9           MOV     R1,A
   \   0000BF   12....       LCALL   ?Subroutine24 & 0xFFFF
   1506              *pBuf++ = HI_UINT16( list->nwkAddr );
   \                     ??CrossCallReturnLabel_21:
   \   0000C2   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   1507          
   1508              // DEVICETYPE
   1509              *pBuf = list->devType;
   \                     ??CrossCallReturnLabel_197:
   \   0000C5   2414         ADD     A,#0x14
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   E5..         MOV     A,?V0 + 1
   \   0000CB   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   F0           MOVX    @DPTR,A
   1510          
   1511              // RXONIDLE
   1512              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \   0000D3   E5..         MOV     A,?V0 + 0
   \   0000D5   2415         ADD     A,#0x15
   \   0000D7   F582         MOV     DPL,A
   \   0000D9   E5..         MOV     A,?V0 + 1
   \   0000DB   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0000DE   33           RLC     A
   \   0000DF   33           RLC     A
   \   0000E0   54FC         ANL     A,#0xfc
   \   0000E2   F8           MOV     R0,A
   \   0000E3   8E82         MOV     DPL,R6
   \   0000E5   8F83         MOV     DPH,R7
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   48           ORL     A,R0
   \   0000E9   12....       LCALL   ?Subroutine55 & 0xFFFF
   1513          
   1514              // RELATIONSHIP
   1515              *pBuf++ |= (uint8)(list->relation << 4);
   \                     ??CrossCallReturnLabel_74:
   \   0000EC   E5..         MOV     A,?V0 + 0
   \   0000EE   2416         ADD     A,#0x16
   \   0000F0   F582         MOV     DPL,A
   \   0000F2   E5..         MOV     A,?V0 + 1
   \   0000F4   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   0000F7   12....       LCALL   ?Subroutine31 & 0xFFFF
   1516          
   1517              // PERMITJOINING
   1518              *pBuf++ = (uint8)(list->permit);
   \                     ??CrossCallReturnLabel_31:
   \   0000FA   E5..         MOV     A,?V0 + 0
   \   0000FC   2417         ADD     A,#0x17
   \   0000FE   12....       LCALL   ?Subroutine12 & 0xFFFF
   1519          
   1520              // DEPTH
   1521              *pBuf++ = list->depth;
   1522          
   1523              // LQI
   1524              *pBuf++ = list->lqi;
   1525          
   1526              list++; // next list entry
   1527            }
   \                     ??CrossCallReturnLabel_194:
   \   000101   2418         ADD     A,#0x18
   \   000103   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000106   2419         ADD     A,#0x19
   \   000108   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00010B   241A         ADD     A,#0x1a
   \   00010D   F5..         MOV     ?V0 + 0,A
   \   00010F   E5..         MOV     A,?V0 + 1
   \   000111   3400         ADDC    A,#0x0
   \   000113   F5..         MOV     ?V0 + 1,A
   \   000115   05..         INC     ?V0 + 4
   \                     ??ZDP_MgmtLqiRsp_2:
   \   000117   E5..         MOV     A,?V0 + 4
   \   000119   C3           CLR     C
   \   00011A   95..         SUBB    A,?V0 + 5
   \   00011C   5003         JNC     $+5
   \   00011E   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1528          
   1529            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   000121   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000124                ; Setup parameters for call to function fillAndSend
   \   000124   75..31       MOV     ?V0 + 0,#0x31
   \   000127   75..80       MOV     ?V0 + 1,#-0x80
   \   00012A   78..         MOV     R0,#?V0 + 0
   \   00012C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012F   A9..         MOV     R1,?V0 + 6
   \   000131   AC..         MOV     R4,?V0 + 10
   \   000133   AD..         MOV     R5,?V0 + 11
   \   000135   7402         MOV     A,#0x2
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   AA82         MOV     R2,DPL
   \   00013C   AB83         MOV     R3,DPH
   \   00013E   12....       LCALL   ??fillAndSend?relay
   \   000141   7402         MOV     A,#0x2
   \   000143   12....       LCALL   ?DEALLOC_XSTACK8
   \   000146   E9           MOV     A,R1
   \   000147   FE           MOV     R6,A
   \   000148                ; Setup parameters for call to function osal_mem_free
   \   000148   AA..         MOV     R2,?V0 + 2
   \   00014A   AB..         MOV     R3,?V0 + 3
   \   00014C   12....       LCALL   ??osal_mem_free?relay
   \   00014F   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000152   7401         MOV     A,#0x1
   \   000154   12....       LCALL   ?DEALLOC_XSTACK8
   \   000157   7F0D         MOV     R7,#0xd
   \   000159   02....       LJMP    ?BANKED_LEAVE_XDATA
   1530          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   3400         ADDC    A,#0x0
   \   000006   F583         MOV     DPH,A
   \   000008                REQUIRE ??Subroutine114_0
   \   000008                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET
   1531          
   1532          /*********************************************************************
   1533           * @fn          ZDP_MgmtRtgRsp
   1534           *
   1535           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1536           *              function sends a unicast message.
   1537           *
   1538           * @param       dstAddr - destination address of the message
   1539           * @param       Status - message status (ZDP_SUCCESS or other)
   1540           * @param       RoutingTableEntries - Total number of entries
   1541           * @param       StartIndex - Starting index within the reporting list
   1542           * @param       RoutingTableListCount - number of entries included
   1543           *                                      in this message
   1544           * @param       RoutingTableList - List of Routing Table entries
   1545           * @param       SecurityEnable - true to enable security for this message
   1546           *
   1547           * @return      ZStatus_t
   1548           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1549          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1550                                      byte Status,
   1551                                      byte RoutingTableEntries,
   1552                                      byte StartIndex,
   1553                                      byte RoutingListCount,
   1554                                      rtgItem_t *RoutingTableList,
   1555                                      byte SecurityEnable )
   1556          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 2,R2
   \   000014   8B..         MOV     ?V0 + 3,R3
   \   000016   8C..         MOV     ?V0 + 1,R4
   \   000018   8D..         MOV     ?V0 + 0,R5
   \   00001A   7413         MOV     A,#0x13
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 8,A
   \   000022   7414         MOV     A,#0x14
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 4,A
   1557            uint8 *buf;
   1558            uint8 *pBuf;
   1559            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1560            byte len = 1 + 1 + 1 + 1;
   1561            byte x;
   1562          
   1563            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1564          
   1565            // Add an array for Routing List data
   1566            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   00002A   75F005       MOV     B,#0x5
   \   00002D   12....       LCALL   ?Subroutine59 & 0xFFFF
   1567          
   1568            buf = osal_mem_alloc( (short)(len+1) );
   \                     ??CrossCallReturnLabel_237:
   \   000030   12....       LCALL   ??osal_mem_alloc?relay
   \   000033   8A..         MOV     ?V0 + 6,R2
   \   000035   8B..         MOV     ?V0 + 7,R3
   \   000037   AE..         MOV     R6,?V0 + 6
   \   000039   AF..         MOV     R7,?V0 + 7
   1569            if ( buf == NULL )
   \   00003B   EE           MOV     A,R6
   \   00003C   4F           ORL     A,R7
   \   00003D   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1570            {
   1571              return afStatus_MEM_FAIL;
   \   00003F   7910         MOV     R1,#0x10
   \   000041   02....       LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1572            }
   1573          
   1574            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   A3           INC     DPTR
   1575          
   1576            *pBuf++ = Status;
   \   000049   E5..         MOV     A,?V0 + 1
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   1577            *pBuf++ = RoutingTableEntries;
   \   00004D   E5..         MOV     A,?V0 + 0
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   1578            *pBuf++ = StartIndex;
   \   000051   E5..         MOV     A,?V0 + 8
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   1579            *pBuf++ = RoutingListCount;
   \   000055   E5..         MOV     A,?V0 + 4
   \   000057   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   1580          
   1581            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??CrossCallReturnLabel_216:
   \   00005A   75..00       MOV     ?V0 + 6,#0x0
   \   00005D   7415         MOV     A,#0x15
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000065   8030         SJMP    ??ZDP_MgmtRtgRsp_2
   1582            {
   1583              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_3:
   \   000067   8A82         MOV     DPL,R2
   \   000069   8B83         MOV     DPH,R3
   \   00006B   12....       LCALL   ?Subroutine39 & 0xFFFF
   1584              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \                     ??CrossCallReturnLabel_46:
   \   00006E   8A82         MOV     DPL,R2
   \   000070   8B83         MOV     DPH,R3
   \   000072   12....       LCALL   ?Subroutine38 & 0xFFFF
   1585              *pBuf++ = RoutingTableList->status;
   \                     ??CrossCallReturnLabel_120:
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   12....       LCALL   ?Subroutine37 & 0xFFFF
   1586              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   1587              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   1588              RoutingTableList++;    // Move to next list entry
   1589            }
   \                     ??CrossCallReturnLabel_43:
   \   000081   2402         ADD     A,#0x2
   \   000083   FC           MOV     R4,A
   \   000084   EB           MOV     A,R3
   \   000085   3400         ADDC    A,#0x0
   \   000087   FD           MOV     R5,A
   \   000088   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00008B   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00008E   2407         ADD     A,#0x7
   \   000090   FA           MOV     R2,A
   \   000091   EB           MOV     A,R3
   \   000092   3400         ADDC    A,#0x0
   \   000094   FB           MOV     R3,A
   \   000095   05..         INC     ?V0 + 6
   \                     ??ZDP_MgmtRtgRsp_2:
   \   000097   E5..         MOV     A,?V0 + 6
   \   000099   C3           CLR     C
   \   00009A   95..         SUBB    A,?V0 + 4
   \   00009C   40C9         JC      ??ZDP_MgmtRtgRsp_3
   1590          
   1591            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   00009E   8E82         MOV     DPL,R6
   \   0000A0   8F83         MOV     DPH,R7
   \   0000A2   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000A5                ; Setup parameters for call to function fillAndSend
   \   0000A5   75..32       MOV     ?V0 + 6,#0x32
   \   0000A8   75..80       MOV     ?V0 + 7,#-0x80
   \   0000AB   78..         MOV     R0,#?V0 + 6
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B0   A9..         MOV     R1,?V0 + 5
   \   0000B2   AC..         MOV     R4,?V0 + 2
   \   0000B4   AD..         MOV     R5,?V0 + 3
   \   0000B6   7402         MOV     A,#0x2
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   AA82         MOV     R2,DPL
   \   0000BD   AB83         MOV     R3,DPH
   \   0000BF   12....       LCALL   ??fillAndSend?relay
   \   0000C2   7402         MOV     A,#0x2
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C7   E9           MOV     A,R1
   \   0000C8   F5..         MOV     ?V0 + 2,A
   \   0000CA                ; Setup parameters for call to function osal_mem_free
   \   0000CA   EE           MOV     A,R6
   \   0000CB   FA           MOV     R2,A
   \   0000CC   EF           MOV     A,R7
   \   0000CD   FB           MOV     R3,A
   \   0000CE   12....       LCALL   ??osal_mem_free?relay
   \   0000D1   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000D4   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0000D6   F0           MOVX    @DPTR,A
   \   0000D7   A3           INC     DPTR
   \   0000D8   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0000DA   F0           MOVX    @DPTR,A
   \   0000DB   A9..         MOV     R1,?V0 + 2
   \                     ??ZDP_MgmtRtgRsp_1:
   \   0000DD   02....       LJMP    ?Subroutine3 & 0xFFFF
   1592          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET
   1593          
   1594          /*********************************************************************
   1595           * @fn          ZDP_MgmtBindRsp
   1596           *
   1597           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1598           *              function sends a unicast message.
   1599           *
   1600           * @param       dstAddr - destination address of the message
   1601           * @param       Status - message status (ZDP_SUCCESS or other)
   1602           * @param       BindingTableEntries - Total number of entries
   1603           * @param       StartIndex - Starting index within the reporting list
   1604           * @param       BindingTableListCount - number of entries included
   1605           *                                 in this message
   1606           * @param       BindingTableList - List of Binding Table entries
   1607           * @param       SecurityEnable - Security Options
   1608           *
   1609           * @return      ZStatus_t
   1610           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1611          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1612                                      byte Status,
   1613                                      byte BindingTableEntries,
   1614                                      byte StartIndex,
   1615                                      byte BindingTableListCount,
   1616                                      apsBindingItem_t *BindingTableList,
   1617                                      byte SecurityEnable )
   1618          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 10,R2
   \   000014   8B..         MOV     ?V0 + 11,R3
   \   000016   8C..         MOV     ?V0 + 6,R4
   \   000018   8D..         MOV     ?V0 + 5,R5
   \   00001A   7415         MOV     A,#0x15
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FE           MOV     R6,A
   \   000021   7416         MOV     A,#0x16
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V0 + 4,A
   1619            uint8 *buf;
   1620            uint8 *pBuf;
   1621            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1622            uint8 len;    // Actual length varies due to different addrMode
   1623            uint8 x;
   1624            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1625            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1626          
   1627            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1628          
   1629            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1630            maxLen = 1 + 1 + 1 + 1;
   1631            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1632            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   75F015       MOV     B,#0x15
   \   00002C   A4           MUL     AB
   \   00002D   2404         ADD     A,#0x4
   \   00002F   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000032   12....       LCALL   ??osal_mem_alloc?relay
   \   000035   8A..         MOV     ?V0 + 2,R2
   \   000037   8B..         MOV     ?V0 + 3,R3
   1633          
   1634            if ( buf == NULL )
   \   000039   EA           MOV     A,R2
   \   00003A   45..         ORL     A,?V0 + 3
   \   00003C   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1635            {
   1636              return afStatus_MEM_FAIL;
   \   00003E   7910         MOV     R1,#0x10
   \   000040   02....       LJMP    ??CrossCallReturnLabel_67 & 0xFFFF
   1637            }
   1638          
   1639            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   A3           INC     DPTR
   1640          
   1641            *pBuf++ = Status;
   \   000048   E5..         MOV     A,?V0 + 6
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   1642            *pBuf++ = BindingTableEntries;
   \   00004C   E5..         MOV     A,?V0 + 5
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   1643            *pBuf++ = StartIndex;
   \   000050   EE           MOV     A,R6
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   1644            *pBuf++ = BindingTableListCount;
   \   000053   E5..         MOV     A,?V0 + 4
   \   000055   12....       LCALL   ?Subroutine48 & 0xFFFF
   1645          
   1646            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1647            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1648            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1649            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1650          
   1651            len = 1 + 1 + 1 + 1;
   \                     ??CrossCallReturnLabel_59:
   \   000058   75..04       MOV     ?V0 + 0,#0x4
   1652            for ( x = 0; x < BindingTableListCount; x++ )
   \   00005B   75..00       MOV     ?V0 + 1,#0x0
   \   00005E   7417         MOV     A,#0x17
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000066   8018         SJMP    ??ZDP_MgmtBindRsp_1
   1653            {
   1654              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1655              *pBuf++ = BindingTableList->srcEP;
   1656          
   1657              // Cluster ID
   1658              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1659              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1660          
   1661              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1662              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1663              {
   1664                len += extZdpBindEntrySize;
   1665                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1666                *pBuf++ = BindingTableList->dstEP;
   1667              }
   1668              else
   1669              {
   1670                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_2:
   \   000068   740E         MOV     A,#0xe
   \   00006A   25..         ADD     A,?V0 + 0
   \   00006C   F5..         MOV     ?V0 + 0,A
   1671                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   00006E   EE           MOV     A,R6
   \   00006F   240B         ADD     A,#0xb
   \   000071   12....       LCALL   ?Subroutine18 & 0xFFFF
   1672                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1673              }
   \                     ??CrossCallReturnLabel_12:
   \   000074   AB83         MOV     R3,DPH
   1674              BindingTableList++;    // Move to next list entry
   \   000076   EE           MOV     A,R6
   \   000077   2415         ADD     A,#0x15
   \   000079   FE           MOV     R6,A
   \   00007A   EF           MOV     A,R7
   \   00007B   3400         ADDC    A,#0x0
   \   00007D   FF           MOV     R7,A
   \   00007E   05..         INC     ?V0 + 1
   \                     ??ZDP_MgmtBindRsp_1:
   \   000080   E5..         MOV     A,?V0 + 1
   \   000082   C3           CLR     C
   \   000083   95..         SUBB    A,?V0 + 4
   \   000085   5047         JNC     ??ZDP_MgmtBindRsp_3
   \   000087                ; Setup parameters for call to function sAddrExtCpy
   \   000087   EE           MOV     A,R6
   \   000088   FC           MOV     R4,A
   \   000089   EF           MOV     A,R7
   \   00008A   FD           MOV     R5,A
   \   00008B   12....       LCALL   ??sAddrExtCpy?relay
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00009D   AB83         MOV     R3,DPH
   \   00009F   EE           MOV     A,R6
   \   0000A0   2409         ADD     A,#0x9
   \   0000A2   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000A5   AB83         MOV     R3,DPH
   \   0000A7   EE           MOV     A,R6
   \   0000A8   2413         ADD     A,#0x13
   \   0000AA   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000AD   70B9         JNZ     ??ZDP_MgmtBindRsp_2
   \   0000AF   7415         MOV     A,#0x15
   \   0000B1   25..         ADD     A,?V0 + 0
   \   0000B3   F5..         MOV     ?V0 + 0,A
   \   0000B5                ; Setup parameters for call to function sAddrExtCpy
   \   0000B5   EE           MOV     A,R6
   \   0000B6   240B         ADD     A,#0xb
   \   0000B8   FC           MOV     R4,A
   \   0000B9   EF           MOV     A,R7
   \   0000BA   3400         ADDC    A,#0x0
   \   0000BC   FD           MOV     R5,A
   \   0000BD   12....       LCALL   ??sAddrExtCpy?relay
   \   0000C0   EE           MOV     A,R6
   \   0000C1   2414         ADD     A,#0x14
   \   0000C3   F582         MOV     DPL,A
   \   0000C5   EF           MOV     A,R7
   \   0000C6   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   1675            }
   \                     ??CrossCallReturnLabel_227:
   \   0000C9   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000CC   80A6         SJMP    ??CrossCallReturnLabel_12
   1676          
   1677            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_3:
   \   0000CE   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000D1                ; Setup parameters for call to function fillAndSend
   \   0000D1   75..33       MOV     ?V0 + 8,#0x33
   \   0000D4   75..80       MOV     ?V0 + 9,#-0x80
   \   0000D7   78..         MOV     R0,#?V0 + 8
   \   0000D9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DC   A9..         MOV     R1,?V0 + 0
   \   0000DE   AC..         MOV     R4,?V0 + 10
   \   0000E0   AD..         MOV     R5,?V0 + 11
   \   0000E2   7402         MOV     A,#0x2
   \   0000E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E7   AA82         MOV     R2,DPL
   \   0000E9   AB83         MOV     R3,DPH
   \   0000EB   12....       LCALL   ??fillAndSend?relay
   \   0000EE   7402         MOV     A,#0x2
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F3   E9           MOV     A,R1
   \   0000F4   FE           MOV     R6,A
   \   0000F5                ; Setup parameters for call to function osal_mem_free
   \   0000F5   AA..         MOV     R2,?V0 + 2
   \   0000F7   AB..         MOV     R3,?V0 + 3
   \   0000F9   12....       LCALL   ??osal_mem_free?relay
   \   0000FC   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000FF   7401         MOV     A,#0x1
   \   000101   12....       LCALL   ?DEALLOC_XSTACK8
   \   000104   7F0C         MOV     R7,#0xc
   \   000106   02....       LJMP    ?BANKED_LEAVE_XDATA
   1678          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   AA82         MOV     R2,DPL
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000007   22           RET
   1679          
   1680          /*********************************************************************
   1681           * @fn          ZDP_MgmtNwkUpdateNotify
   1682           *
   1683           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1684           *              function sends a unicast message.
   1685           *
   1686           * @param       dstAddr - destination address of the message
   1687           * @param       status - message status (ZDP_SUCCESS or other)
   1688           * @param       scannedChannels - List of channels scanned by the request
   1689           * @param       totalTransmissions - Total transmissions
   1690           * @param       transmissionFailures - Sum of transmission failures
   1691           * @param       listCount - Number of records contained in the energyValues list
   1692           * @param       energyValues - List of descriptors, one for each of ListCount,
   1693           *                             of the enegry detect descriptors
   1694           * @param       txOptions - Transmit options
   1695           * @param       securityEnable - Security options
   1696           *
   1697           * @return      afStatus_t
   1698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1699          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1700                                              uint8 status, uint32 scannedChannels,
   1701                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1702                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1703                                              uint8 securityEnable )
   1704          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 12,R2
   \   000014   8B..         MOV     ?V0 + 13,R3
   \   000016   8C..         MOV     ?V0 + 3,R4
   \   000018   8D..         MOV     ?V0 + 0,R5
   \   00001A   7417         MOV     A,#0x17
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   78..         MOV     R0,#?V0 + 4
   \   000021   12....       LCALL   ?L_MOV_X
   \   000024   741F         MOV     A,#0x1f
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 10,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 11,A
   \   000030   7421         MOV     A,#0x21
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V0 + 2,A
   1705            uint8 *buf;
   1706            uint8 *pBuf;
   1707            uint8 len;
   1708          
   1709            (void)securityEnable;  // Intentionally unreferenced parameter
   1710          
   1711            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1712            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   000038   740A         MOV     A,#0xa
   \   00003A   25..         ADD     A,?V0 + 0
   \   00003C   F5..         MOV     ?V0 + 1,A
   1713          
   1714            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00003E                ; Setup parameters for call to function osal_mem_alloc
   \   00003E   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000041   12....       LCALL   ??osal_mem_alloc?relay
   \   000044   8A..         MOV     ?V0 + 8,R2
   \   000046   8B..         MOV     ?V0 + 9,R3
   \   000048   AE..         MOV     R6,?V0 + 8
   \   00004A   AF..         MOV     R7,?V0 + 9
   1715            if ( buf == NULL )
   \   00004C   EE           MOV     A,R6
   \   00004D   4F           ORL     A,R7
   \   00004E   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1716            {
   1717              return afStatus_MEM_FAIL;
   \   000050   7910         MOV     R1,#0x10
   \   000052   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1718            }
   1719          
   1720            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   A3           INC     DPTR
   1721          
   1722            *pBuf++ = status;
   \   00005A   E5..         MOV     A,?V0 + 3
   \   00005C   12....       LCALL   ?Subroutine48 & 0xFFFF
   1723          
   1724            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_60:
   \   00005F                ; Setup parameters for call to function osal_buffer_uint32
   \   00005F   78..         MOV     R0,#?V0 + 4
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000064   12....       LCALL   ??osal_buffer_uint32?relay
   \   000067   7404         MOV     A,#0x4
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   741B         MOV     A,#0x1b
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   12....       LCALL   ?Subroutine27 & 0xFFFF
   1725          
   1726            *pBuf++ = LO_UINT16( totalTransmissions );
   1727            *pBuf++ = HI_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_24:
   \   000074   AA82         MOV     R2,DPL
   \   000076   AB83         MOV     R3,DPH
   \   000078   741D         MOV     A,#0x1d
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   12....       LCALL   ?Subroutine27 & 0xFFFF
   1728          
   1729            *pBuf++ = LO_UINT16( transmissionFailures );
   1730            *pBuf++ = HI_UINT16( transmissionFailures );
   1731          
   1732            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_25:
   \   000080   E5..         MOV     A,?V0 + 0
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   0A           INC     R2
   \   000085   0A           INC     R2
   \   000086   0A           INC     R2
   \   000087   AB83         MOV     R3,DPH
   1733          
   1734            if ( listCount > 0 )
   \   000089   601D         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1735              osal_memcpy( pBuf, energyValues, listCount );
   \   00008B                ; Setup parameters for call to function osal_memcpy
   \   00008B   85....       MOV     ?V0 + 4,?V0 + 10
   \   00008E   85....       MOV     ?V0 + 5,?V0 + 11
   \   000091   75..00       MOV     ?V0 + 6,#0x0
   \   000094   78..         MOV     R0,#?V0 + 4
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000099   85....       MOV     ?V0 + 4,?V0 + 0
   \   00009C   AC..         MOV     R4,?V0 + 4
   \   00009E   7D00         MOV     R5,#0x0
   \   0000A0   12....       LCALL   ??osal_memcpy?relay
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
   1736          
   1737            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   0000A8   8E82         MOV     DPL,R6
   \   0000AA   8F83         MOV     DPH,R7
   \   0000AC   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0000AF   E5..         MOV     A,?V0 + 2
   \   0000B1   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5                ; Setup parameters for call to function fillAndSend
   \   0000B5   75..38       MOV     ?V0 + 4,#0x38
   \   0000B8   75..80       MOV     ?V0 + 5,#-0x80
   \   0000BB   78..         MOV     R0,#?V0 + 4
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0   A9..         MOV     R1,?V0 + 1
   \   0000C2   AC..         MOV     R4,?V0 + 12
   \   0000C4   AD..         MOV     R5,?V0 + 13
   \   0000C6   7402         MOV     A,#0x2
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   AA82         MOV     R2,DPL
   \   0000CD   AB83         MOV     R3,DPH
   \   0000CF   12....       LCALL   ??fillAndSend?relay
   \   0000D2   7402         MOV     A,#0x2
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV     A,R1
   \   0000D8   F5..         MOV     ?V0 + 1,A
   \   0000DA                ; Setup parameters for call to function osal_mem_free
   \   0000DA   EE           MOV     A,R6
   \   0000DB   FA           MOV     R2,A
   \   0000DC   EF           MOV     A,R7
   \   0000DD   FB           MOV     R3,A
   \   0000DE   12....       LCALL   ??osal_mem_free?relay
   \   0000E1   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000E4   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000EE   E4           CLR     A
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   A9..         MOV     R1,?V0 + 1
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000F2   02....       LJMP    ?Subroutine5 & 0xFFFF
   1738          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   22           RET
   1739          
   1740          /*********************************************************************
   1741           * Functions to register for ZDO Over-the-air messages
   1742           */
   1743          
   1744          /*********************************************************************
   1745           * @fn          ZDO_RegisterForZDOMsg
   1746           *
   1747           * @brief       Call this function to register of an incoming over
   1748           *              the air ZDO message - probably a response message
   1749           *              but requests can also be received.
   1750           *              Messages are delivered to the task with ZDO_CB_MSG
   1751           *              as the message ID.
   1752           *
   1753           * @param       taskID - Where you would like the message delivered
   1754           * @param       clusterID - What message?
   1755           *
   1756           * @return      ZSuccess - successful, ZMemError if not
   1757           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1758          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1759          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   1760            ZDO_MsgCB_t *pList;
   1761            ZDO_MsgCB_t *pLast;
   1762            ZDO_MsgCB_t *pNew;
   1763          
   1764            // Look for duplicate
   1765            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000011   EE           MOV     A,R6
   \   000012   F8           MOV     R0,A
   \   000013   EF           MOV     A,R7
   \   000014   8028         SJMP    ??CrossCallReturnLabel_268
   1766            while ( pList )
   1767            {
   1768              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   65..         XRL     A,?V0 + 2
   \   00001F   7012         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   65..         XRL     A,?V0 + 0
   \   00002B   7004         JNZ     ??ZDO_RegisterForZDOMsg_2
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   65..         XRL     A,?V0 + 1
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000031   6053         JZ      ??CrossCallReturnLabel_161
   1769                return ( ZSuccess );
   1770              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000033   E8           MOV     A,R0
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   FF           MOV     R7,A
   1771              pList = (ZDO_MsgCB_t *)pList->next;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   1772            }
   \                     ??CrossCallReturnLabel_268:
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   70D3         JNZ     ??ZDO_RegisterForZDOMsg_0
   1773          
   1774            // Add to the list
   1775            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   7A05         MOV     R2,#0x5
   \   000045   7B00         MOV     R3,#0x0
   \   000047   12....       LCALL   ??osal_mem_alloc?relay
   \   00004A   8A..         MOV     ?V0 + 4,R2
   \   00004C   8B..         MOV     ?V0 + 5,R3
   \   00004E   A8..         MOV     R0,?V0 + 4
   \   000050   A9..         MOV     R1,?V0 + 5
   1776            if ( pNew )
   \   000052   E8           MOV     A,R0
   \   000053   49           ORL     A,R1
   \   000054   6034         JZ      ??ZDO_RegisterForZDOMsg_3
   1777            {
   1778              pNew->taskID = taskID;
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E5..         MOV     A,?V0 + 2
   \   00005E   12....       LCALL   ?Subroutine56 & 0xFFFF
   1779              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_76:
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E5..         MOV     A,?V0 + 0
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   E5..         MOV     A,?V0 + 1
   \   00006A   12....       LCALL   ?Subroutine56 & 0xFFFF
   1780              pNew->next = NULL;
   \                     ??CrossCallReturnLabel_77:
   \   00006D   E4           CLR     A
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   F0           MOVX    @DPTR,A
   1781              if ( zdoMsgCBs )
   \   000071   90....       MOV     DPTR,#zdoMsgCBs
   \   000074   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000077   4B           ORL     A,R3
   \   000078   6006         JZ      ??ZDO_RegisterForZDOMsg_4
   1782              {
   1783                pLast->next = pNew;
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   8003         SJMP    ??ZDO_RegisterForZDOMsg_5
   1784              }
   1785              else
   1786                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   000080   90....       MOV     DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000083   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   1787              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_161:
   \   000086   7900         MOV     R1,#0x0
   \   000088   8002         SJMP    ??ZDO_RegisterForZDOMsg_6
   1788            }
   1789            else
   1790              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   00008A   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   00008C   02....       LJMP    ?Subroutine1 & 0xFFFF
   1791          }
   1792          
   1793          /*********************************************************************
   1794           * @fn          ZDO_RemoveRegisteredCB
   1795           *
   1796           * @brief       Call this function if you don't want to receive the
   1797           *              incoming message.
   1798           *
   1799           * @param       taskID - Where the messages are being delivered.
   1800           * @param       clusterID - What message?
   1801           *
   1802           * @return      ZSuccess - successful, ZFailure if not found
   1803           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1804          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1805          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FC           MOV     R4,A
   \   000009   EB           MOV     A,R3
   \   00000A   FD           MOV     R5,A
   1806            ZDO_MsgCB_t *pList;
   1807            ZDO_MsgCB_t *pLast = NULL;
   \   00000B   7800         MOV     R0,#0x0
   \   00000D   7900         MOV     R1,#0x0
   1808          
   1809            pList = zdoMsgCBs;
   \   00000F   90....       MOV     DPTR,#zdoMsgCBs
   \   000012   8008         SJMP    ??ZDO_RemoveRegisteredCB_0
   1810            while ( pList )
   1811            {
   1812              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1813              {
   1814                if ( pLast )
   1815                {
   1816                  // remove this one from the linked list
   1817                  pLast->next = pList->next;
   1818                }
   1819                else if ( pList->next )
   1820                {
   1821                  // remove the first one from the linked list
   1822                  zdoMsgCBs = pList->next;
   1823                }
   1824                else
   1825                {
   1826                  // remove the only item from the list
   1827                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1828                }
   1829                osal_mem_free( pList );
   1830                return ( ZSuccess );
   1831              }
   1832              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000014   EA           MOV     A,R2
   \   000015   F8           MOV     R0,A
   \   000016   EB           MOV     A,R3
   \   000017   F9           MOV     R1,A
   1833              pList = pList->next;
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   00001C   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00001F   4B           ORL     A,R3
   \   000020   6048         JZ      ??ZDO_RemoveRegisteredCB_2
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6E           XRL     A,R6
   \   00002A   70E8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6C           XRL     A,R4
   \   000035   7003         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6D           XRL     A,R5
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   00003A   70D8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   00003C   E8           MOV     A,R0
   \   00003D   49           ORL     A,R1
   \   00003E   8A82         MOV     DPL,R2
   \   000040   8B83         MOV     DPH,R3
   \   000042   600D         JZ      ??ZDO_RemoveRegisteredCB_4
   \   000044   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000047   8882         MOV     DPL,R0
   \   000049   8983         MOV     DPH,R1
   \   00004B   EC           MOV     A,R4
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   ED           MOV     A,R5
   \   00004F   8011         SJMP    ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000051   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000054   90....       MOV     DPTR,#zdoMsgCBs
   \   000057   6006         JZ      ??ZDO_RemoveRegisteredCB_6
   \   000059   E8           MOV     A,R0
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   E9           MOV     A,R1
   \   00005D   8003         SJMP    ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   00005F   E4           CLR     A
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000062   F0           MOVX    @DPTR,A
   \   000063                ; Setup parameters for call to function osal_mem_free
   \   000063   12....       LCALL   ??osal_mem_free?relay
   \   000066   7900         MOV     R1,#0x0
   \   000068   8002         SJMP    ??ZDO_RemoveRegisteredCB_7
   1834            }
   1835          
   1836            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   00006A   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   00006C   7F01         MOV     R7,#0x1
   \   00006E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1837          }
   1838          
   1839          /*********************************************************************
   1840           * @fn          ZDO_SendMsgCBs
   1841           *
   1842           * @brief       This function sends messages to registered tasks.
   1843           *              Local to ZDO and shouldn't be called outside of ZDO.
   1844           *
   1845           * @param       inMsg - incoming message
   1846           *
   1847           * @return      TRUE if sent to at least 1 task, FALSE if not
   1848           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   2410         ADD     A,#0x10
   \   000004                REQUIRE ??Subroutine112_0
   \   000004                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 3
   \   000004                REQUIRE ??Subroutine113_0
   \   000004                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1849          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1850          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   1851            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V0 + 4,#0x0
   1852            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1853            while ( pList )
   1854            {
   1855              if ( pList->clusterID == inMsg->clusterID )
   \                     ??ZDO_SendMsgCBs_1:
   \   000012   85..82       MOV     DPL,?V0 + 0
   \   000015   85..83       MOV     DPH,?V0 + 1
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   00001E   E5..         MOV     A,?V0 + 2
   \   000020   240C         ADD     A,#0xc
   \   000022   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000025   68           XRL     A,R0
   \   000026   7003         JNZ     ??ZDO_SendMsgCBs_2
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   69           XRL     A,R1
   \                     ??ZDO_SendMsgCBs_2:
   \   00002B   6003         JZ      $+5
   \   00002D   02....       LJMP    ??ZDO_SendMsgCBs_3 & 0xFFFF
   1856              {
   1857                zdoIncomingMsg_t *msgPtr;
   1858          
   1859                // Send the address to the task
   1860                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \   000030                ; Setup parameters for call to function osal_msg_allocate
   \   000030   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000033   2415         ADD     A,#0x15
   \   000035   FA           MOV     R2,A
   \   000036   E4           CLR     A
   \   000037   3400         ADDC    A,#0x0
   \   000039   FB           MOV     R3,A
   \   00003A   12....       LCALL   ??osal_msg_allocate?relay
   \   00003D   8A..         MOV     ?V0 + 6,R2
   \   00003F   8B..         MOV     ?V0 + 7,R3
   \   000041   AE..         MOV     R6,?V0 + 6
   \   000043   AF..         MOV     R7,?V0 + 7
   1861                if ( msgPtr )
   \   000045   EE           MOV     A,R6
   \   000046   4F           ORL     A,R7
   \   000047   6071         JZ      ??ZDO_SendMsgCBs_3
   1862                {
   1863                  // copy struct
   1864                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   000049                ; Setup parameters for call to function osal_memcpy
   \   000049   85....       MOV     ?V0 + 4,?V0 + 2
   \   00004C   85....       MOV     ?V0 + 5,?V0 + 3
   \   00004F   75..00       MOV     ?V0 + 6,#0x0
   \   000052   78..         MOV     R0,#?V0 + 4
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000057   7C15         MOV     R4,#0x15
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   12....       LCALL   ??osal_memcpy?relay
   \   00005E   7403         MOV     A,#0x3
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
   1865          
   1866                  if ( inMsg->asduLen )
   \   000063   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000066   6037         JZ      ??ZDO_SendMsgCBs_4
   1867                  {
   1868                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   000068   EE           MOV     A,R6
   \   000069   2415         ADD     A,#0x15
   \   00006B   FA           MOV     R2,A
   \   00006C   EF           MOV     A,R7
   \   00006D   3400         ADDC    A,#0x0
   \   00006F   FB           MOV     R3,A
   \   000070   EE           MOV     A,R6
   \   000071   2413         ADD     A,#0x13
   \   000073   F582         MOV     DPL,A
   \   000075   EF           MOV     A,R7
   \   000076   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000079   EA           MOV     A,R2
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   EB           MOV     A,R3
   \   00007D   F0           MOVX    @DPTR,A
   1869                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   00007E                ; Setup parameters for call to function osal_memcpy
   \   00007E   E5..         MOV     A,?V0 + 2
   \   000080   2413         ADD     A,#0x13
   \   000082   F582         MOV     DPL,A
   \   000084   E5..         MOV     A,?V0 + 3
   \   000086   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   1870                  }
   \                     ??CrossCallReturnLabel_229:
   \   000089   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00008C   78..         MOV     R0,#?V0 + 4
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000091   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000094   FC           MOV     R4,A
   \   000095   7D00         MOV     R5,#0x0
   \   000097   12....       LCALL   ??osal_memcpy?relay
   \   00009A   7403         MOV     A,#0x3
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   1871          
   1872                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_4:
   \   00009F   8E82         MOV     DPL,R6
   \   0000A1   8F83         MOV     DPH,R7
   \   0000A3   74D3         MOV     A,#-0x2d
   \   0000A5   F0           MOVX    @DPTR,A
   1873                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000A6                ; Setup parameters for call to function osal_msg_send
   \   0000A6   EE           MOV     A,R6
   \   0000A7   FA           MOV     R2,A
   \   0000A8   EF           MOV     A,R7
   \   0000A9   FB           MOV     R3,A
   \   0000AA   85..82       MOV     DPL,?V0 + 0
   \   0000AD   85..83       MOV     DPH,?V0 + 1
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   12....       LCALL   ??osal_msg_send?relay
   1874                  ret = TRUE;
   \   0000B7   75..01       MOV     ?V0 + 4,#0x1
   1875                }
   1876              }
   1877              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_3:
   \   0000BA   85..82       MOV     DPL,?V0 + 0
   \   0000BD   85..83       MOV     DPH,?V0 + 1
   1878            }
   \                     ??ZDO_SendMsgCBs_0:
   \   0000C0   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   0000C3   E5..         MOV     A,?V0 + 0
   \   0000C5   45..         ORL     A,?V0 + 1
   \   0000C7   6003         JZ      $+5
   \   0000C9   02....       LJMP    ??ZDO_SendMsgCBs_1 & 0xFFFF
   1879            return ( ret );
   \   0000CC   A9..         MOV     R1,?V0 + 4
   \   0000CE   02....       LJMP    ??Subroutine83_0 & 0xFFFF
   1880          }
   1881          
   1882          /*********************************************************************
   1883           * Incoming message processor
   1884           */
   1885          
   1886          /*********************************************************************
   1887           * @fn          ZDP_IncomingData
   1888           *
   1889           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1890           *              from the APS sub-layer to the ZDO.
   1891           *
   1892           * @param       pData - Incoming Message
   1893           *
   1894           * @return      none
   1895           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1896          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1897          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1898            uint8 x = 0;
   \   00000A   75..00       MOV     ?V0 + 2,#0x0
   1899            uint8 handled;
   1900            zdoIncomingMsg_t inMsg;
   1901          
   1902            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000D   740A         MOV     A,#0xa
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?Subroutine57 & 0xFFFF
   1903            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_79:
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   1904            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_162:
   \   000024   EA           MOV     A,R2
   \   000025   2415         ADD     A,#0x15
   \   000027   F582         MOV     DPL,A
   \   000029   EB           MOV     A,R3
   \   00002A   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00002D   C0E0         PUSH    A
   \   00002F   740B         MOV     A,#0xb
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   12....       LCALL   ?Subroutine57 & 0xFFFF
   1905            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_80:
   \   000039   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   00003C   740C         MOV     A,#0xc
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   1906            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_163:
   \   000044   EA           MOV     A,R2
   \   000045   2419         ADD     A,#0x19
   \   000047   F582         MOV     DPL,A
   \   000049   EB           MOV     A,R3
   \   00004A   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   00004D   C0E0         PUSH    A
   \   00004F   740E         MOV     A,#0xe
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   D0E0         POP     A
   \   000056   F0           MOVX    @DPTR,A
   1907          
   1908            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000057   EA           MOV     A,R2
   \   000058   2420         ADD     A,#0x20
   \   00005A   F582         MOV     DPL,A
   \   00005C   EB           MOV     A,R3
   \   00005D   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000060   14           DEC     A
   \   000061   C0E0         PUSH    A
   \   000063   7410         MOV     A,#0x10
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   D0E0         POP     A
   \   00006A   F0           MOVX    @DPTR,A
   1909            inMsg.asdu = pData->cmd.Data+1;
   \   00006B   EA           MOV     A,R2
   \   00006C   2422         ADD     A,#0x22
   \   00006E   F8           MOV     R0,A
   \   00006F   EB           MOV     A,R3
   \   000070   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000073   2401         ADD     A,#0x1
   \   000075   FC           MOV     R4,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   3400         ADDC    A,#0x0
   \   00007A   FD           MOV     R5,A
   \   00007B   7413         MOV     A,#0x13
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   EC           MOV     A,R4
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   ED           MOV     A,R5
   \   000084   12....       LCALL   ?Subroutine56 & 0xFFFF
   1910            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_78:
   \   000087   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   C0E0         PUSH    A
   \   00008D   740F         MOV     A,#0xf
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   D0E0         POP     A
   \   000094   F0           MOVX    @DPTR,A
   1911            inMsg.macDestAddr = pData->macDestAddr;
   \   000095   EA           MOV     A,R2
   \   000096   2412         ADD     A,#0x12
   \   000098   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00009B   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   00009E   7411         MOV     A,#0x11
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   1912          
   1913            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_164:
   \   0000A6                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000A6   85..82       MOV     DPL,?XSP + 0
   \   0000A9   85..83       MOV     DPH,?XSP + 1
   \   0000AC   AA82         MOV     R2,DPL
   \   0000AE   AB83         MOV     R3,DPH
   \   0000B0   12....       LCALL   ??ZDO_SendMsgCBs?relay
   \   0000B3   E9           MOV     A,R1
   \   0000B4   FA           MOV     R2,A
   \   0000B5   8002         SJMP    ??ZDP_IncomingData_0
   1914          
   1915          #if (defined MT_ZDO_CB_FUNC)
   1916          #if !defined MT_TASK
   1917            if (zgZdoDirectCB)
   1918          #endif
   1919            {
   1920              MT_ZdoDirectCB( pData, &inMsg );
   1921            }
   1922          #endif
   1923          
   1924            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1925            {
   1926              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1927              {
   1928                zdpMsgProcs[x].pFn( &inMsg );
   1929                return;
   1930              }
   1931              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000B7   05..         INC     ?V0 + 2
   \                     ??ZDP_IncomingData_0:
   \   0000B9   85....       MOV     ?V0 + 0,?V0 + 2
   \   0000BC   75..00       MOV     ?V0 + 1,#0x0
   \   0000BF   7402         MOV     A,#0x2
   \   0000C1   78..         MOV     R0,#?V0 + 0
   \   0000C3   12....       LCALL   ?S_SHL
   \   0000C6   74..         MOV     A,#zdpMsgProcs & 0xff
   \   0000C8   25..         ADD     A,?V0 + 0
   \   0000CA   F582         MOV     DPL,A
   \   0000CC   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   0000CE   35..         ADDC    A,?V0 + 1
   \   0000D0   F583         MOV     DPH,A
   \   0000D2   E4           CLR     A
   \   0000D3   93           MOVC    A,@A+DPTR
   \   0000D4   F8           MOV     R0,A
   \   0000D5   7401         MOV     A,#0x1
   \   0000D7   93           MOVC    A,@A+DPTR
   \   0000D8   F9           MOV     R1,A
   \   0000D9   74FF         MOV     A,#-0x1
   \   0000DB   68           XRL     A,R0
   \   0000DC   7003         JNZ     ??ZDP_IncomingData_2
   \   0000DE   74FF         MOV     A,#-0x1
   \   0000E0   69           XRL     A,R1
   \                     ??ZDP_IncomingData_2:
   \   0000E1   6045         JZ      ??ZDP_IncomingData_3
   \   0000E3   E4           CLR     A
   \   0000E4   93           MOVC    A,@A+DPTR
   \   0000E5   F8           MOV     R0,A
   \   0000E6   7401         MOV     A,#0x1
   \   0000E8   93           MOVC    A,@A+DPTR
   \   0000E9   F9           MOV     R1,A
   \   0000EA   740C         MOV     A,#0xc
   \   0000EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   68           XRL     A,R0
   \   0000F1   7003         JNZ     ??ZDP_IncomingData_4
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   69           XRL     A,R1
   \                     ??ZDP_IncomingData_4:
   \   0000F6   70BF         JNZ     ??ZDP_IncomingData_1
   \   0000F8                ; Setup parameters for indirect call
   \   0000F8   85..82       MOV     DPL,?XSP + 0
   \   0000FB   85..83       MOV     DPH,?XSP + 1
   \   0000FE   AA82         MOV     R2,DPL
   \   000100   AB83         MOV     R3,DPH
   \   000102   75..00       MOV     ?V0 + 3,#0x0
   \   000105   7402         MOV     A,#0x2
   \   000107   78..         MOV     R0,#?V0 + 2
   \   000109   12....       LCALL   ?S_SHL
   \   00010C   74..         MOV     A,#(zdpMsgProcs + 2) & 0xff
   \   00010E   25..         ADD     A,?V0 + 2
   \   000110   F582         MOV     DPL,A
   \   000112   74..         MOV     A,#((zdpMsgProcs + 2) >> 8) & 0xff
   \   000114   35..         ADDC    A,?V0 + 3
   \   000116   F583         MOV     DPH,A
   \   000118   E4           CLR     A
   \   000119   93           MOVC    A,@A+DPTR
   \   00011A   C0E0         PUSH    A
   \   00011C   7401         MOV     A,#0x1
   \   00011E   93           MOVC    A,@A+DPTR
   \   00011F   F583         MOV     DPH,A
   \   000121   D082         POP     DPL
   \   000123   12....       LCALL   ?CALL_IND
   \   000126   8010         SJMP    ??ZDP_IncomingData_5
   1932            }
   1933          
   1934            // Handle unhandled messages
   1935            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   000128   EA           MOV     A,R2
   \   000129   700D         JNZ     ??ZDP_IncomingData_5
   1936              ZDApp_InMsgCB( &inMsg );
   \   00012B                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00012B   85..82       MOV     DPL,?XSP + 0
   \   00012E   85..83       MOV     DPH,?XSP + 1
   \   000131   AA82         MOV     R2,DPL
   \   000133   AB83         MOV     R3,DPH
   \   000135   12....       LCALL   ??ZDApp_InMsgCB?relay
   \                     ??ZDP_IncomingData_5:
   \   000138   7415         MOV     A,#0x15
   \   00013A   02....       LJMP    ??Subroutine107_0 & 0xFFFF
   1937          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??fillAndSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NWKAddrOfInterestReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NwkAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IEEEAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_DeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zdpProcessAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NodeDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_PowerDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EPRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_GenericRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_BindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveRegisteredCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SendMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   1938          
   1939          /*********************************************************************
   1940          *********************************************************************/
   1941          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       1      0     14  ZDO_RegisterForZDOMsg
                          0 0 14 -> osal_mem_alloc
       0      0      9  ZDO_RemoveRegisteredCB
                          0 0  9 -> osal_mem_free
       0      0     52  ZDO_SendMsgCBs
                          0 0 19 -> osal_memcpy
                          0 0 16 -> osal_msg_allocate
                          0 0 16 -> osal_msg_send
       1      0     28  ZDP_BindUnbindReq
                          0 0 20 -> fillAndSend
                          0 0 18 -> sAddrExtCpy
                          1 0 18 -> sAddrExtCpy
       1      0     22  ZDP_DeviceAnnce
                          0 0 21 -> fillAndSend
                          0 0 19 -> sAddrExtCpy
       1      0     26  ZDP_EPRsp
                          0 0 18 -> fillAndSend
                          0 0 19 -> osal_memcpy
       1      0     29  ZDP_EndDeviceBindReq
                          0 0 18 -> NLME_GetExtAddr
                          0 0 18 -> NLME_GetShortAddr
                          0 0 20 -> fillAndSend
                          0 0 18 -> sAddrExtCpy
       1      0     17  ZDP_GenericRsp
                          0 0 13 -> fillAndSend
       1      0     21  ZDP_IEEEAddrReq
                          0 0 21 -> fillAndSend
       1      0     33  ZDP_IncomingData
                          0 0 33 -> ZDApp_InMsgCB
                          0 0 33 -> ZDO_SendMsgCBs
       1      0     24  ZDP_MatchDescReq
                          0 0 16 -> fillAndSend
       1      0     28  ZDP_MgmtBindRsp
                          0 0 23 -> fillAndSend
                          0 0 21 -> osal_mem_alloc
                          0 0 21 -> osal_mem_free
                          0 0 21 -> sAddrExtCpy
       1      0     15  ZDP_MgmtDirectJoinReq
                          0 0 14 -> fillAndSend
                          0 0 12 -> sAddrExtCpy
       0      0     16  ZDP_MgmtLeaveReq
                          0 0 14 -> fillAndSend
                          0 0 12 -> sAddrExtCpy
       1      0     29  ZDP_MgmtLqiRsp
                          0 0 24 -> fillAndSend
                          0 0 22 -> osal_mem_alloc
                          0 0 22 -> osal_mem_free
                          0 0 22 -> sAddrExtCpy
       1      0     24  ZDP_MgmtNwkDiscReq
                          0 0 18 -> fillAndSend
                          0 0 20 -> osal_buffer_uint32
       1      0     30  ZDP_MgmtNwkDiscRsp
                          0 0 25 -> fillAndSend
                          0 0 23 -> osal_mem_alloc
                          0 0 23 -> osal_mem_free
                          0 0 23 -> sAddrExtCpy
       1      0     39  ZDP_MgmtNwkUpdateNotify
                          0 0 25 -> fillAndSend
                          0 0 27 -> osal_buffer_uint32
                          0 0 23 -> osal_mem_alloc
                          0 0 23 -> osal_mem_free
                          0 0 26 -> osal_memcpy
       1      0     26  ZDP_MgmtNwkUpdateReq
                          0 0 18 -> fillAndSend
                          0 0 20 -> osal_buffer_uint32
       1      0     12  ZDP_MgmtPermitJoinReq
                          0 0 12 -> fillAndSend
       1      0     26  ZDP_MgmtRtgRsp
                          0 0 21 -> fillAndSend
                          0 0 19 -> osal_mem_alloc
                          0 0 19 -> osal_mem_free
       1      0     13  ZDP_NWKAddrOfInterestReq
                          0 0 12 -> fillAndSend
       1      0     14  ZDP_NodeDescMsg
                          0 0 12 -> fillAndSend
       1      0     25  ZDP_NwkAddrReq
                          0 0 25 -> fillAndSend
                          0 0 23 -> sAddrExtCmp
                          0 0 23 -> sAddrExtCpy
       1      0     14  ZDP_PowerDescMsg
                          0 0 12 -> fillAndSend
       1      0     21  ZDP_SendData
                          0 0 16 -> fillAndSend
       1      0     21  ZDP_ServerDiscReq
                          0 0 21 -> fillAndSend
       1      0     17  ZDP_ServerDiscRsp
                          0 0 13 -> fillAndSend
       1      0     18  ZDP_SimpleDescMsg
                          0 0 18 -> fillAndSend
       1      0     13  ZDP_SimpleDescReq
                          0 0 12 -> fillAndSend
       1      0     25  ZDP_UserDescRsp
                          0 0 21 -> fillAndSend
                          0 0 22 -> osal_memcpy
       1      0     24  ZDP_UserDescSet
                          0 0 21 -> fillAndSend
                          1 0 22 -> osal_memcpy
                          0 0 19 -> osal_memset
       1      0     71  fillAndSend
                          0 0 37 -> AF_DataRequest
                          0 0 28 -> osal_memset
       1      0     34  zdpProcessAddrReq
                          0 0 32 -> AddrMgrEntryGet
                          0 0 32 -> AssocGetWithExt
                          0 0 32 -> AssocGetWithShort
                          0 0 32 -> AssocMakeList
                          0 0 34 -> fillAndSend
                          0 0 32 -> osal_mem_free
                          0 0 32 -> sAddrExtCmp
                          0 0 32 -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       1  ??Subroutine100_0
       5  ??Subroutine101_0
       1  ??Subroutine102_0
      10  ??Subroutine103_0
       4  ??Subroutine104_0
       7  ??Subroutine105_0
       6  ??Subroutine106_0
       8  ??Subroutine107_0
       8  ??Subroutine108_0
       1  ??Subroutine109_0
       5  ??Subroutine110_0
       4  ??Subroutine111_0
       4  ??Subroutine112_0
       6  ??Subroutine113_0
       6  ??Subroutine114_0
       8  ??Subroutine115_0
       4  ??Subroutine116_0
       3  ??Subroutine117_0
       5  ??Subroutine118_0
      14  ??Subroutine119_0
       8  ??Subroutine120_0
       6  ??Subroutine121_0
       1  ??Subroutine122_0
       3  ??Subroutine123_0
       4  ??Subroutine124_0
       5  ??Subroutine125_0
       3  ??Subroutine82_0
       5  ??Subroutine83_0
       4  ??Subroutine84_0
       8  ??Subroutine85_0
       5  ??Subroutine86_0
       8  ??Subroutine87_0
       5  ??Subroutine88_0
       7  ??Subroutine89_0
       4  ??Subroutine90_0
       4  ??Subroutine91_0
       6  ??Subroutine92_0
       8  ??Subroutine93_0
       3  ??Subroutine94_0
       5  ??Subroutine95_0
       4  ??Subroutine96_0
       4  ??Subroutine97_0
       5  ??Subroutine98_0
      10  ??Subroutine99_0
       6  ??ZDO_RegisterForZDOMsg?relay
       6  ??ZDO_RemoveRegisteredCB?relay
       6  ??ZDO_SendMsgCBs?relay
       6  ??ZDP_BindUnbindReq?relay
       6  ??ZDP_DeviceAnnce?relay
       6  ??ZDP_EPRsp?relay
       6  ??ZDP_EndDeviceBindReq?relay
       6  ??ZDP_GenericRsp?relay
       6  ??ZDP_IEEEAddrReq?relay
       6  ??ZDP_IncomingData?relay
       6  ??ZDP_MatchDescReq?relay
       6  ??ZDP_MgmtBindRsp?relay
       6  ??ZDP_MgmtDirectJoinReq?relay
       6  ??ZDP_MgmtLeaveReq?relay
       6  ??ZDP_MgmtLqiRsp?relay
       6  ??ZDP_MgmtNwkDiscReq?relay
       6  ??ZDP_MgmtNwkDiscRsp?relay
       6  ??ZDP_MgmtNwkUpdateNotify?relay
       6  ??ZDP_MgmtNwkUpdateReq?relay
       6  ??ZDP_MgmtPermitJoinReq?relay
       6  ??ZDP_MgmtRtgRsp?relay
       6  ??ZDP_NWKAddrOfInterestReq?relay
       6  ??ZDP_NodeDescMsg?relay
       6  ??ZDP_NwkAddrReq?relay
       6  ??ZDP_PowerDescMsg?relay
       6  ??ZDP_SendData?relay
       6  ??ZDP_ServerDiscReq?relay
       6  ??ZDP_ServerDiscRsp?relay
       6  ??ZDP_SimpleDescMsg?relay
       6  ??ZDP_SimpleDescReq?relay
       6  ??ZDP_UserDescRsp?relay
       6  ??ZDP_UserDescSet?relay
       6  ??fillAndSend?relay
       6  ??zdpProcessAddrReq?relay
       9  ?Subroutine0
       5  ?Subroutine1
      41  ?Subroutine10
       3  ?Subroutine11
       8  ?Subroutine12
       3  ?Subroutine13
      30  ?Subroutine14
       6  ?Subroutine15
       3  ?Subroutine16
      14  ?Subroutine17
       8  ?Subroutine18
       8  ?Subroutine19
      10  ?Subroutine2
       1  ?Subroutine20
       4  ?Subroutine21
       8  ?Subroutine22
       7  ?Subroutine23
      13  ?Subroutine24
      14  ?Subroutine25
       8  ?Subroutine26
       4  ?Subroutine27
      15  ?Subroutine28
       7  ?Subroutine29
       2  ?Subroutine3
       1  ?Subroutine30
      13  ?Subroutine31
       8  ?Subroutine32
       6  ?Subroutine33
       3  ?Subroutine34
       3  ?Subroutine35
       6  ?Subroutine36
       5  ?Subroutine37
       1  ?Subroutine38
       4  ?Subroutine39
      23  ?Subroutine4
       9  ?Subroutine40
       1  ?Subroutine41
       7  ?Subroutine42
       3  ?Subroutine43
      10  ?Subroutine44
       9  ?Subroutine45
       5  ?Subroutine46
       6  ?Subroutine47
       7  ?Subroutine48
       5  ?Subroutine49
      10  ?Subroutine5
       6  ?Subroutine50
      13  ?Subroutine51
      13  ?Subroutine52
       4  ?Subroutine53
       8  ?Subroutine54
      10  ?Subroutine55
       6  ?Subroutine56
      10  ?Subroutine57
       4  ?Subroutine58
       5  ?Subroutine59
      21  ?Subroutine6
       4  ?Subroutine60
      11  ?Subroutine61
       5  ?Subroutine62
      16  ?Subroutine63
       7  ?Subroutine64
       2  ?Subroutine65
       4  ?Subroutine66
       1  ?Subroutine67
       3  ?Subroutine68
      15  ?Subroutine69
       6  ?Subroutine7
       8  ?Subroutine70
      11  ?Subroutine71
       9  ?Subroutine72
       5  ?Subroutine73
       4  ?Subroutine74
       9  ?Subroutine75
      13  ?Subroutine76
      15  ?Subroutine77
       6  ?Subroutine78
       8  ?Subroutine79
      34  ?Subroutine8
       9  ?Subroutine80
       3  ?Subroutine81
      14  ?Subroutine9
     143  ZDO_RegisterForZDOMsg
     113  ZDO_RemoveRegisteredCB
     209  ZDO_SendMsgCBs
       1  ZDP_AF_ENDPOINT
     204  ZDP_BindUnbindReq
      80  ZDP_Buf
      74  ZDP_DeviceAnnce
     176  ZDP_EPRsp
     219  ZDP_EndDeviceBindReq
      96  ZDP_GenericRsp
      64  ZDP_IEEEAddrReq
     317  ZDP_IncomingData
     211  ZDP_MatchDescReq
     265  ZDP_MgmtBindRsp
      26  ZDP_MgmtDirectJoinReq
      59  ZDP_MgmtLeaveReq
     348  ZDP_MgmtLqiRsp
      70  ZDP_MgmtNwkDiscReq
     317  ZDP_MgmtNwkDiscRsp
     245  ZDP_MgmtNwkUpdateNotify
     132  ZDP_MgmtNwkUpdateReq
      20  ZDP_MgmtPermitJoinReq
     224  ZDP_MgmtRtgRsp
      15  ZDP_NWKAddrOfInterestReq
     139  ZDP_NodeDescMsg
     123  ZDP_NwkAddrReq
      83  ZDP_PowerDescMsg
     116  ZDP_SendData
      83  ZDP_ServerDiscReq
      82  ZDP_ServerDiscRsp
     270  ZDP_SimpleDescMsg
      27  ZDP_SimpleDescReq
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     144  ZDP_UserDescRsp
     168  ZDP_UserDescSet
     180  fillAndSend
       2  zdoMsgCBs
      48  zdpMsgProcs
     680  zdpProcessAddrReq

 
 6 575 bytes in segment BANKED_CODE
   204 bytes in segment BANK_RELAYS
    49 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
 6 830 bytes of CODE  memory
    86 bytes of XDATA memory

Errors: none
Warnings: none
