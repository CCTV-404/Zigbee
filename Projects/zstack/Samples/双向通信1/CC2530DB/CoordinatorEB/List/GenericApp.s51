///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            23/Nov/2016  20:09:53 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\Source\ /
//                          GenericApp.c                                      /
//    Command line       =  -f E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC25 /
//                          30DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg         /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC25 /
//                          30DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg        /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00100000         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\Lib\micro-electromechan /
//                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sa /
//                          mples\Ë«ÏòÍ¨ÐÅ1\Source\GenericApp.c -D ZIGBEEPRO  /
//                          -D NWK_AUTO_POLL -D ZTOOL_P2 -D MT_TASK -D        /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -lC                    /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\CoordinatorEB\List\ -lA                         /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\CoordinatorEB\List\ --diag_suppress             /
//                          Pe001,Pa010 -o E:\Lib\micro-electromechanical\Ê±Ñ /
//                          Ó\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Ë« /
//                          ÏòÍ¨ÐÅ1\CC2530DB\CoordinatorEB\Obj\ -e            /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\ -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack- /
//                          CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\C /
//                          C2530DB\..\Source\ -I E:\Lib\micro-electromechani /
//                          cal\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam /
//                          ples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\..\..\..\ZMain\TI2530DB\  /
//                          -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC25 /
//                          30DB\..\..\..\..\..\Components\hal\include\ -I    /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\..\..\..\..\..\Components\hal\target\CC2530EB\  /
//                          -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC25 /
//                          30DB\..\..\..\..\..\Components\mac\include\ -I    /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\..\..\..\..\..\Components\mac\high_level\ -I    /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\..\..\..\..\..\Components\mac\low_level\srf04\  /
//                          -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC25 /
//                          30DB\..\..\..\..\..\Components\mac\low_level\srf0 /
//                          4\single_chip\ -I E:\Lib\micro-electromechanical\ /
//                          Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples /
//                          \Ë«ÏòÍ¨ÐÅ1\CC2530DB\..\..\..\..\..\Components\mt\ /
//                           -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC /
//                          2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2 /
//                          530DB\..\..\..\..\..\Components\osal\include\ -I  /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\..\..\..\..\..\Components\services\saddr\ -I    /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\..\..\..\..\..\Components\services\sdata\ -I    /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\..\..\..\..\..\Components\stack\af\ -I          /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\..\..\..\..\..\Components\stack\nwk\ -I         /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sapi\ -I        /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sec\ -I         /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\..\..\..\..\..\Components\stack\sys\ -I         /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\..\..\..\..\..\Components\stack\zdo\ -I         /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\..\..\..\..\..\Components\zmac\ -I              /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\..\..\..\..\..\Components\zmac\f8w\ -Ohz        /
//    List file          =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530D /
//                          B\CoordinatorEB\List\GenericApp.s51               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME GenericApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Delays?relay
        FUNCTION ??Delays?relay,0203H
        PUBLIC ??GenericApp_Init?relay
        FUNCTION ??GenericApp_Init?relay,0203H
        PUBLIC ??GenericApp_ProcessEvent?relay
        FUNCTION ??GenericApp_ProcessEvent?relay,0203H
        FUNCTION ??GenericApp_SendTheMessage?relay,0203H
        PUBLIC ??initUARTSEND?relay
        FUNCTION ??initUARTSEND?relay,0203H
        FUNCTION ??rxCB?relay,0203H
        PUBLIC ADCV
        PUBLIC ADCValue
        PUBLIC AdcValue
        PUBWEAK CLKCONCMD
        PUBWEAK CLKCONSTA
        PUBLIC Delays
        FUNCTION Delays,080203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC GenericApp_ClusterList
        PUBLIC GenericApp_DstAddr
        PUBLIC GenericApp_Init
        FUNCTION GenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC GenericApp_NwkState
        PUBLIC GenericApp_ProcessEvent
        FUNCTION GenericApp_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        FUNCTION GenericApp_SendTheMessage,021203H
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC GenericApp_SimpleDesc
        PUBLIC GenericApp_TaskID
        PUBLIC GenericApp_TransID
        PUBLIC GenericApp_epDesc
        PUBLIC LED
        PUBWEAK P0SEL
        PUBWEAK P2DIR
        PUBWEAK PERCFG
        PUBWEAK U1BAUD
        PUBWEAK U1GCR
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P1
        PUBWEAK _A_U1CSR
        PUBLIC i
        PUBLIC initUARTSEND
        FUNCTION initUARTSEND,0203H
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION rxCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC value
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
HalLedSet           SYMBOL "HalLedSet"
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
HalUARTOpen         SYMBOL "HalUARTOpen"
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
MT_UartInit         SYMBOL "MT_UartInit"
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
RegisterForKeys     SYMBOL "RegisterForKeys"
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
afRegister          SYMBOL "afRegister"
??afRegister?relay  SYMBOL "?relay", afRegister
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
Delays              SYMBOL "Delays"
??Delays?relay      SYMBOL "?relay", Delays
GenericApp_Init     SYMBOL "GenericApp_Init"
??GenericApp_Init?relay SYMBOL "?relay", GenericApp_Init
GenericApp_ProcessEvent SYMBOL "GenericApp_ProcessEvent"
??GenericApp_ProcessEvent?relay SYMBOL "?relay", GenericApp_ProcessEvent
initUARTSEND        SYMBOL "initUARTSEND"
??initUARTSEND?relay SYMBOL "?relay", initUARTSEND

        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\Source\GenericApp.c
//    1 /******************************************************************************
//    2   Filename:       GenericApp.c
//    3   Revised:        $Date: 2012-03-07 01:04:58 -0800 (Wed, 07 Mar 2012) $
//    4   Revision:       $Revision: 29656 $
//    5 
//    6   Description:    Generic Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 ******************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends "Hello World" to another "Generic"
//   45   application every 5 seconds.  The application will also
//   46   receives "Hello World" packets.
//   47 
//   48   The "Hello World" messages are sent/received as MSG type message.
//   49 
//   50   This applications doesn't have a profile, so it handles everything
//   51   directly - itself.
//   52 
//   53   Key control:
//   54     SW1:
//   55     SW2:  initiates end device binding
//   56     SW3:
//   57     SW4:  initiates a match description request
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 #include "OSAL.h"
//   64 #include "AF.h"
//   65 #include "ZDApp.h"
//   66 #include "ZDObject.h"
//   67 #include "ZDProfile.h"
//   68 
//   69 #include "GenericApp.h"
//   70 #include "DebugTrace.h"
//   71 
//   72 #if !defined( WIN32 )
//   73   #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09eH
// unsigned char volatile __sfr CLKCONSTA
CLKCONSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c6H
// unsigned char volatile __sfr CLKCONCMD
CLKCONCMD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f8H
// union <unnamed> volatile __sfr _A_U1CSR
_A_U1CSR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0faH
// unsigned char volatile __sfr U1BAUD
U1BAUD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fcH
// unsigned char volatile __sfr U1GCR
U1GCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   74 #endif
//   75 #include "MT_UART.h" 
//   76 #include "hal_uart.h"
//   77 /* HAL */
//   78 #include "hal_lcd.h"
//   79 #include "hal_led.h"
//   80 #include "hal_key.h"
//   81 #include "hal_uart.h"
//   82 
//   83 /* RTOS */
//   84 #if defined( IAR_ARMCM3_LM )
//   85 #include "RTOS_App.h"
//   86 #endif  
//   87 
//   88 /*********************************************************************
//   89  * MACROS
//   90  */
//   91 
//   92 /*********************************************************************
//   93  * CONSTANTS
//   94  */
//   95 
//   96 /*********************************************************************
//   97  * TYPEDEFS
//   98  */
//   99 
//  100 /*********************************************************************
//  101  * GLOBAL VARIABLES
//  102  */
//  103 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  104 const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
GenericApp_ClusterList:
        DATA16
        DW 8
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
        DW 0
//  105 {
//  106   GENERICAPP_CLUSTERID_DOUBLE,
//  107   
//  108 };
//  109 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  110 const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
GenericApp_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 8
        DATA16
        DW GenericApp_ClusterList
        DATA8
        DB 8
        DATA16
        DW GenericApp_ClusterList
//  111 {
//  112   GENERICAPP_ENDPOINT,              //  int Endpoint;
//  113   GENERICAPP_PROFID,                //  uint16 AppProfId[2];
//  114   GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  115   GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  116   GENERICAPP_FLAGS,                 //  int   AppFlags:4;
//  117   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  118   (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
//  119   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  120   (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
//  121 };
//  122 
//  123 // This is the Endpoint/Interface description.  It is defined here, but
//  124 // filled-in in GenericApp_Init().  Another way to go would be to fill
//  125 // in the structure here and make it a "const" (in code space).  The
//  126 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  127 endPointDesc_t GenericApp_epDesc;
GenericApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  128 
//  129 /*********************************************************************
//  130  * EXTERNAL VARIABLES
//  131  */
//  132 
//  133 /*********************************************************************
//  134  * EXTERNAL FUNCTIONS
//  135  */
//  136 
//  137 /*********************************************************************
//  138  * LOCAL VARIABLES
//  139  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  140 byte GenericApp_TaskID;   // Task ID for internal task/event processing
GenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  141                           // This variable will be received when
//  142                           // GenericApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 devStates_t GenericApp_NwkState;
GenericApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  144 
//  145 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  146 byte GenericApp_TransID;  // This is the unique message ID (counter)
GenericApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  147 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  148 afAddrType_t GenericApp_DstAddr;
GenericApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  149 
//  150 #define ADC_REF_AVDD5 0x80
//  151 #define ADC_REF_125_V 0x00
//  152 #define ADC_14_BIT 0x30
//  153 #define ADC_AIN1_SENS 0x07
//  154 #define ADC_TEMP_SENS 0x0E

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  155 unsigned int   i;
i:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  156 unsigned int  AdcValue;
AdcValue:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  157 unsigned int  value;
value:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  158 unsigned int ADCValue;
ADCValue:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  159 unsigned char ADCV[]="";
ADCV:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  160 void Delays(void) {
Delays:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function Delays
        CODE
        ; Saved register size: 0
        ; Auto size: 0
//  161   unsigned int itemp;
//  162   for(itemp=0;itemp<500;itemp++) {
        MOV     R0,#-0xc
        MOV     R1,#0x1
//  163     asm("nop");
??Delays_0:
        nop
//  164   }
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??Delays_0
//  165 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock0
//  166 /*********************************************************************
//  167  * LOCAL FUNCTIONS
//  168  */
//  169 static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  170 static void GenericApp_HandleKeys( byte shift, byte keys );
//  171 static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  172 static void GenericApp_SendTheMessage( unsigned char *theMessageData );
//  173 
//  174 #if defined( IAR_ARMCM3_LM )
//  175 static void GenericApp_ProcessRtosMessage( void );
//  176 #endif

        RSEG XDATA_I:XDATA:NOROOT(0)
//  177 unsigned  char LED[1]="1";
LED:
        DATA8
        DS 1
        REQUIRE `?<Initializer for LED>`
        REQUIRE __INIT_XDATA_I
//  178 /*********************************************************************
//  179  * NETWORK LAYER CALLBACKS
//  180  */
//  181 
//  182 /*********************************************************************
//  183  * PUBLIC FUNCTIONS
//  184  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  185 void initUARTSEND(void)
initUARTSEND:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function initUARTSEND
        CODE
//  186 {
        ; Saved register size: 0
        ; Auto size: 0
//  187 
//  188     CLKCONCMD &= ~0x40;                          //ÉèÖÃÏµÍ³Ê±ÖÓÔ´Îª32MHZ¾§Õñ
        ANL     0xc6,#0xbf
//  189     while(CLKCONSTA & 0x40);                     //µÈ´ý¾§ÕñÎÈ¶¨
??initUARTSEND_0:
        MOV     A,0x9e
        MOV     C,0xE0 /* A   */.6
        JC      ??initUARTSEND_0
//  190     CLKCONCMD &= ~0x47;                          //ÉèÖÃÏµÍ³Ö÷Ê±ÖÓÆµÂÊÎª32MHZ
        ANL     0xc6,#0xb8
//  191    
//  192   
//  193     //PERCFG  Peripheral-control register
//  194     PERCFG = 0x00;				//Î»ÖÃ1 P0¿Ú
        MOV     0xf1,#0x0
//  195     //POSEL Port0 function-select register
//  196     P0SEL = 0x3c;				//P0_2,P0_3,P0_4,P0_5ÓÃ×÷´®¿Ú
        MOV     0xf3,#0x3c
//  197     P2DIR &= ~0X80;                             //P0ÓÅÏÈ×÷ÎªUART1
        ANL     0xff,#0x7f
//  198 
//  199     U1CSR |= 0x80;				//UART·½Ê½
        SETB    0xf8.7
//  200     U1GCR |= 8;				       
        ORL     0xfc,#0x8
//  201     U1BAUD |= 59;				//²¨ÌØÂÊÉèÎª9600
        ORL     0xfa,#0x3b
//  202     UTX1IF = 0;                                 //UART1 TXÖÐ¶Ï±êÖ¾³õÊ¼ÖÃÎ»0
        CLR     0xe8.2
//  203 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
        REQUIRE CLKCONCMD
        REQUIRE CLKCONSTA
        REQUIRE PERCFG
        REQUIRE P0SEL
        REQUIRE P2DIR
        REQUIRE _A_U1CSR
        REQUIRE U1GCR
        REQUIRE U1BAUD
        REQUIRE _A_IRCON2

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  204 static void rxCB(uint8 port,uint8 event)
rxCB:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function rxCB
        CODE
//  205 {
        FUNCALL rxCB, HalUARTRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
//  206 unsigned  char LED[1];
//  207 
//  208 
//  209   HalUARTRead(1, LED, 1);
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??HalUARTRead?relay
//  210   P1_1=~P1_1;
        MOV     A,0x90
        SETB    B.0
        MOV     C,0x90.1
        JNB     B.0,??rxCB_0
        CPL     C
??rxCB_0:
        MOV     0x90.1,C
//  211   //HalLedBlink(HAL_LED_2,0,50,500);  
//  212   if(LED[0] == '1')
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x31
        JNZ     ??rxCB_1
//  213   {
//  214     P1_0=0;
        CLR     0x90.0
//  215     GenericApp_SendTheMessage(LED);
        ; Setup parameters for call to function GenericApp_SendTheMessage
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GenericApp_SendTheMessage?relay
//  216   }   
//  217   if(LED[0] == '2')
??rxCB_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x32
        JNZ     ??rxCB_2
//  218   {
//  219     P1_0=1;
        SETB    0x90.0
//  220     GenericApp_SendTheMessage(LED);
        ; Setup parameters for call to function GenericApp_SendTheMessage
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GenericApp_SendTheMessage?relay
//  221   }   
//  222   if(LED[0] == '3')
??rxCB_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x33
        JNZ     ??rxCB_3
//  223   {
//  224     P1_0=0;
        CLR     0x90.0
//  225     GenericApp_SendTheMessage(LED);
        ; Setup parameters for call to function GenericApp_SendTheMessage
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GenericApp_SendTheMessage?relay
//  226   }  
//  227   if(LED[0] == '4')
??rxCB_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x34
        JNZ     ??rxCB_4
//  228   {
//  229     P1_0=1;
        SETB    0x90.0
//  230     GenericApp_SendTheMessage(LED);
        ; Setup parameters for call to function GenericApp_SendTheMessage
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GenericApp_SendTheMessage?relay
//  231   }  
//  232   if(LED[0] == '5')
??rxCB_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x35
        JNZ     ??rxCB_5
//  233   {
//  234     P1_0=0;
        CLR     0x90.0
//  235     GenericApp_SendTheMessage(LED);
        ; Setup parameters for call to function GenericApp_SendTheMessage
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GenericApp_SendTheMessage?relay
//  236   }  
//  237   if(LED[0] == '6')
??rxCB_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x36
        JNZ     ??rxCB_6
//  238   {
//  239     P1_0=1;
        SETB    0x90.0
//  240     GenericApp_SendTheMessage(LED);
        ; Setup parameters for call to function GenericApp_SendTheMessage
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??GenericApp_SendTheMessage?relay
//  241   }  
//  242 }
??rxCB_6:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock2
        REQUIRE _A_P1
//  243 /*********************************************************************
//  244  * @fn      GenericApp_Init
//  245  *
//  246  * @brief   Initialization function for the Generic App Task.
//  247  *          This is called during initialization and should contain
//  248  *          any application specific initialization (ie. hardware
//  249  *          initialization/setup, table initialization, power up
//  250  *          notificaiton ... ).
//  251  *
//  252  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  253  *                    used to send messages and set timers.
//  254  *
//  255  * @return  none
//  256  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  257 void GenericApp_Init( uint8 task_id )
GenericApp_Init:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function GenericApp_Init
        CODE
//  258 {
        FUNCALL GenericApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, initUARTSEND
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     ?V0 + 2,R1
//  259   halUARTCfg_t uartConfig;
//  260   GenericApp_TaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#GenericApp_TaskID
        MOVX    @DPTR,A
//  261   GenericApp_NwkState = DEV_INIT;
        MOV     DPTR,#GenericApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  262   GenericApp_TransID = 0;
        MOV     DPTR,#GenericApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  263   MT_UartInit();
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  264   initUARTSEND();
        ; Setup parameters for call to function initUARTSEND
        LCALL   ??initUARTSEND?relay
//  265   MT_UartRegisterTaskID(task_id);
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     R1,?V0 + 2
        LCALL   ??MT_UartRegisterTaskID?relay
//  266   HalUARTWrite(1,"Hello World\n",12);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
        MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  267   HalUARTWrite(1,"Hello,WeBee\n",12);
        MOV     ?V0 + 4,#`?<Constant "Hello,WeBee\\n">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "Hello,WeBee\\n">` >> 8) & 0xff
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  268 
//  269   HalUARTWrite(1,"\n",1);
        MOV     ?V0 + 0,#`?<Constant "\\n">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "\\n">` >> 8) & 0xff
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  270   // Device hardware initialization can be added here or in main() (Zmain.c).
//  271   // If the hardware is application specific - add it here.
//  272   // If the hardware is other parts of the device add it in main().
//  273 
//  274   GenericApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#GenericApp_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  275   GenericApp_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  276   GenericApp_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#GenericApp_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  277 
//  278   // Fill out the endpoint description.
//  279   GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
        MOV     DPTR,#GenericApp_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  280   GenericApp_epDesc.task_id = &GenericApp_TaskID;
        INC     DPTR
        MOV     A,#GenericApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  281   GenericApp_epDesc.simpleDesc
//  282             = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
        INC     DPTR
        MOV     A,#GenericApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  283   GenericApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  284 
//  285   // Register the endpoint description with the AF
//  286   afRegister( &GenericApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#GenericApp_epDesc & 0xff
        MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  287 
//  288   // Register for all key events - This app will handle all key events
//  289   RegisterForKeys( GenericApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  290   uartConfig.configured = TRUE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  291   uartConfig.baudRate = HAL_UART_BR_9600;
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  292   uartConfig.flowControl = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  293   uartConfig.callBackFunc = rxCB;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??rxCB?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxCB?relay >> 8) & 0xff
        LCALL   ?Subroutine2 & 0xFFFF
//  294   HalUARTOpen(1,&uartConfig);
??CrossCallReturnLabel_2:
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??HalUARTOpen?relay
//  295   HalUARTWrite(1,"Hello World\n",12);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
        MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  296   HalUARTWrite(1,"Hello,WeBee\n",12);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  297   HalUARTWrite(1,"Hello World\n",12);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
        MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  298   HalUARTWrite(1,"\n",1);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,#0x1
        LCALL   ??HalUARTWrite?relay
//  299 
//  300   // Update the display
//  301 #if defined ( LCD_SUPPORTED )
//  302   HalLcdWriteString( "GenericApp", HAL_LCD_LINE_1 );
//  303 #endif
//  304 
//  305   ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  306   ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  307 
//  308 #if defined( IAR_ARMCM3_LM )
//  309   // Register this task with RTOS task initiator
//  310   RTOS_RegisterApp( task_id, GENERICAPP_RTOS_MSG_EVT );
//  311 #endif
//  312 }
        MOV     A,#0x1d
          CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 43)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Valid
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  313 
//  314 /*********************************************************************
//  315  * @fn      GenericApp_ProcessEvent
//  316  *
//  317  * @brief   Generic Application Task event processor.  This function
//  318  *          is called to process all events for the task.  Events
//  319  *          include timers, messages and any other user defined events.
//  320  *
//  321  * @param   task_id  - The OSAL assigned task ID.
//  322  * @param   events - events to process.  This is a bit map and can
//  323  *                   contain more than one event.
//  324  *
//  325  * @return  none
//  326  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  327 uint16 GenericApp_ProcessEvent( uint8 task_id, uint16 events )
GenericApp_ProcessEvent:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function GenericApp_ProcessEvent
        CODE
//  328 {
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  329   afIncomingMSGPacket_t *MSGpkt;
//  330   afDataConfirm_t *afDataConfirm;
//  331 
//  332   // Data Confirmation message fields
//  333   byte sentEP;
//  334   ZStatus_t sentStatus;
//  335   byte sentTransID;       // This should match the value sent
//  336   (void)task_id;  // Intentionally unreferenced parameter
//  337 
//  338   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_0 & 0xFFFF
//  339   {
//  340     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??GenericApp_ProcessEvent_1
//  341     while ( MSGpkt )
//  342     {
//  343       switch ( MSGpkt->hdr.event )
//  344       {
//  345         case ZDO_CB_MSG:
//  346           GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  347           break;
//  348 
//  349         case KEY_CHANGE:
//  350           GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  351           break;
//  352 
//  353         case AF_DATA_CONFIRM_CMD:
//  354           // This message is received as a confirmation of a data packet sent.
//  355           // The status is of ZStatus_t type [defined in ZComDef.h]
//  356           // The message fields are defined in AF.h
//  357           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  358           sentEP = afDataConfirm->endpoint;
//  359           sentStatus = afDataConfirm->hdr.status;
//  360           sentTransID = afDataConfirm->transID;
//  361           (void)sentEP;
//  362           (void)sentTransID;
//  363 
//  364           // Action taken when confirmation is received.
//  365           if ( sentStatus != ZSuccess )
//  366           {
//  367             // The data wasn't delivered -- Do something
//  368           }
//  369           break;
//  370 
//  371         case AF_INCOMING_MSG_CMD:
//  372           GenericApp_MessageMSGCB( MSGpkt );
//  373           break;
//  374 
//  375         case ZDO_STATE_CHANGE:
//  376           GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??GenericApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_NwkState
        MOVX    @DPTR,A
//  377           if ( (GenericApp_NwkState == DEV_ZB_COORD)
//  378               || (GenericApp_NwkState == DEV_ROUTER)
//  379               || (GenericApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x9
        JZ      ??GenericApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??GenericApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??GenericApp_ProcessEvent_4
//  380           {
//  381             // Start sending "the" message in a regular interval.
//  382             osal_start_timerEx( GenericApp_TaskID,
//  383                                 GENERICAPP_SEND_MSG_EVT,
//  384                                 GENERICAPP_SEND_MSG_TIMEOUT );
??GenericApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  385           }
//  386           break;
//  387 
//  388         default:
//  389           break;
//  390       }
//  391 
//  392       // Release the memory
//  393       osal_msg_deallocate( (uint8 *)MSGpkt );
??GenericApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  394 
//  395       // Next
//  396       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??GenericApp_ProcessEvent_1:
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_5 & 0xFFFF
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_6 & 0xFFFF
        ADD     A,#0x5a
        JNZ     $+5
        LJMP    ??GenericApp_ProcessEvent_7 & 0xFFFF
        ADD     A,#-0x11
        JZ      ??GenericApp_ProcessEvent_2
        ADD     A,#-0x2
        JNZ     ??GenericApp_ProcessEvent_4
        MOV     A,?V0 + 0
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for GenericApp_ProcessEvent>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GenericApp_ProcessEvent_8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GenericApp_ProcessEvent_9
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GenericApp_ProcessEvent_4
        CODE
??GenericApp_ProcessEvent_8:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??GenericApp_ProcessEvent_4
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??GenericApp_ProcessEvent_10
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??GenericApp_ProcessEvent_10
        MOV     DPTR,#GenericApp_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#GenericApp_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_DstAddr + 9
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
??GenericApp_ProcessEvent_10:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
??GenericApp_ProcessEvent_9:
        MOV     A,?V0 + 0
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        JNZ     ??GenericApp_ProcessEvent_11
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??GenericApp_ProcessEvent_12:
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
??GenericApp_ProcessEvent_11:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        SJMP    ??GenericApp_ProcessEvent_12
??GenericApp_ProcessEvent_7:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.1
        JNC     ??GenericApp_ProcessEvent_13
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
        MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 5
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 5,#0x8
        MOV     R0,#?V0 + 5
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 2,#0x8
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 2,#0x4
        MOV     ?V0 + 3,#0xf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     DPTR,#GenericApp_epDesc
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
??GenericApp_ProcessEvent_13:
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.3
        JC      $+5
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     ?V0 + 2,#GenericApp_ClusterList & 0xff
        MOV     ?V0 + 3,#(GenericApp_ClusterList >> 8) & 0xff
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 4,#0x8
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 2,#0x4
        MOV     ?V0 + 3,#0xf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x8
        MOV     R4,#-0x1
        MOV     R5,#-0x1
        MOV     A,R1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
??GenericApp_ProcessEvent_6:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x8
        JNZ     ??GenericApp_ProcessEvent_14
        INC     DPTR
        MOVX    A,@DPTR
??GenericApp_ProcessEvent_14:
        JZ      $+5
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
        SETB    B.0
        MOV     C,0x90.0
        JNB     B.0,??GenericApp_ProcessEvent_15
        CPL     C
??GenericApp_ProcessEvent_15:
        MOV     0x90.0,C
        LJMP    ??GenericApp_ProcessEvent_4 & 0xFFFF
//  397     }
//  398 
//  399     // return unprocessed events
//  400     return (events ^ SYS_EVENT_MSG);
??GenericApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??GenericApp_ProcessEvent_16
//  401   }
//  402 
//  403   // Send a message out - This event is generated by a timer
//  404   //  (setup in GenericApp_Init()).
//  405   if ( events & GENERICAPP_SEND_MSG_EVT )
??GenericApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??GenericApp_ProcessEvent_17
//  406   {
//  407     // Send "the" message
//  408     //GenericApp_SendTheMessage();
//  409 
//  410     // Setup to send message again
//  411     osal_start_timerEx( GenericApp_TaskID,
//  412                         GENERICAPP_SEND_MSG_EVT,
//  413                         GENERICAPP_SEND_MSG_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  414     GenericApp_SendTheMessage(LED);
        ; Setup parameters for call to function GenericApp_SendTheMessage
        MOV     R2,#LED & 0xff
        MOV     R3,#(LED >> 8) & 0xff
        LCALL   ??GenericApp_SendTheMessage?relay
//  415     // return unprocessed events
//  416     return (events ^ GENERICAPP_SEND_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
??GenericApp_ProcessEvent_16:
        MOV     R3,A
        SJMP    ??GenericApp_ProcessEvent_18
//  417   }
//  418 
//  419   
//  420 #if defined( IAR_ARMCM3_LM )
//  421   // Receive a message from the RTOS queue
//  422   if ( events & GENERICAPP_RTOS_MSG_EVT )
//  423   {
//  424     // Process message from RTOS queue
//  425     GenericApp_ProcessRtosMessage();
//  426 
//  427     // return unprocessed events
//  428     return (events ^ GENERICAPP_RTOS_MSG_EVT);
//  429   }
//  430 #endif
//  431 
//  432   // Discard unknown events
//  433   return 0;
??GenericApp_ProcessEvent_17:
        MOV     R2,#0x0
        MOV     R3,#0x0
??GenericApp_ProcessEvent_18:
        MOV     A,#0x9
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock5
        REQUIRE _A_P1
//  434 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function GenericApp_Init
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 43)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function GenericApp_ProcessEvent
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+0
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function GenericApp_ProcessEvent
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_1
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+0
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function GenericApp_SendTheMessage
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_0
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+0
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
//  435 
//  436 /*********************************************************************
//  437  * Event Generation Functions
//  438  */
//  439 
//  440 /*********************************************************************
//  441  * @fn      GenericApp_ProcessZDOMsgs()
//  442  *
//  443  * @brief   Process response messages
//  444  *
//  445  * @param   none
//  446  *
//  447  * @return  none
//  448  */
//  449 static void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
//  450 {
//  451   switch ( inMsg->clusterID )
//  452   { 
//  453     case End_Device_Bind_rsp:        
//  454       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
//  455       {
//  456         // Light LED
//  457         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  458       }
//  459 #if defined( BLINK_LEDS )
//  460       else
//  461       {
//  462         // Flash LED to show failure
//  463         HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
//  464       }
//  465 #endif
//  466       break;
//  467 
//  468     case Match_Desc_rsp:
//  469       {
//  470         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
//  471         if ( pRsp )
//  472         {
//  473           if ( pRsp->status == ZSuccess && pRsp->cnt )
//  474           {
//  475             GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  476             GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
//  477             // Take the first endpoint, Can be changed to search through endpoints
//  478             GenericApp_DstAddr.endPoint = pRsp->epList[0];
//  479 
//  480             // Light LED
//  481             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
//  482           }
//  483           osal_mem_free( pRsp );
//  484         }
//  485       }
//  486       break;
//  487   }
//  488 }
//  489 
//  490 /*********************************************************************
//  491  * @fn      GenericApp_HandleKeys
//  492  *
//  493  * @brief   Handles all key events for this device.
//  494  *
//  495  * @param   shift - true if in shift/alt.
//  496  * @param   keys - bit field for key events. Valid entries:
//  497  *                 HAL_KEY_SW_4
//  498  *                 HAL_KEY_SW_3
//  499  *                 HAL_KEY_SW_2
//  500  *                 HAL_KEY_SW_1
//  501  *
//  502  * @return  none
//  503  */
//  504 static void GenericApp_HandleKeys( uint8 shift, uint8 keys )
//  505 {
//  506   zAddrType_t dstAddr;
//  507 
//  508   // Shift is used to make each button/switch dual purpose.
//  509   if ( shift )
//  510   {
//  511     if ( keys & HAL_KEY_SW_1 )
//  512     {
//  513     }
//  514     if ( keys & HAL_KEY_SW_2 )
//  515     {
//  516     }
//  517     if ( keys & HAL_KEY_SW_3 )
//  518     {
//  519     }
//  520     if ( keys & HAL_KEY_SW_4 )
//  521     {
//  522     }
//  523   }
//  524   else
//  525   {
//  526     if ( keys & HAL_KEY_SW_1 )
//  527     {
//  528       // Since SW1 isn't used for anything else in this application...
//  529 #if defined( SWITCH1_BIND )
//  530       // we can use SW1 to simulate SW2 for devices that only have one switch,
//  531       keys |= HAL_KEY_SW_2;
//  532 #elif defined( SWITCH1_MATCH )
//  533       // or use SW1 to simulate SW4 for devices that only have one switch
//  534       keys |= HAL_KEY_SW_4;
//  535 #endif
//  536     }
//  537 
//  538     if ( keys & HAL_KEY_SW_2 )
//  539     {
//  540       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  541 
//  542       // Initiate an End Device Bind Request for the mandatory endpoint
//  543       dstAddr.addrMode = Addr16Bit;
//  544       dstAddr.addr.shortAddr = 0x0000; // Coordinator
//  545       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  546                             GenericApp_epDesc.endPoint,
//  547                             GENERICAPP_PROFID,
//  548                             GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
//  549                             GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
//  550                             FALSE );
//  551     }
//  552 
//  553     if ( keys & HAL_KEY_SW_3 )
//  554     {
//  555     }
//  556 
//  557     if ( keys & HAL_KEY_SW_4 )
//  558     {
//  559       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  560       // Initiate a Match Description Request (Service Discovery)
//  561       dstAddr.addrMode = AddrBroadcast;
//  562       dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
//  563       ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
//  564                         GENERICAPP_PROFID,
//  565                         GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
//  566                         GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
//  567                         FALSE );
//  568     }
//  569   }
//  570 }
//  571 
//  572 /*********************************************************************
//  573  * LOCAL FUNCTIONS
//  574  */
//  575 
//  576 /*********************************************************************
//  577  * @fn      GenericApp_MessageMSGCB
//  578  *
//  579  * @brief   Data message processor callback.  This function processes
//  580  *          any incoming data - probably from other devices.  So, based
//  581  *          on cluster ID, perform the intended action.
//  582  *
//  583  * @param   none
//  584  *
//  585  * @return  none
//  586  */
//  587 static void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
//  588 {
//  589   
//  590   switch ( pkt->clusterId )
//  591   {
//  592       case GENERICAPP_CLUSTERID_DOUBLE:
//  593       // "the" message
//  594       P1_0=~P1_0;
//  595 #if defined( LCD_SUPPORTED )
//  596       HalLcdWriteScreen( (char*)pkt->cmd.Data, "rcvd" );
//  597 #elif defined( WIN32 )
//  598       WPRINTSTR( pkt->cmd.Data );
//  599 #endif
//  600       break;
//  601   }
//  602 }
//  603 
//  604 /*********************************************************************
//  605  * @fn      GenericApp_SendTheMessage
//  606  *
//  607  * @brief   Send "the" message.
//  608  *
//  609  * @param   none
//  610  *
//  611  * @return  none
//  612  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  613 static void GenericApp_SendTheMessage(unsigned char *theMessageData)
GenericApp_SendTheMessage:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function GenericApp_SendTheMessage
        CODE
//  614 {
        FUNCALL GenericApp_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  615   afAddrType_t my_DstAddr;
//  616   my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  617   my_DstAddr.endPoint=GENERICAPP_ENDPOINT;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        LCALL   ?Subroutine1 & 0xFFFF
//  618   my_DstAddr.addr.shortAddr=0xFFFF; 
//  619   
//  620   AF_DataRequest(&my_DstAddr
//  621                  ,&GenericApp_epDesc
//  622                    ,GENERICAPP_CLUSTERID_DOUBLE
//  623                        ,1
//  624                        ,theMessageData
//  625                          ,&GenericApp_TransID
//  626                            ,AF_DISCV_ROUTE
//  627                              ,AF_DEFAULT_RADIUS);
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 0,#GenericApp_TransID & 0xff
        MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#0x8
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x20
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  628 }
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function GenericApp_ProcessEvent
          CFI Conditional ??CrossCallReturnLabel_1
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function GenericApp_SendTheMessage
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_0
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+0
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for LED>`:
        DB 31H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delays?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Delays

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??initUARTSEND?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    initUARTSEND

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rxCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_ProcessEvent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_SendTheMessage?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GenericApp_SendTheMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hello World\\n">`:
        DB "Hello World\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Hello,WeBee\\n">`:
        DB "Hello,WeBee\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "\\n">`:
        DB "\012"

        END
//  629 #if defined( IAR_ARMCM3_LM )
//  630 /*********************************************************************
//  631  * @fn      GenericApp_ProcessRtosMessage
//  632  *
//  633  * @brief   Receive message from RTOS queue, send response back.
//  634  *
//  635  * @param   none
//  636  *
//  637  * @return  none
//  638  */
//  639 static void GenericApp_ProcessRtosMessage( void )
//  640 {
//  641   osalQueue_t inMsg;
//  642 
//  643   if ( osal_queue_receive( OsalQueue, &inMsg, 0 ) == pdPASS )
//  644   {
//  645     uint8 cmndId = inMsg.cmnd;
//  646     uint32 counter = osal_build_uint32( inMsg.cbuf, 4 );
//  647 
//  648     switch ( cmndId )
//  649     {
//  650       case CMD_INCR:
//  651         counter += 1;  /* Increment the incoming counter */
//  652                        /* Intentionally fall through next case */
//  653 
//  654       case CMD_ECHO:
//  655       {
//  656         userQueue_t outMsg;
//  657 
//  658         outMsg.resp = RSP_CODE | cmndId;  /* Response ID */
//  659         osal_buffer_uint32( outMsg.rbuf, counter );    /* Increment counter */
//  660         osal_queue_send( UserQueue1, &outMsg, 0 );  /* Send back to UserTask */
//  661         break;
//  662       }
//  663       
//  664       default:
//  665         break;  /* Ignore unknown command */    
//  666     }
//  667   }
//  668 }
//  669 #endif
//  670 
//  671 /*********************************************************************
//  672  */
// 
// 1 204 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
//    10 bytes in segment SFR_AN
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    56 bytes in segment XDATA_ROM_C
//    30 bytes in segment XDATA_Z
// 
// 1 241 bytes of CODE  memory
//    56 bytes of CONST memory
//     0 bytes of DATA  memory (+ 10 bytes shared)
//    31 bytes of XDATA memory
//
//Errors: none
//Warnings: none
