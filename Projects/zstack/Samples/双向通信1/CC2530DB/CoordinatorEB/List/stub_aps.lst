###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             23/Nov/2016  20:09:58 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Components\stack\nwk\stub_aps.c             #
#    Command line       =  -f E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530 #
#                          DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg            #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530 #
#                          DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg           #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00100000          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 E:\Lib\micro-electromechani #
#                          cal\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Components\stack\nwk #
#                          \stub_aps.c -D ZIGBEEPRO -D NWK_AUTO_POLL -D       #
#                          ZTOOL_P2 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -lC E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC253 #
#                          0DB\CoordinatorEB\List\ -lA                        #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          CoordinatorEB\List\ --diag_suppress Pe001,Pa010    #
#                          -o E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC25 #
#                          30-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530 #
#                          DB\CoordinatorEB\Obj\ -e --no_code_motion --debug  #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\Lib\micro-electromechan #
#                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ -I                        #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\Source\ -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ #
#                          ¨ÐÅ1\CC2530DB\..\..\..\ZMain\TI2530DB\ -I          #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\include\ -I          #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\hal\target\CC2530EB\ -I  #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\include\ -I          #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\high_level\ -I       #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\ -I  #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\mac\low_level\srf04\sing #
#                          le_chip\ -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZS #
#                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨Ð #
#                          Å1\CC2530DB\..\..\..\..\..\Components\mt\ -I       #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\osal\include\ -I         #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\saddr\ -I       #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\services\sdata\ -I       #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\af\ -I             #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\nwk\ -I            #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sapi\ -I           #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sec\ -I            #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\sys\ -I            #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\stack\zdo\ -I            #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\ -I                 #
#                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          ..\..\..\..\..\Components\zmac\f8w\ -Ohz           #
#    List file          =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          CoordinatorEB\List\stub_aps.lst                    #
#    Object file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\Ë«ÏòÍ¨ÐÅ1\CC2530DB\ #
#                          CoordinatorEB\Obj\stub_aps.r51                     #
#                                                                             #
#                                                                             #
###############################################################################

E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Components\stack\nwk\stub_aps.c
      1          /**************************************************************************************************
      2            Filename:       stub_aps.c
      3            Revised:        $Date: 2011-04-20 10:16:44 -0700 (Wed, 20 Apr 2011) $
      4            Revision:       $Revision: 25771 $
      5          
      6            Description:    Stub APS processing functions
      7          
      8          
      9            Copyright 2008 - 2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "osal.h"
     44          #include "mac_spec.h"
     45          #include "nwk_util.h"
     46          #include "AF.h"
     47          
     48          #include "stub_aps.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          // Stub NWK header length
     59          #define STUB_NWK_HDR_LEN                2
     60          
     61          // Start of the Stub APS header in the Inter-PAN frame
     62          #define STUB_APS_HDR_FRAME_CTRL         STUB_NWK_HDR_LEN
     63          
     64          // Stub APS event identifiers
     65          #define CHANNEL_CHANGE_EVT              0x0001
     66          
     67          #define CHANNEL_CHANGE_RETRY_TIMEOUT    100
     68          
     69          /*********************************************************************
     70           * TYPEDEFS
     71           */
     72          typedef struct
     73          {
     74            zAddrType_t addr;
     75            uint16 panId;
     76          } pan_t;
     77          
     78          /*********************************************************************
     79           * GLOBAL VARIABLES
     80           */
     81          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82          uint8 StubAPS_TaskID = 0xFF;    // Task ID for internal task/event processing
   \                     StubAPS_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for StubAPS_TaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
     83          
     84          /*********************************************************************
     85           * EXTERNAL VARIABLES
     86           */
     87          
     88          
     89          /*********************************************************************
     90           * EXTERNAL FUNCTIONS
     91           */
     92          
     93          
     94          /*********************************************************************
     95           * LOCAL VARIABLES
     96           */
     97          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          static uint8 newChannel;
   \                     newChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          static uint8 channelChangeInProgress = FALSE;
   \                     channelChangeInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    100          
    101          // Application info

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          static uint8 appTaskID = 0xFF;  // Application task id
   \                     appTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for appTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          static uint8 appEndPoint = 0;   // Application endpoint
   \                     appEndPoint:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          
    105          
    106          /*********************************************************************
    107           * LOCAL FUNCTIONS
    108           */
    109          
    110          static void StubNWK_ParseMsg( uint8 *buf, uint8 bufLength, NLDE_FrameFormat_t *snff );
    111          static void StubAPS_ParseMsg( NLDE_FrameFormat_t *snff, aps_FrameFormat_t *saff );
    112          static void StubNWK_BuildMsg( uint8 *nwkHdr );
    113          static void StubAPS_BuildMsg( uint8 *apsHdr, uint8 frmCtrl, uint16 groupID, APSDE_DataReq_t *req );
    114          static ZStatus_t StubAPS_BuildFrameControl( uint8 *frmCtrl, zAddrType_t *dstAddr, 
    115                                                      uint16 *groupID, APSDE_DataReq_t *req );
    116          static ZStatus_t StubAPS_SetNewChannel( uint8 channel );
    117          static void StubAPS_NotifyApp( uint8 status );
    118          
    119          uint8 StubAPS_ZMacCallback( uint8 *msgPtr );
    120          
    121          /*********************************************************************
    122           * @fn      StubAPS_Init()
    123           *
    124           * @brief   Initialize stub APS layer
    125           *
    126           * @param   task_id - Task identifier for the desired task
    127           *
    128           * @return  none
    129           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    130          void StubAPS_Init( uint8 task_id )
   \                     StubAPS_Init:
    131          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    132            StubAPS_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#StubAPS_TaskID
   \   000008   F0           MOVX    @DPTR,A
    133              
    134            // register with ZMAC
    135            pZMac_AppCallback = StubAPS_ZMacCallback;
   \   000009   90....       MOV     DPTR,#pZMac_AppCallback
   \   00000C   74..         MOV     A,#??StubAPS_ZMacCallback?relay & 0xff
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   74..         MOV     A,#(??StubAPS_ZMacCallback?relay >> 8) & 0xff
   \   000012   F0           MOVX    @DPTR,A
    136            
    137          } /* StubAPS_Init() */
   \   000013   02....       LJMP    ??Subroutine16_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    138          
    139          /*********************************************************************
    140           * @fn      StubAPS_ProcessEvent()
    141           *
    142           * @brief   Main event loop for Stub APS task. This function should be called
    143           *          at periodic intervals when event occur.
    144           *
    145           * @param   task_id - Task ID
    146           * @param   events  - Bitmap of events
    147           *
    148           * @return  none
    149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          UINT16 StubAPS_ProcessEvent( uint8 task_id, uint16 events )
   \                     StubAPS_ProcessEvent:
    151          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
    152            (void)task_id; // Intentionally unreferenced parameter
    153            
    154            if ( events & SYS_EVENT_MSG )
   \   00000E   EB           MOV     A,R3
   \   00000F   5480         ANL     A,#0x80
   \   000011   7056         JNZ     ??StubAPS_ProcessEvent_0
    155            {
    156              osal_event_hdr_t *msg_ptr;
    157          
    158              while ( (msg_ptr = (osal_event_hdr_t *)osal_msg_receive( StubAPS_TaskID )) != NULL )
    159              {
    160                if ( msg_ptr->event == MAC_MCPS_DATA_CNF )
    161                {
    162                  INTERP_DataConfirm( (ZMacDataCnf_t *)msg_ptr );
    163                }
    164                else if ( msg_ptr->event == MAC_MCPS_DATA_IND )
    165                {
    166                  INTERP_DataIndication( (macMcpsDataInd_t *)msg_ptr );
    167                }
    168                
    169                osal_msg_deallocate( (uint8 *)msg_ptr );
    170              }
    171              
    172              // Return unproccessed events
    173              return ( events ^ SYS_EVENT_MSG );
    174            }
    175          
    176            if ( events & CHANNEL_CHANGE_EVT )
   \   000013   EA           MOV     A,R2
   \   000014   A2E0         MOV     C,0xE0 /* A   */.0
   \   000016   507C         JNC     ??StubAPS_ProcessEvent_1
    177            {
    178              // try to change to the new channel
    179              ZStatus_t status = StubAPS_SetNewChannel( newChannel );
   \   000018                ; Setup parameters for call to function StubAPS_SetNewChannel
   \   000018   90....       MOV     DPTR,#newChannel
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   12....       LCALL   ??StubAPS_SetNewChannel?relay
   \   000020   E9           MOV     A,R1
   \   000021   FE           MOV     R6,A
    180              if ( status != ZSuccess )
   \   000022   6010         JZ      ??StubAPS_ProcessEvent_2
    181              {
    182                // turn MAC receiver back on
    183                uint8 rxOnIdle = true;
   \   000024   12....       LCALL   ?Subroutine3 & 0xFFFF
    184                ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \                     ??CrossCallReturnLabel_14:
   \   000027   12....       LCALL   ??ZMacSetReq?relay
    185             
    186                // set NWK task to run
    187                nwk_setStateIdle( FALSE );
   \   00002A                ; Setup parameters for call to function nwk_setStateIdle
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   12....       LCALL   ??nwk_setStateIdle?relay
    188                
    189                channelChangeInProgress = FALSE;
   \   00002F   90....       MOV     DPTR,#channelChangeInProgress
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
    190              }
    191              
    192              // notify the application
    193              StubAPS_NotifyApp( status );
   \                     ??StubAPS_ProcessEvent_2:
   \   000034                ; Setup parameters for call to function osal_msg_allocate
   \   000034   7A02         MOV     R2,#0x2
   \   000036   7B00         MOV     R3,#0x0
   \   000038   12....       LCALL   ??osal_msg_allocate?relay
   \   00003B   EA           MOV     A,R2
   \   00003C   4B           ORL     A,R3
   \   00003D   6012         JZ      ??StubAPS_ProcessEvent_3
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   7433         MOV     A,#0x33
   \   000045   F0           MOVX    @DPTR,A
   \   000046   EE           MOV     A,R6
   \   000047   A3           INC     DPTR
   \   000048   F0           MOVX    @DPTR,A
   \   000049                ; Setup parameters for call to function osal_msg_send
   \   000049   90....       MOV     DPTR,#appTaskID
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   12....       LCALL   ??osal_msg_send?relay
    194              
    195              return ( events ^ CHANNEL_CHANGE_EVT );
   \                     ??StubAPS_ProcessEvent_3:
   \   000051   E5..         MOV     A,?V0 + 0
   \   000053   6401         XRL     A,#0x1
   \   000055   FA           MOV     R2,A
   \   000056   AB..         MOV     R3,?V0 + 1
   \   000058   803E         SJMP    ??StubAPS_ProcessEvent_4
    196            }
   \                     ??StubAPS_ProcessEvent_5:
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   640D         XRL     A,#0xd
   \   00005D   7003         JNZ     ??StubAPS_ProcessEvent_6
   \   00005F                ; Setup parameters for call to function INTERP_DataIndication
   \   00005F   12....       LCALL   ??INTERP_DataIndication?relay
   \                     ??StubAPS_ProcessEvent_6:
   \   000062                ; Setup parameters for call to function osal_msg_deallocate
   \   000062   EE           MOV     A,R6
   \   000063   FA           MOV     R2,A
   \   000064   EF           MOV     A,R7
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??StubAPS_ProcessEvent_0:
   \   000069                ; Setup parameters for call to function osal_msg_receive
   \   000069   90....       MOV     DPTR,#StubAPS_TaskID
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   12....       LCALL   ??osal_msg_receive?relay
   \   000071   8A..         MOV     ?V0 + 2,R2
   \   000073   8B..         MOV     ?V0 + 3,R3
   \   000075   AE..         MOV     R6,?V0 + 2
   \   000077   AF..         MOV     R7,?V0 + 3
   \   000079   EE           MOV     A,R6
   \   00007A   4F           ORL     A,R7
   \   00007B   600E         JZ      ??StubAPS_ProcessEvent_7
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   E0           MOVX    A,@DPTR
   \   000082   640C         XRL     A,#0xc
   \   000084   70D4         JNZ     ??StubAPS_ProcessEvent_5
   \   000086                ; Setup parameters for call to function INTERP_DataConfirm
   \   000086   12....       LCALL   ??INTERP_DataConfirm?relay
   \   000089   80D7         SJMP    ??StubAPS_ProcessEvent_6
   \                     ??StubAPS_ProcessEvent_7:
   \   00008B   AA..         MOV     R2,?V0 + 0
   \   00008D   E5..         MOV     A,?V0 + 1
   \   00008F   6480         XRL     A,#0x80
   \   000091   FB           MOV     R3,A
   \   000092   8004         SJMP    ??StubAPS_ProcessEvent_4
    197            
    198            // If reach here, the events are unknown
    199            // Discard or make more handlers
    200            return 0;
   \                     ??StubAPS_ProcessEvent_1:
   \   000094   7A00         MOV     R2,#0x0
   \   000096   7B00         MOV     R3,#0x0
   \                     ??StubAPS_ProcessEvent_4:
   \   000098   7401         MOV     A,#0x1
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009D   7F04         MOV     R7,#0x4
   \   00009F   02....       LJMP    ?BANKED_LEAVE_XDATA
    201          
    202          } /* StubAPS_ProcessEvent() */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7401         MOV     A,#0x1
   \   000008                REQUIRE ??Subroutine13_0
   \   000008                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001   AA82         MOV     R2,DPL
   \   000003   AB83         MOV     R3,DPH
   \   000005   7952         MOV     R1,#0x52
   \   000007   22           RET
    203          
    204          
    205          /*********************************************************************
    206           * @fn          StubNWK_ParseMsg
    207           *
    208           * @brief       Call this function to parse an incoming Stub NWK frame.
    209           *
    210           * @param       buf - pointer incoming message buffer
    211           * @param       bufLength - length of incoming message
    212           * @param       snff  - pointer Frame Format Parameters
    213           *
    214           * @return      pointer to network packet, NULL if error
    215           */
    216          static void StubNWK_ParseMsg( uint8 *buf, uint8 bufLength, NLDE_FrameFormat_t *snff )
    217          {
    218            uint16 fc;
    219          
    220            osal_memset( snff, 0, sizeof(NLDE_FrameFormat_t) );
    221            
    222            snff->bufLength = bufLength;
    223          
    224            // get the frame control
    225            fc = BUILD_UINT16( buf[NWK_HDR_FRAME_CTRL_LSB], buf[NWK_HDR_FRAME_CTRL_MSB] );
    226            
    227            // parse the frame control
    228            NLDE_ParseFrameControl( fc, snff );
    229            
    230            snff->hdrLen = STUB_NWK_HDR_LEN;
    231            
    232            // Stub NWK payload
    233            snff->nsdu = buf + snff->hdrLen;
    234            snff->nsduLength = snff->bufLength - snff->hdrLen;
    235          
    236          } /* StubNWK_ParseMsg */
    237          
    238          /*********************************************************************
    239           * @fn          StubAPS_ParseMsg
    240           *
    241           * @brief       Call this function to parse an incoming Stub APS frame.
    242           *
    243           * @param       naff  - pointer Stub NWK Frame Format Parameters
    244           * @param       saff  - pointer Stub APS Format Parameters
    245           *
    246           * @return      none
    247           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    248          static void StubAPS_ParseMsg( NLDE_FrameFormat_t *snff, aps_FrameFormat_t *saff )
   \                     StubAPS_ParseMsg:
    249          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    250            uint8 fcb;
    251            uint8 *asdu;
    252            
    253            osal_memset( saff, 0, sizeof(aps_FrameFormat_t) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C15         MOV     R4,#0x15
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7900         MOV     R1,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   12....       LCALL   ??osal_memset?relay
    254            
    255            saff->asduLength = snff->nsduLength;
   \   00001A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00001D   C0E0         PUSH    A
   \   00001F   EE           MOV     A,R6
   \   000020   2410         ADD     A,#0x10
   \   000022   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000025   D0E0         POP     A
   \   000027   F0           MOVX    @DPTR,A
    256            asdu = snff->nsdu;
   \   000028   E5..         MOV     A,?V0 + 0
   \   00002A   241D         ADD     A,#0x1d
   \   00002C   F582         MOV     DPL,A
   \   00002E   E5..         MOV     A,?V0 + 1
   \   000030   12....       LCALL   ?Subroutine6 & 0xFFFF
    257            saff->macDestAddr = snff->macDstAddr;
   \                     ??CrossCallReturnLabel_45:
   \   000033   E5..         MOV     A,?V0 + 0
   \   000035   240D         ADD     A,#0xd
   \   000037   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00003A   FA           MOV     R2,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FB           MOV     R3,A
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   EA           MOV     A,R2
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   EB           MOV     A,R3
   \   000050   F0           MOVX    @DPTR,A
    258            
    259            // First byte is Frame Control.
    260            saff->FrmCtrl = *asdu++;
   \   000051   8882         MOV     DPL,R0
   \   000053   8983         MOV     DPH,R1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FA           MOV     R2,A
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   8882         MOV     DPL,R0
   \   00005E   8983         MOV     DPH,R1
   \   000060   A3           INC     DPTR
   \   000061   A882         MOV     R0,DPL
   \   000063   A983         MOV     R1,DPH
    261          
    262            fcb = saff->FrmCtrl & APS_FRAME_TYPE_MASK;
    263            if ( fcb == STUB_APS_FRAME )
   \   000065   7403         MOV     A,#0x3
   \   000067   5A           ANL     A,R2
   \   000068   6403         XRL     A,#0x3
   \   00006A   7033         JNZ     ??CrossCallReturnLabel_20
    264            {
    265              fcb = saff->FrmCtrl & APS_DELIVERYMODE_MASK;
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   E0           MOVX    A,@DPTR
   \   000071   540C         ANL     A,#0xc
   \   000073   FA           MOV     R2,A
    266              if ( fcb == APS_FC_DM_BROADCAST )
   \   000074   7408         MOV     A,#0x8
   \   000076   6A           XRL     A,R2
   \   000077   7008         JNZ     ??StubAPS_ParseMsg_0
    267                saff->wasBroadcast = true;
   \   000079   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00007C   7401         MOV     A,#0x1
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   8010         SJMP    ??CrossCallReturnLabel_21
    268              else
    269                saff->wasBroadcast = false;
   \                     ??StubAPS_ParseMsg_0:
   \   000081   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000084   E4           CLR     A
   \   000085   F0           MOVX    @DPTR,A
    270              
    271              if ( fcb == APS_FC_DM_GROUP )
   \   000086   740C         MOV     A,#0xc
   \   000088   6A           XRL     A,R2
   \   000089   7006         JNZ     ??CrossCallReturnLabel_21
    272              {
    273                saff->GroupID = BUILD_UINT16( asdu[0], asdu[1] );
   \   00008B   12....       LCALL   ?Subroutine5 & 0xFFFF
    274                asdu += sizeof( uint16 );
    275              }
   \                     ??CrossCallReturnLabel_2:
   \   00008E   12....       LCALL   ??Subroutine14_0 & 0xFFFF
    276              
    277              // Pull out the Cluster ID
    278              saff->ClusterID = BUILD_UINT16( asdu[0], asdu[1] );
   \                     ??CrossCallReturnLabel_21:
   \   000091   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000094   12....       LCALL   ?Subroutine2 & 0xFFFF
    279              asdu += sizeof( uint16 );
    280          
    281              // Pull out the profile ID
    282              saff->ProfileID = BUILD_UINT16( asdu[0], asdu[1] );
   \                     ??CrossCallReturnLabel_19:
   \   000097   12....       LCALL   ?Subroutine5 & 0xFFFF
    283              asdu += 2;
    284            }
   \                     ??CrossCallReturnLabel_4:
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   12....       LCALL   ?Subroutine2 & 0xFFFF
    285            
    286            saff->asdu = asdu;
   \                     ??CrossCallReturnLabel_20:
   \   00009F   EE           MOV     A,R6
   \   0000A0   240E         ADD     A,#0xe
   \   0000A2   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000A5   E8           MOV     A,R0
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E9           MOV     A,R1
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   EE           MOV     A,R6
   \   0000AB   2410         ADD     A,#0x10
   \   0000AD   FA           MOV     R2,A
   \   0000AE   EF           MOV     A,R7
   \   0000AF   3400         ADDC    A,#0x0
   \   0000B1   FB           MOV     R3,A
   \   0000B2   E5..         MOV     A,?V0 + 0
   \   0000B4   241D         ADD     A,#0x1d
   \   0000B6   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000B9   FC           MOV     R4,A
   \   0000BA   8A82         MOV     DPL,R2
   \   0000BC   8B83         MOV     DPH,R3
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   C3           CLR     C
   \   0000C0   98           SUBB    A,R0
   \   0000C1   2C           ADD     A,R4
   \   0000C2   F8           MOV     R0,A
   \   0000C3   F0           MOVX    @DPTR,A
    287            saff->asduLength -= (uint8) (asdu - snff->nsdu);
    288            saff->apsHdrLen = snff->nsduLength - saff->asduLength;
   \   0000C4   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000C7   C3           CLR     C
   \   0000C8   98           SUBB    A,R0
   \   0000C9   C0E0         PUSH    A
   \   0000CB   EE           MOV     A,R6
   \   0000CC   240D         ADD     A,#0xd
   \   0000CE   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000D1   D0E0         POP     A
   \   0000D3   F0           MOVX    @DPTR,A
    289            
    290          } /* StubAPS_ParseMsg */
   \   0000D4   7F02         MOV     R7,#0x2
   \   0000D6   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FB           MOV     R3,A
   \   000009   EC           MOV     A,R4
   \   00000A   8E82         MOV     DPL,R6
   \   00000C   8F83         MOV     DPH,R7
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine14_0
   \   000002                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   EB           MOV     A,R3
   \   000007   F0           MOVX    @DPTR,A
   \   000008   E8           MOV     A,R0
   \   000009   2402         ADD     A,#0x2
   \   00000B   F8           MOV     R0,A
   \   00000C   E9           MOV     A,R1
   \   00000D   3400         ADDC    A,#0x0
   \   00000F   F9           MOV     R1,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2417         ADD     A,#0x17
   \   000004                REQUIRE ??Subroutine17_0
   \   000004                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine18_0
   \   000004                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003                REQUIRE ??Subroutine19_0
   \   000003                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004                REQUIRE ??Subroutine20_0
   \   000004                ; // Fall through to label ??Subroutine20_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    291          
    292          /******************************************************************************
    293           * @fn          StubAPS_BuildFrameControl
    294           *
    295           * @brief       This function builds Stub APS Frame Control and the destination
    296           *              address parameter for the MCPS-DATA Request.
    297           *
    298           * @param       frmCtrl - frame control
    299           * @param       dstAddr - destination address for MCPS-DATA Request
    300           * @param       groupID - group id
    301           * @param       req - APSDE_DataReq_t
    302           *
    303           * @return      ZStatus_t
    304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          static ZStatus_t StubAPS_BuildFrameControl( uint8 *frmCtrl, zAddrType_t *dstAddr, 
   \                     StubAPS_BuildFrameControl:
    306                                                      uint16 *groupID, APSDE_DataReq_t *req )
    307          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   \   00000D   740B         MOV     A,#0xb
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000015   FE           MOV     R6,A
   \   000016   ED           MOV     A,R5
   \   000017   FF           MOV     R7,A
   \   000018   740D         MOV     A,#0xd
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine8 & 0xFFFF
    308            // Security
    309            if ( req->txOptions & APS_TX_OPTIONS_SECURITY_ENABLE )
   \                     ??CrossCallReturnLabel_7:
   \   000020   2415         ADD     A,#0x15
   \   000022   F582         MOV     DPL,A
   \   000024   ED           MOV     A,R5
   \   000025   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000028   540D         ANL     A,#0xd
   \   00002A   700F         JNZ     ??StubAPS_BuildFrameControl_0
    310              return ( ZApsNotSupported );
    311              
    312            // Ack request
    313            if ( req->txOptions & APS_TX_OPTIONS_ACK )
    314              return ( ZApsNotSupported );
    315            
    316             // Fragmentation
    317            if ( req->txOptions & APS_TX_OPTIONS_PERMIT_FRAGMENT )
    318              return ( ZApsNotSupported );
    319            
    320            // set delivery mode
    321            if ( req->dstAddr.addrMode == AddrNotPresent )
   \   00002C   8C82         MOV     DPL,R4
   \   00002E   8D83         MOV     DPH,R5
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   7005         JNZ     ??StubAPS_BuildFrameControl_1
    322              return ( ZApsNotSupported ); // No REFLECTOR
   \                     ??StubAPS_BuildFrameControl_0:
   \   00003B   79B6         MOV     R1,#-0x4a
   \   00003D   02....       LJMP    ??StubAPS_BuildFrameControl_2 & 0xFFFF
    323          
    324            // set frame type
    325            *frmCtrl = STUB_APS_FRAME;
   \                     ??StubAPS_BuildFrameControl_1:
   \   000040   8882         MOV     DPL,R0
   \   000042   8983         MOV     DPH,R1
   \   000044   7403         MOV     A,#0x3
   \   000046   F0           MOVX    @DPTR,A
    326            
    327            // set DstAddrMode of MCPS-DATA Request to DstAddrMode of INTERP-Data Request
    328            dstAddr->addrMode = req->dstAddr.addrMode;
   \   000047   EC           MOV     A,R4
   \   000048   2408         ADD     A,#0x8
   \   00004A   F5..         MOV     ?V0 + 0,A
   \   00004C   ED           MOV     A,R5
   \   00004D   3400         ADDC    A,#0x0
   \   00004F   F5..         MOV     ?V0 + 1,A
   \   000051   85..82       MOV     DPL,?V0 + 0
   \   000054   F583         MOV     DPH,A
   \   000056   E0           MOVX    A,@DPTR
   \   000057   8A82         MOV     DPL,R2
   \   000059   8B83         MOV     DPH,R3
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   F0           MOVX    @DPTR,A
    329          
    330            // set DstAddr of MCPS-DATA Request to DstAddr of INTERP-Data Request
    331            if ( req->dstAddr.addrMode == AddrBroadcast )
   \   000064   85..82       MOV     DPL,?V0 + 0
   \   000067   85..83       MOV     DPH,?V0 + 1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   640F         XRL     A,#0xf
   \   00006D   7010         JNZ     ??StubAPS_BuildFrameControl_3
    332            {
    333              *frmCtrl |= APS_FC_DM_BROADCAST;
   \   00006F   8882         MOV     DPL,R0
   \   000071   8983         MOV     DPH,R1
   \   000073   E0           MOVX    A,@DPTR
   \   000074   D2E3         SETB    0xE0 /* A   */.3
   \   000076   12....       LCALL   ?Subroutine4 & 0xFFFF
    334              
    335              // set DstAddrMode of MCPS-DATA Request to short address
    336              dstAddr->addrMode = Addr16Bit;
    337              dstAddr->addr.shortAddr = req->dstAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_0:
   \   000079   8C82         MOV     DPL,R4
   \   00007B   8D83         MOV     DPH,R5
   \   00007D   8015         SJMP    ??StubAPS_BuildFrameControl_4
    338            }
    339            else if ( req->dstAddr.addrMode == Addr16Bit )
   \                     ??StubAPS_BuildFrameControl_3:
   \   00007F   8C82         MOV     DPL,R4
   \   000081   8D83         MOV     DPH,R5
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   6402         XRL     A,#0x2
   \   00008E   8C82         MOV     DPL,R4
   \   000090   8D83         MOV     DPH,R5
   \   000092   7009         JNZ     ??StubAPS_BuildFrameControl_5
    340            {
    341              *frmCtrl |= APS_FC_DM_UNICAST;
    342              dstAddr->addr.shortAddr = req->dstAddr.addr.shortAddr;
   \                     ??StubAPS_BuildFrameControl_4:
   \   000094   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000097   8A82         MOV     DPL,R2
   \   000099   8B83         MOV     DPH,R3
   \   00009B   8041         SJMP    ??StubAPS_BuildFrameControl_6
    343            }
    344            else if ( req->dstAddr.addrMode == Addr64Bit )
   \                     ??StubAPS_BuildFrameControl_5:
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   6403         XRL     A,#0x3
   \   0000A8   7005         JNZ     ??StubAPS_BuildFrameControl_7
    345            {
    346              *frmCtrl |= APS_FC_DM_UNICAST;
    347              osal_cpyExtAddr( dstAddr->addr.extAddr, req->dstAddr.addr.extAddr );
   \   0000AA                ; Setup parameters for call to function sAddrExtCpy
   \   0000AA   12....       LCALL   ??sAddrExtCpy?relay
   \   0000AD   8034         SJMP    ??StubAPS_BuildFrameControl_8
    348            }
    349            else if ( req->dstAddr.addrMode == AddrGroup )
   \                     ??StubAPS_BuildFrameControl_7:
   \   0000AF   8C82         MOV     DPL,R4
   \   0000B1   8D83         MOV     DPH,R5
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   6401         XRL     A,#0x1
   \   0000BE   7023         JNZ     ??StubAPS_BuildFrameControl_8
    350            {
    351              *frmCtrl |= APS_FC_DM_GROUP;
   \   0000C0   8882         MOV     DPL,R0
   \   0000C2   8983         MOV     DPH,R1
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   440C         ORL     A,#0xc
   \   0000C7   12....       LCALL   ?Subroutine4 & 0xFFFF
    352              
    353              // set DstAddrMode of MCPS-DATA Request to short address
    354              dstAddr->addrMode = Addr16Bit;
    355              
    356              // set DstAddr of MCPS-DATA Request to 0xFFFF
    357              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
   \                     ??CrossCallReturnLabel_1:
   \   0000CA   8A82         MOV     DPL,R2
   \   0000CC   8B83         MOV     DPH,R3
   \   0000CE   74FF         MOV     A,#-0x1
   \   0000D0   F0           MOVX    @DPTR,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   F0           MOVX    @DPTR,A
    358              
    359              // set Group ID to DstAddr of INTERP-Data Request
    360              *groupID = req->dstAddr.addr.shortAddr;
   \   0000D3   8C82         MOV     DPL,R4
   \   0000D5   8D83         MOV     DPH,R5
   \   0000D7   12....       LCALL   ??Subroutine20_0 & 0xFFFF
    361            }
   \                     ??CrossCallReturnLabel_42:
   \   0000DA   8E82         MOV     DPL,R6
   \   0000DC   8F83         MOV     DPH,R7
   \                     ??StubAPS_BuildFrameControl_6:
   \   0000DE   E8           MOV     A,R0
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   E9           MOV     A,R1
   \   0000E2   F0           MOVX    @DPTR,A
    362            
    363            return ( ZSuccess );
   \                     ??StubAPS_BuildFrameControl_8:
   \   0000E3   7900         MOV     R1,#0x0
   \                     ??StubAPS_BuildFrameControl_2:
   \   0000E5   80..         SJMP    ??Subroutine15_0
    364            
    365          } /* StubAPS_BuildFrameControl */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EC           MOV     A,R4
   \   000006   22           RET
    366          
    367          /******************************************************************************
    368           * @fn          StubNWK_BuildMsg
    369           *
    370           * @brief       This function builds a Stub NWK frame.
    371           *
    372           * @param       nwkHdr - stub NWK header
    373           *
    374           * @return      none
    375           */
    376          static void StubNWK_BuildMsg( uint8 *nwkHdr )
    377          {
    378            uint16 frmCtrl = 0;
    379            uint8  protoVer = NLME_GetProtocolVersion();
    380          
    381            // frame type
    382            frmCtrl |= (STUB_NWK_FRAME_TYPE << NWK_FC_FRAME_TYPE);
    383          
    384            // protocol version
    385            frmCtrl |= (protoVer << NWK_FC_PROT_VERSION);
    386            
    387            // set Stub NWK header
    388            *nwkHdr++ = LO_UINT16( frmCtrl );
    389            *nwkHdr++ = HI_UINT16( frmCtrl );
    390            
    391          } /* StubNWK_BuildMsg */
    392          
    393          /******************************************************************************
    394           * @fn          StubAPS_BuildMsg
    395           *
    396           * @brief       This function builds a Stub APS frame.
    397           *
    398           * @param       apsHdr - stub APS header
    399           * @param       frmCtrl - stub APS frame control
    400           * @param       groupID - group id
    401           * @param       req - APSDE_DataReq_t
    402           *
    403           * @return      none
    404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    405          static void StubAPS_BuildMsg( uint8 *apsHdr, uint8 frmCtrl, uint16 groupID, APSDE_DataReq_t *req )
   \                     StubAPS_BuildMsg:
    406          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    407            // add frame type
    408            *apsHdr++ = frmCtrl;
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   AA82         MOV     R2,DPL
   \   00000F   AB83         MOV     R3,DPH
    409              
    410            // add Group ID
    411            if ( ( frmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_GROUP )
   \   000011   740C         MOV     A,#0xc
   \   000013   5E           ANL     A,R6
   \   000014   640C         XRL     A,#0xc
   \   000016   700A         JNZ     ??StubAPS_BuildMsg_0
    412            {
    413              *apsHdr++ = LO_UINT16( groupID );
   \   000018   EC           MOV     A,R4
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
    414              *apsHdr++ = HI_UINT16( groupID );
   \   00001B   ED           MOV     A,R5
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   0A           INC     R2
   \   00001F   0A           INC     R2
   \   000020   AB83         MOV     R3,DPH
   \                     ??StubAPS_BuildMsg_0:
   \   000022   740B         MOV     A,#0xb
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
    415            }
   \   000027   12....       LCALL   ?Subroutine8 & 0xFFFF
    416          
    417            // add clusterID
    418            *apsHdr++ = LO_UINT16( req->clusterID );
   \                     ??CrossCallReturnLabel_8:
   \   00002A   240D         ADD     A,#0xd
   \   00002C   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00002F   AA82         MOV     R2,DPL
   \   000031   12....       LCALL   ?Subroutine7 & 0xFFFF
    419            *apsHdr++ = HI_UINT16( req->clusterID );
    420            
    421            // add profile ID
    422            *apsHdr++ = LO_UINT16( req->profileID );
   \                     ??CrossCallReturnLabel_5:
   \   000034   240F         ADD     A,#0xf
   \   000036   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000039   0A           INC     R2
   \   00003A   12....       LCALL   ?Subroutine7 & 0xFFFF
    423            *apsHdr++ = HI_UINT16( req->profileID );
    424              
    425            // copy ASDU data into frame
    426            osal_memcpy ( apsHdr, req->asdu, req->asduLen );
   \                     ??CrossCallReturnLabel_6:
   \   00003D   2413         ADD     A,#0x13
   \   00003F   F582         MOV     DPL,A
   \   000041   ED           MOV     A,R5
   \   000042   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000045   F5..         MOV     ?V0 + 0,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F5..         MOV     ?V0 + 1,A
   \   00004B   75..00       MOV     ?V0 + 2,#0x0
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000053   EC           MOV     A,R4
   \   000054   2411         ADD     A,#0x11
   \   000056   F582         MOV     DPL,A
   \   000058   ED           MOV     A,R5
   \   000059   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00005C   FC           MOV     R4,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FD           MOV     R5,A
   \   000060   12....       LCALL   ??osal_memcpy?relay
   \   000063   7403         MOV     A,#0x3
   \   000065                REQUIRE ?Subroutine1
   \   000065                ; // Fall through to label ?Subroutine1
    427            
    428          } /* StubAPS_BuildMsg */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine15_0
   \   000003                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F8           MOV     R0,A
   \   000001   ED           MOV     A,R5
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   AB83         MOV     R3,DPH
   \   000002   8882         MOV     DPL,R0
   \   000004   8983         MOV     DPH,R1
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   0A           INC     R2
   \   00000F   AB83         MOV     R3,DPH
   \   000011                ; Setup parameters for call to function osal_memcpy
   \   000011   EC           MOV     A,R4
   \   000012   22           RET
    429          
    430          /******************************************************************************
    431           * @fn          StubAPS_setNewChannel
    432           *
    433           * @brief       This function changes the device's channel.
    434           *
    435           * @param       none
    436           *
    437           * @return      ZStatus_t
    438           */ 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    439          static ZStatus_t StubAPS_SetNewChannel( uint8 channel )
   \                     StubAPS_SetNewChannel:
    440          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   7401         MOV     A,#0x1
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E9           MOV     A,R1
   \   00000F   F0           MOVX    @DPTR,A
    441            uint8 rxOnIdle;
    442            
    443            // make sure MAC has nothing to transmit
    444            if ( ( nwkDB_CountTypes( NWK_DATABUF_SENT ) == 0 ) && ZMacStateIdle() )
   \   000010                ; Setup parameters for call to function nwkDB_CountTypes
   \   000010   7902         MOV     R1,#0x2
   \   000012   12....       LCALL   ??nwkDB_CountTypes?relay
   \   000015   E9           MOV     A,R1
   \   000016   7022         JNZ     ??StubAPS_SetNewChannel_0
   \   000018                ; Setup parameters for call to function ZMacStateIdle
   \   000018   12....       LCALL   ??ZMacStateIdle?relay
   \   00001B   E9           MOV     A,R1
   \   00001C   601C         JZ      ??StubAPS_SetNewChannel_0
    445            {
    446              // set the new channel
    447              ZMacSetReq( ZMacChannel, &channel );
   \   00001E                ; Setup parameters for call to function ZMacSetReq
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   AA82         MOV     R2,DPL
   \   000025   AB83         MOV     R3,DPH
   \   000027   79E1         MOV     R1,#-0x1f
   \   000029   12....       LCALL   ??ZMacSetReq?relay
    448          
    449              // turn MAC receiver back on
    450              rxOnIdle = true;
   \   00002C   12....       LCALL   ?Subroutine3 & 0xFFFF
    451              ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \                     ??CrossCallReturnLabel_15:
   \   00002F   12....       LCALL   ??ZMacSetReq?relay
    452            
    453              channelChangeInProgress = FALSE;
   \   000032   90....       MOV     DPTR,#channelChangeInProgress
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
    454              
    455              return ( ZSuccess );
   \   000037   F9           MOV     R1,A
   \   000038   8002         SJMP    ??StubAPS_SetNewChannel_1
    456            }
    457            
    458            return ( ZFailure );
   \                     ??StubAPS_SetNewChannel_0:
   \   00003A   7901         MOV     R1,#0x1
   \                     ??StubAPS_SetNewChannel_1:
   \   00003C   02....       LJMP    ?Subroutine0 & 0xFFFF
    459            
    460          } /* StubAPS_setNewChannel */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine16_0
   \   000005                ; // Fall through to label ??Subroutine16_0
    461          
    462          
    463          /******************************************************************************
    464           * @fn          StubAPS_NotifyApp
    465           *
    466           * @brief       This function sends an OSAL message to the Application task.
    467           *
    468           * @param       status - command status
    469           *
    470           * @return      none
    471           */
    472          static void StubAPS_NotifyApp( uint8 status )
    473          {
    474            osal_event_hdr_t *msgPtr;
    475            
    476            // Notify the application task
    477            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( sizeof(osal_event_hdr_t) );
    478            if ( msgPtr )
    479            {
    480              msgPtr->event = SAPS_CHANNEL_CHANGE;
    481              msgPtr->status = status;
    482              
    483              osal_msg_send( appTaskID, (uint8 *)msgPtr );
    484            }
    485            
    486          } /* StubAPS_NotifyApp */
    487          
    488          /******************************************************************************
    489           *
    490           *  External APIs provided to the Application.
    491           */
    492          
    493          /******************************************************************************
    494           * @fn          StubAPS_SetInterPanChannel
    495           *
    496           * @brief       This function changes the device's channel for inter-PAN communication.
    497           *
    498           * @param       channel - new channel
    499           *
    500           * @return      ZStatus_t
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          ZStatus_t StubAPS_SetInterPanChannel( uint8 channel )
   \                     StubAPS_SetInterPanChannel:
    503          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    504            uint8 currChannel;
    505            uint8 rxOnIdle;
    506            
    507            if ( channelChangeInProgress )
   \   00000C   90....       MOV     DPTR,#channelChangeInProgress
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6004         JZ      ??StubAPS_SetInterPanChannel_0
    508              return ( ZFailure );
   \   000012   7901         MOV     R1,#0x1
   \   000014   8051         SJMP    ??StubAPS_SetInterPanChannel_1
    509          
    510            ZMacGetReq( ZMacChannel, &currChannel );
   \                     ??StubAPS_SetInterPanChannel_0:
   \   000016                ; Setup parameters for call to function ZMacGetReq
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   AA82         MOV     R2,DPL
   \   00001D   AB83         MOV     R3,DPH
   \   00001F   79E1         MOV     R1,#-0x1f
   \   000021   12....       LCALL   ??ZMacGetReq?relay
    511            if ( currChannel == channel )
   \   000024   7401         MOV     A,#0x1
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6E           XRL     A,R6
   \   00002B   601F         JZ      ??StubAPS_SetInterPanChannel_2
    512            {
    513              // inter PANs communication within the same channel
    514              return ( ZSuccess );
    515            }
    516            
    517            // go into channel transition state
    518            channelChangeInProgress = TRUE;
   \   00002D   90....       MOV     DPTR,#channelChangeInProgress
   \   000030   7401         MOV     A,#0x1
   \   000032   F0           MOVX    @DPTR,A
    519            
    520            // set NWK task to idle
    521            nwk_setStateIdle( TRUE );
   \   000033                ; Setup parameters for call to function nwk_setStateIdle
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   ??nwk_setStateIdle?relay
    522            
    523            // turn MAC receiver off
    524            rxOnIdle = false;
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   E4           CLR     A
   \   00003E   12....       LCALL   ??Subroutine13_0 & 0xFFFF
    525            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \                     ??CrossCallReturnLabel_17:
   \   000041   12....       LCALL   ??ZMacSetReq?relay
    526          
    527            // try to change to the new channel
    528            if ( StubAPS_SetNewChannel( channel ) == ZSuccess )
   \   000044                ; Setup parameters for call to function StubAPS_SetNewChannel
   \   000044   EE           MOV     A,R6
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   ??StubAPS_SetNewChannel?relay
   \   000049   E9           MOV     A,R1
   \   00004A   7004         JNZ     ??StubAPS_SetInterPanChannel_3
    529              return ( ZSuccess );
   \                     ??StubAPS_SetInterPanChannel_2:
   \   00004C   7900         MOV     R1,#0x0
   \   00004E   8017         SJMP    ??StubAPS_SetInterPanChannel_1
    530              
    531            // save the new channel for retry
    532            newChannel = channel;
   \                     ??StubAPS_SetInterPanChannel_3:
   \   000050   EE           MOV     A,R6
   \   000051   90....       MOV     DPTR,#newChannel
   \   000054   F0           MOVX    @DPTR,A
    533            
    534            // ask StubAPS task to retry it later
    535            osal_start_timerEx( StubAPS_TaskID, CHANNEL_CHANGE_EVT, CHANNEL_CHANGE_RETRY_TIMEOUT );
   \   000055                ; Setup parameters for call to function osal_start_timerEx
   \   000055   7C64         MOV     R4,#0x64
   \   000057   7D00         MOV     R5,#0x0
   \   000059   7A01         MOV     R2,#0x1
   \   00005B   7B00         MOV     R3,#0x0
   \   00005D   90....       MOV     DPTR,#StubAPS_TaskID
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F9           MOV     R1,A
   \   000062   12....       LCALL   ??osal_start_timerEx?relay
    536              
    537            return ( ZApsNotAllowed );
   \   000065   79BA         MOV     R1,#-0x46
   \                     ??StubAPS_SetInterPanChannel_1:
   \   000067   7402         MOV     A,#0x2
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   7F01         MOV     R7,#0x1
   \   00006E   02....       LJMP    ?BANKED_LEAVE_XDATA
    538            
    539          } /* StubAPS_SetInterPanChannel */
    540          
    541          /******************************************************************************
    542           * @fn          StubAPS_SetIntraPanChannel
    543           *
    544           * @brief       This function sets the device's channel back to the NIB channel.
    545           *
    546           * @param       none
    547           *
    548           * @return      ZStatus_t
    549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          ZStatus_t StubAPS_SetIntraPanChannel( void )
   \                     StubAPS_SetIntraPanChannel:
    551          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    552            uint8 currChannel;
    553            uint8 rxOnIdle;
    554            
    555            if ( channelChangeInProgress )
   \   000009   90....       MOV     DPTR,#channelChangeInProgress
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6004         JZ      ??StubAPS_SetIntraPanChannel_0
    556              return ( ZFailure );
   \   00000F   7901         MOV     R1,#0x1
   \   000011   804D         SJMP    ??StubAPS_SetIntraPanChannel_1
    557            
    558            ZMacGetReq( ZMacChannel, &currChannel );
   \                     ??StubAPS_SetIntraPanChannel_0:
   \   000013                ; Setup parameters for call to function ZMacGetReq
   \   000013   7401         MOV     A,#0x1
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   AA82         MOV     R2,DPL
   \   00001A   AB83         MOV     R3,DPH
   \   00001C   79E1         MOV     R1,#-0x1f
   \   00001E   12....       LCALL   ??ZMacGetReq?relay
    559            if ( currChannel == _NIB.nwkLogicalChannel )
   \   000021   7401         MOV     A,#0x1
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   90....       MOV     DPTR,#_NIB + 22
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   68           XRL     A,R0
   \   00002D   7004         JNZ     ??StubAPS_SetIntraPanChannel_2
    560              return ( ZSuccess );
   \   00002F   7900         MOV     R1,#0x0
   \   000031   802D         SJMP    ??StubAPS_SetIntraPanChannel_1
    561            
    562            channelChangeInProgress = TRUE;
   \                     ??StubAPS_SetIntraPanChannel_2:
   \   000033   90....       MOV     DPTR,#channelChangeInProgress
   \   000036   7401         MOV     A,#0x1
   \   000038   F0           MOVX    @DPTR,A
    563            
    564            // turn MAC receiver off
    565            rxOnIdle = false;
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   E4           CLR     A
   \   000040   12....       LCALL   ??Subroutine13_0 & 0xFFFF
    566            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \                     ??CrossCallReturnLabel_18:
   \   000043   12....       LCALL   ??ZMacSetReq?relay
    567            
    568            // set the NIB channel
    569            ZMacSetReq( ZMacChannel, &(_NIB.nwkLogicalChannel) );
   \   000046                ; Setup parameters for call to function ZMacSetReq
   \   000046   7A..         MOV     R2,#(_NIB + 22) & 0xff
   \   000048   7B..         MOV     R3,#((_NIB + 22) >> 8) & 0xff
   \   00004A   79E1         MOV     R1,#-0x1f
   \   00004C   12....       LCALL   ??ZMacSetReq?relay
    570            
    571            // turn MAC receiver back on
    572            rxOnIdle = true;
   \   00004F   12....       LCALL   ?Subroutine3 & 0xFFFF
    573            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \                     ??CrossCallReturnLabel_16:
   \   000052   12....       LCALL   ??ZMacSetReq?relay
    574             
    575            // set NWK task to run
    576            nwk_setStateIdle( FALSE );
   \   000055                ; Setup parameters for call to function nwk_setStateIdle
   \   000055   7900         MOV     R1,#0x0
   \   000057   12....       LCALL   ??nwk_setStateIdle?relay
    577            
    578            channelChangeInProgress = FALSE;
   \   00005A   90....       MOV     DPTR,#channelChangeInProgress
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
    579            
    580            return ( ZSuccess );
   \   00005F   F9           MOV     R1,A
   \                     ??StubAPS_SetIntraPanChannel_1:
   \   000060   80..         SJMP    ?Subroutine0
    581            
    582          } /* StubAPS_SetIntraPanChannel */
    583          
    584          /******************************************************************************
    585           * @fn          StubAPS_InterPan
    586           *
    587           * @brief       This function checks to see if a PAN is an Inter-PAN.
    588           *
    589           * @param       panId - PAN ID
    590           * @param       endPoint - endpoint
    591           *
    592           * @return      TRUE if PAN is Inter-PAN, FALSE otherwise
    593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    594          uint8 StubAPS_InterPan( uint16 panId, uint8 endPoint )
   \                     StubAPS_InterPan:
    595          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   F8           MOV     R0,A
    596            (void)panId; // Intentionally unreferenced parameter
    597          
    598            // No need to check the MAC/NIB Channels or Source/Destination PAN IDs
    599            // since it's possible to send Inter-PAN messages within the same network.
    600            if ( endPoint == STUBAPS_INTER_PAN_EP )
   \   000002   74FE         MOV     A,#-0x2
   \   000004   68           XRL     A,R0
   \   000005   7004         JNZ     ??StubAPS_InterPan_0
    601            {
    602              // Inter-PAN endpoint
    603              return ( TRUE );
   \   000007   7901         MOV     R1,#0x1
   \   000009   8002         SJMP    ??StubAPS_InterPan_1
    604            }
    605            
    606            return ( FALSE );
   \                     ??StubAPS_InterPan_0:
   \   00000B   7900         MOV     R1,#0x0
   \                     ??StubAPS_InterPan_1:
   \   00000D   02....       LJMP    ?BRET
    607            
    608          } /* StubAPS_InterPan */
    609          
    610          /******************************************************************************
    611           * @fn          StubAPS_RegisterApp
    612           *
    613           * @brief       This function registers the Application with the Stub APS layer.
    614           *
    615           *              NOTE: Since Stub APS messages don't include the application
    616           *                    endpoint, the application has to register its endpoint
    617           *                    with Stub APS.
    618           *
    619           * @param       epDesc - application's endpoint descriptor
    620           *
    621           * @return      none
    622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          void StubAPS_RegisterApp( endPointDesc_t *epDesc )
   \                     StubAPS_RegisterApp:
    624          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    625            appTaskID = *epDesc->task_id;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   90....       MOV     DPTR,#appTaskID
   \   00000F   F0           MOVX    @DPTR,A
    626            appEndPoint = epDesc->endPoint;
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   E0           MOVX    A,@DPTR
   \   000015   90....       MOV     DPTR,#appEndPoint
   \   000018   F0           MOVX    @DPTR,A
    627            
    628          } /* StubAPS_RegisterApp */
   \   000019   80..         SJMP    ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F583         MOV     DPH,A
   \   000007   8882         MOV     DPL,R0
   \   000009   22           RET
    629          
    630          /******************************************************************************
    631           * @fn          StubAPS_ZMacCallback
    632           *
    633           * @brief       This function accepts an inter-PAN message from ZMac.
    634           *
    635           * @param       msgPtr - received message
    636           *
    637           * @return      TRUE if message is processed. FALSE otherwise.
    638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          uint8 StubAPS_ZMacCallback( uint8 *msgPtr )
   \                     StubAPS_ZMacCallback:
    640          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    641            uint16 nwk_fc;
    642            uint8  aps_fc;
    643            uint8  frameType;
    644            uint8 *buf = NULL;
    645            uint8  event = ((osal_event_hdr_t *)msgPtr)->event;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
    646          
    647            if ( event == MAC_MCPS_DATA_IND )
   \   00000A   740D         MOV     A,#0xd
   \   00000C   68           XRL     A,R0
   \   00000D   600A         JZ      ??CrossCallReturnLabel_11
    648            {
    649              buf = ((macMcpsDataInd_t *)msgPtr)->msdu.p;
    650            }
    651            else if ( event == MAC_MCPS_DATA_CNF )
   \   00000F   740C         MOV     A,#0xc
   \   000011   68           XRL     A,R0
   \   000012   7030         JNZ     ??StubAPS_ZMacCallback_0
    652            {
    653              buf = ((macMcpsDataCnf_t *)msgPtr)->pDataReq->msdu.p;
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   12....       LCALL   ?Subroutine9 & 0xFFFF
    654            }
   \                     ??CrossCallReturnLabel_11:
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
    655            
    656            if ( buf )
   \   000022   E582         MOV     A,DPL
   \   000024   4583         ORL     A,DPH
   \   000026   601C         JZ      ??StubAPS_ZMacCallback_0
    657            {
    658              // get the NWK frame control
    659              nwk_fc = BUILD_UINT16( buf[NWK_HDR_FRAME_CTRL_LSB], buf[NWK_HDR_FRAME_CTRL_MSB] );
    660            
    661              // frame type
    662              frameType = (uint8)((nwk_fc >> NWK_FC_FRAME_TYPE) & NWK_FC_FRAME_TYPE_MASK);
    663            
    664              // check if incoming frame is of the right type
    665              if ( frameType != STUB_NWK_FRAME_TYPE )
   \   000028   E0           MOVX    A,@DPTR
   \   000029   5403         ANL     A,#0x3
   \   00002B   6403         XRL     A,#0x3
   \   00002D   7015         JNZ     ??StubAPS_ZMacCallback_0
    666              {
    667                // message doesn't belong to Stub APS
    668                return ( FALSE );
    669              }
    670           
    671              // get the APS frame control
    672              aps_fc = buf[STUB_APS_HDR_FRAME_CTRL];
    673            
    674              // frame type
    675              frameType = aps_fc & APS_FRAME_TYPE_MASK;
    676              
    677              // check if incoming frame is of the right type
    678              if ( frameType != STUB_APS_FRAME )
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   5403         ANL     A,#0x3
   \   000034   6403         XRL     A,#0x3
   \   000036   700C         JNZ     ??StubAPS_ZMacCallback_0
    679              {
    680                // message doesn't belong to Stub APS
    681                return ( FALSE );
    682              }
    683              
    684              // message belongs to Stub APS
    685              osal_msg_send( StubAPS_TaskID, (uint8 *)msgPtr );
   \   000038                ; Setup parameters for call to function osal_msg_send
   \   000038   90....       MOV     DPTR,#StubAPS_TaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??osal_msg_send?relay
    686           
    687              return ( TRUE );
   \   000040   7901         MOV     R1,#0x1
   \   000042   8002         SJMP    ??StubAPS_ZMacCallback_1
    688            }
    689            
    690            // message doesn't belong to Stub APS
    691            return ( FALSE );
   \                     ??StubAPS_ZMacCallback_0:
   \   000044   7900         MOV     R1,#0x0
   \                     ??StubAPS_ZMacCallback_1:
   \   000046   80..         SJMP    ??Subroutine16_0
    692              
    693          } /* StubAPS_ZMacCallback */
    694          
    695          /******************************************************************************
    696           *
    697           *  Stub APS Inter-PAN interface INTERP and its callbacks.
    698           */
    699          
    700          /******************************************************************************
    701           * @fn          INTERP_DataReq
    702           *
    703           * @brief       This function requests the transfer of data from the next
    704           *              higher layer to a single peer entity.
    705           *
    706           * @param       req - APSDE_DataReq_t
    707           *
    708           * @return      ZStatus_t
    709           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    710          ZStatus_t INTERP_DataReq( APSDE_DataReq_t *req )
   \                     INTERP_DataReq:
    711          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV     A,#-0x21
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
    712            uint8 apsFrmCtrl;
    713            uint16 groupID = 0;
   \   00000E   7401         MOV     A,#0x1
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    714            uint8 *buf;
    715            uint8 hdrLen;
    716            ZMacDataReq_t dataReq;
    717            ZStatus_t status;
    718            
    719            if ( channelChangeInProgress || !StubAPS_InterPan( req->dstPanId, req->dstEP ) )
   \   000017   90....       MOV     DPTR,#channelChangeInProgress
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6003         JZ      $+5
   \   00001D   02....       LJMP    ??INTERP_DataReq_0 & 0xFFFF
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   64FE         XRL     A,#0xfe
   \   000031   6003         JZ      $+5
   \   000033   02....       LJMP    ??INTERP_DataReq_0 & 0xFFFF
    720              return ( ZFailure );
    721            
    722            osal_memset( &dataReq, 0, sizeof( ZMacDataReq_t ) );
   \   000036                ; Setup parameters for call to function osal_memset
   \   000036   7C1E         MOV     R4,#0x1e
   \   000038   7D00         MOV     R5,#0x0
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   AA82         MOV     R2,DPL
   \   000043   AB83         MOV     R3,DPH
   \   000045   12....       LCALL   ??osal_memset?relay
    723            
    724            // Build Stub APS header
    725            status = StubAPS_BuildFrameControl( &apsFrmCtrl, &(dataReq.DstAddr), &groupID, req );
   \   000048                ; Setup parameters for call to function StubAPS_BuildFrameControl
   \   000048   78..         MOV     R0,#?V0 + 2
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   7403         MOV     A,#0x3
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   8582..       MOV     ?V0 + 0,DPL
   \   000055   8583..       MOV     ?V0 + 1,DPH
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   7407         MOV     A,#0x7
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   AC82         MOV     R4,DPL
   \   000064   AD83         MOV     R5,DPH
   \   000066   7404         MOV     A,#0x4
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   AA82         MOV     R2,DPL
   \   00006D   AB83         MOV     R3,DPH
   \   00006F   12....       LCALL   ??StubAPS_BuildFrameControl?relay
   \   000072   7404         MOV     A,#0x4
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   E9           MOV     A,R1
   \   000078   FE           MOV     R6,A
    726            if ( status != ZSuccess )
   \   000079   6003         JZ      $+5
   \   00007B   02....       LJMP    ??INTERP_DataReq_1 & 0xFFFF
    727              return ( status );
    728          
    729            // set default Stub APS header length
    730            hdrLen = APS_FRAME_CTRL_FIELD_LEN;
   \   00007E   7A01         MOV     R2,#0x1
    731            
    732            // add group ID length
    733            if ( ( apsFrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_GROUP )
   \   000080   85..82       MOV     DPL,?XSP + 0
   \   000083   85..83       MOV     DPH,?XSP + 1
   \   000086   E0           MOVX    A,@DPTR
   \   000087   540C         ANL     A,#0xc
   \   000089   640C         XRL     A,#0xc
   \   00008B   7002         JNZ     ??INTERP_DataReq_2
    734              hdrLen += APS_GROUP_ID_FIELD_LEN;
   \   00008D   0A           INC     R2
   \   00008E   0A           INC     R2
    735            
    736            // add cluster ID length
    737            hdrLen += APS_CLUSTERID_FIELD_LEN;
    738            
    739            // add profile ID length
    740            hdrLen += APS_PROFILEID_FIELD_LEN;
    741            
    742            // add default Stub NWK header length
    743            hdrLen += STUB_NWK_HDR_LEN;
    744            
    745            // calculate MSDU length
    746            dataReq.msduLength = hdrLen + req->asduLen;
   \                     ??INTERP_DataReq_2:
   \   00008F   E5..         MOV     A,?V0 + 2
   \   000091   2411         ADD     A,#0x11
   \   000093   F582         MOV     DPL,A
   \   000095   E5..         MOV     A,?V0 + 3
   \   000097   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00009A   2A           ADD     A,R2
   \   00009B   2406         ADD     A,#0x6
   \   00009D   F5..         MOV     ?V0 + 0,A
   \   00009F   741E         MOV     A,#0x1e
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   E5..         MOV     A,?V0 + 0
   \   0000A6   F0           MOVX    @DPTR,A
    747            
    748            // allocate buffer
    749            buf = osal_mem_alloc( dataReq.msduLength );
   \   0000A7                ; Setup parameters for call to function osal_mem_alloc
   \   0000A7   FA           MOV     R2,A
   \   0000A8   7B00         MOV     R3,#0x0
   \   0000AA   12....       LCALL   ??osal_mem_alloc?relay
   \   0000AD   8A..         MOV     ?V0 + 0,R2
   \   0000AF   8B..         MOV     ?V0 + 1,R3
    750            if ( buf != NULL )
   \   0000B1   EA           MOV     A,R2
   \   0000B2   45..         ORL     A,?V0 + 1
   \   0000B4   7003         JNZ     $+5
   \   0000B6   02....       LJMP    ??INTERP_DataReq_3 & 0xFFFF
    751            {
    752              dataReq.msdu = buf;
   \   0000B9   741F         MOV     A,#0x1f
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   EA           MOV     A,R2
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   EB           MOV     A,R3
   \   0000C2   F0           MOVX    @DPTR,A
    753              
    754              // Add Stub APS header and data
    755              StubAPS_BuildMsg( &buf[STUB_APS_HDR_FRAME_CTRL], apsFrmCtrl, groupID, req );
   \   0000C3                ; Setup parameters for call to function StubAPS_BuildMsg
   \   0000C3   78..         MOV     R0,#?V0 + 2
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C8   7403         MOV     A,#0x3
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   FC           MOV     R4,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   FD           MOV     R5,A
   \   0000D2   7402         MOV     A,#0x2
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F9           MOV     R1,A
   \   0000D9   EA           MOV     A,R2
   \   0000DA   2402         ADD     A,#0x2
   \   0000DC   FA           MOV     R2,A
   \   0000DD   EB           MOV     A,R3
   \   0000DE   3400         ADDC    A,#0x0
   \   0000E0   FB           MOV     R3,A
   \   0000E1   12....       LCALL   ??StubAPS_BuildMsg?relay
   \   0000E4   7402         MOV     A,#0x2
   \   0000E6   12....       LCALL   ?DEALLOC_XSTACK8
    756              
    757              // Add Stub NWK header
    758              StubNWK_BuildMsg( buf );  
   \   0000E9   AE..         MOV     R6,?V0 + 0
   \   0000EB   AF..         MOV     R7,?V0 + 1
   \   0000ED                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   0000ED   12....       LCALL   ??NLME_GetProtocolVersion?relay
   \   0000F0   E9           MOV     A,R1
   \   0000F1   F5..         MOV     ?V0 + 4,A
   \   0000F3   75..00       MOV     ?V0 + 5,#0x0
   \   0000F6   7402         MOV     A,#0x2
   \   0000F8   78..         MOV     R0,#?V0 + 4
   \   0000FA   12....       LCALL   ?S_SHL
   \   0000FD   E5..         MOV     A,?V0 + 4
   \   0000FF   4403         ORL     A,#0x3
   \   000101   8E82         MOV     DPL,R6
   \   000103   8F83         MOV     DPH,R7
   \   000105   F0           MOVX    @DPTR,A
   \   000106   A3           INC     DPTR
   \   000107   E5..         MOV     A,?V0 + 5
   \   000109   F0           MOVX    @DPTR,A
    759          
    760              // Set ZMac data request
    761              dataReq.DstPANId = req->dstPanId;
   \   00010A   E5..         MOV     A,?V0 + 2
   \   00010C   240B         ADD     A,#0xb
   \   00010E   F582         MOV     DPL,A
   \   000110   E5..         MOV     A,?V0 + 3
   \   000112   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000115   740C         MOV     A,#0xc
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   E8           MOV     A,R0
   \   00011B   F0           MOVX    @DPTR,A
   \   00011C   A3           INC     DPTR
   \   00011D   E9           MOV     A,R1
   \   00011E   F0           MOVX    @DPTR,A
    762              dataReq.SrcAddrMode = Addr64Bit; 
   \   00011F   740E         MOV     A,#0xe
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   7403         MOV     A,#0x3
   \   000126   F0           MOVX    @DPTR,A
    763              dataReq.Handle = req->transID;
   \   000127   E5..         MOV     A,?V0 + 2
   \   000129   2417         ADD     A,#0x17
   \   00012B   F582         MOV     DPL,A
   \   00012D   E5..         MOV     A,?V0 + 3
   \   00012F   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000132   C0E0         PUSH    A
   \   000134   740F         MOV     A,#0xf
   \   000136   12....       LCALL   ?XSTACK_DISP0_8
   \   000139   D0E0         POP     A
   \   00013B   F0           MOVX    @DPTR,A
    764            
    765              if ( ( apsFrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_UNICAST )
   \   00013C   85..82       MOV     DPL,?XSP + 0
   \   00013F   85..83       MOV     DPH,?XSP + 1
   \   000142   E0           MOVX    A,@DPTR
   \   000143   540C         ANL     A,#0xc
   \   000145   700D         JNZ     ??INTERP_DataReq_4
    766                dataReq.TxOptions = NWK_TXOPTIONS_ACK;
   \   000147   7410         MOV     A,#0x10
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   7401         MOV     A,#0x1
   \   00014E   800A         SJMP    ??INTERP_DataReq_5
   \                     ??INTERP_DataReq_0:
   \   000150   7901         MOV     R1,#0x1
   \   000152   8022         SJMP    ??INTERP_DataReq_6
    767              else
    768                dataReq.TxOptions = 0;
   \                     ??INTERP_DataReq_4:
   \   000154   7410         MOV     A,#0x10
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   E4           CLR     A
   \                     ??INTERP_DataReq_5:
   \   00015A   F0           MOVX    @DPTR,A
    769              
    770              // send the frame
    771              status = ZMacDataReq( &dataReq );
   \   00015B                ; Setup parameters for call to function ZMacDataReq
   \   00015B   7403         MOV     A,#0x3
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   AA82         MOV     R2,DPL
   \   000162   AB83         MOV     R3,DPH
   \   000164   12....       LCALL   ??ZMacDataReq?relay
   \   000167   E9           MOV     A,R1
   \   000168   FE           MOV     R6,A
    772              
    773              // free the frame
    774              osal_mem_free( buf );
   \   000169                ; Setup parameters for call to function osal_mem_free
   \   000169   AA..         MOV     R2,?V0 + 0
   \   00016B   AB..         MOV     R3,?V0 + 1
   \   00016D   12....       LCALL   ??osal_mem_free?relay
   \   000170   8002         SJMP    ??INTERP_DataReq_1
    775            }
    776            else
    777            {
    778              // flag a memory error
    779              status = ZMemError;
   \                     ??INTERP_DataReq_3:
   \   000172   7E10         MOV     R6,#0x10
    780            }
    781            
    782            return ( status );
   \                     ??INTERP_DataReq_1:
   \   000174   EE           MOV     A,R6
   \   000175   F9           MOV     R1,A
   \                     ??INTERP_DataReq_6:
   \   000176   7421         MOV     A,#0x21
   \   000178   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017B   7F06         MOV     R7,#0x6
   \   00017D   02....       LJMP    ?BANKED_LEAVE_XDATA
    783            
    784          } /* INTERP_DataReq */
    785          
    786          /******************************************************************************
    787           * @fn          INTERP_DataReqMTU
    788           *
    789           * @brief       This function requests the MTU (Max Transport Unit) of the
    790           *              Inter-PAN Data Service.
    791           *
    792           * @param       none
    793           *
    794           * @return      uint8 - MTU
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          uint8 INTERP_DataReqMTU( void )
   \                     INTERP_DataReqMTU:
    797          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    798            uint8 mtu;
    799            uint8 hdrLen;
    800            
    801            // Use maximum header size for Stub APS header
    802            hdrLen = APS_FRAME_CTRL_FIELD_LEN +
    803                     APS_GROUP_ID_FIELD_LEN   +
    804                     APS_CLUSTERID_FIELD_LEN  +
    805                     APS_PROFILEID_FIELD_LEN;
    806          
    807            mtu = MAC_A_MAX_FRAME_SIZE - STUB_NWK_HDR_LEN - hdrLen;
    808          
    809            return ( mtu );
   \   000000   795D         MOV     R1,#0x5d
   \   000002   02....       LJMP    ?BRET
    810          
    811          } /* INTERP_DataReqMTU */
    812          
    813          /****************************************************************************
    814           * @fn          INTERP_DataConfirm
    815           *
    816           * @brief       This function processes the data confirm from the MAC layer.
    817           *
    818           * @param       dataCnf - data confirm primitive
    819           *
    820           * @return      none
    821           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    822          void INTERP_DataConfirm( ZMacDataCnf_t *dataCnf )
   \                     INTERP_DataConfirm:
    823          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   F8           MOV     R0,A
   \   000006   EB           MOV     A,R3
   \   000007   F9           MOV     R1,A
    824            afDataConfirm( appEndPoint, dataCnf->msduHandle, dataCnf->hdr.Status );
   \   000008                ; Setup parameters for call to function afDataConfirm
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FB           MOV     R3,A
   \   00000F   8882         MOV     DPL,R0
   \   000011   8983         MOV     DPH,R1
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FA           MOV     R2,A
   \   000017   90....       MOV     DPTR,#appEndPoint
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   ??afDataConfirm?relay
    825          
    826          } /* INTERP_DataConfirm */
   \   00001F   02....       LJMP    ??Subroutine16_0 & 0xFFFF
    827          
    828          /****************************************************************************
    829           * @fn          INTERP_DataIndication
    830           *
    831           * @brief       This function indicates the transfer of a data SPDU (MSDU)
    832           *              from the MAC layer to the local application layer entity.
    833           *
    834           * @param       dataInd - data indicate primitive
    835           *
    836           * @return      none
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          void INTERP_DataIndication( macMcpsDataInd_t *dataInd )
   \                     INTERP_DataIndication:
    839          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 64
   \   000005   74C0         MOV     A,#-0x40
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    840            NLDE_FrameFormat_t snff;
    841            aps_FrameFormat_t saff;
    842            zAddrType_t srcAddr;
    843            NLDE_Signal_t sig;
    844          
    845            // parse the Stub NWK header
    846            StubNWK_ParseMsg( dataInd->msdu.p, dataInd->msdu.len, &snff );
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 2,A
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000022   88..         MOV     ?V0 + 0,R0
   \   000024   89..         MOV     ?V0 + 1,R1
   \   000026                ; Setup parameters for call to function osal_memset
   \   000026   7C1F         MOV     R4,#0x1f
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   7403         MOV     A,#0x3
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   12....       LCALL   ??osal_memset?relay
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E5..         MOV     A,?V0 + 2
   \   00003F   F0           MOVX    @DPTR,A
   \   000040                ; Setup parameters for call to function NLDE_ParseFrameControl
   \   000040   AC82         MOV     R4,DPL
   \   000042   AD83         MOV     R5,DPH
   \   000044   85..82       MOV     DPL,?V0 + 0
   \   000047   85..83       MOV     DPH,?V0 + 1
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   FA           MOV     R2,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   EA           MOV     A,R2
   \   000050   2400         ADD     A,#0x0
   \   000052   E4           CLR     A
   \   000053   39           ADDC    A,R1
   \   000054   FB           MOV     R3,A
   \   000055   12....       LCALL   ??NLDE_ParseFrameControl?relay
   \   000058   7404         MOV     A,#0x4
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   7402         MOV     A,#0x2
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   E5..         MOV     A,?V0 + 0
   \   000062   2402         ADD     A,#0x2
   \   000064   F8           MOV     R0,A
   \   000065   E5..         MOV     A,?V0 + 1
   \   000067   3400         ADDC    A,#0x0
   \   000069   F9           MOV     R1,A
   \   00006A   7420         MOV     A,#0x20
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   E8           MOV     A,R0
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   E9           MOV     A,R1
   \   000073   F0           MOVX    @DPTR,A
   \   000074   7403         MOV     A,#0x3
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   24FE         ADD     A,#-0x2
   \   00007C   C0E0         PUSH    A
   \   00007E   741A         MOV     A,#0x1a
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   D0E0         POP     A
   \   000085   F0           MOVX    @DPTR,A
    847          
    848            // Fill in MAC destination address
    849            snff.macDstAddr = dataInd->mac.dstAddr.addr.shortAddr;
   \   000086   EE           MOV     A,R6
   \   000087   241B         ADD     A,#0x1b
   \   000089   F582         MOV     DPL,A
   \   00008B   EF           MOV     A,R7
   \   00008C   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00008F   7410         MOV     A,#0x10
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   E8           MOV     A,R0
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   E9           MOV     A,R1
   \   000098   F0           MOVX    @DPTR,A
    850            
    851            // fill in MAC source address (Stub NWK frame doesn't have address fields)
    852            osal_copyAddress( &srcAddr, (zAddrType_t *)&(dataInd->mac.srcAddr) );
   \   000099                ; Setup parameters for call to function sAddrCpy
   \   000099   EE           MOV     A,R6
   \   00009A   2412         ADD     A,#0x12
   \   00009C   FC           MOV     R4,A
   \   00009D   EF           MOV     A,R7
   \   00009E   3400         ADDC    A,#0x0
   \   0000A0   FD           MOV     R5,A
   \   0000A1   7437         MOV     A,#0x37
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   AA82         MOV     R2,DPL
   \   0000A8   AB83         MOV     R3,DPH
   \   0000AA   12....       LCALL   ??sAddrCpy?relay
    853            
    854            // check if incoming frame is of the right type
    855            if ( snff.frameType != STUB_NWK_FRAME_TYPE )
   \   0000AD   7405         MOV     A,#0x5
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   6403         XRL     A,#0x3
   \   0000B5   6003         JZ      $+5
   \   0000B7   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    856              return;
    857              
    858            // check if incoming frame is of the right version
    859            if ( snff.protocolVersion != NLME_GetProtocolVersion() )
   \   0000BA                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   0000BA   12....       LCALL   ??NLME_GetProtocolVersion?relay
   \   0000BD   E9           MOV     A,R1
   \   0000BE   F8           MOV     R0,A
   \   0000BF   7406         MOV     A,#0x6
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   68           XRL     A,R0
   \   0000C6   6003         JZ      $+5
   \   0000C8   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    860              return;
    861            
    862            // check if the remaining sun-fields are zero
    863            if ( ( snff.discoverRoute != 0 ) || ( snff.multicast != 0 )   ||
    864                 ( snff.secure != 0 )        || ( snff.srcRouteSet != 0 ) ||
    865                 ( snff.dstExtAddrSet != 0 ) || ( snff.srcExtAddrSet != 0 ) )
   \   0000CB   7407         MOV     A,#0x7
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   6003         JZ      $+5
   \   0000D3   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
   \   0000D6   7408         MOV     A,#0x8
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   6003         JZ      $+5
   \   0000DE   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
   \   0000E1   7409         MOV     A,#0x9
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   6003         JZ      $+5
   \   0000E9   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
   \   0000EC   741B         MOV     A,#0x1b
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   6003         JZ      $+5
   \   0000F4   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
   \   0000F7   740A         MOV     A,#0xa
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   6003         JZ      $+5
   \   0000FF   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
   \   000102   740B         MOV     A,#0xb
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   E0           MOVX    A,@DPTR
   \   000108   6003         JZ      $+5
   \   00010A   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    866            {
    867              return;
    868            }
    869            
    870            // parse the Stub APS header
    871            StubAPS_ParseMsg( &snff, &saff );
   \   00010D                ; Setup parameters for call to function StubAPS_ParseMsg
   \   00010D   7422         MOV     A,#0x22
   \   00010F   12....       LCALL   ?XSTACK_DISP0_8
   \   000112   AC82         MOV     R4,DPL
   \   000114   AD83         MOV     R5,DPH
   \   000116   7403         MOV     A,#0x3
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   AA82         MOV     R2,DPL
   \   00011D   AB83         MOV     R3,DPH
   \   00011F   12....       LCALL   ??StubAPS_ParseMsg?relay
    872          
    873            // check if incoming frame is of the right type
    874            if ( ( saff.FrmCtrl & APS_FRAME_TYPE_MASK ) != STUB_APS_FRAME )
   \   000122   7422         MOV     A,#0x22
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   E0           MOVX    A,@DPTR
   \   000128   5403         ANL     A,#0x3
   \   00012A   6403         XRL     A,#0x3
   \   00012C   6003         JZ      $+5
   \   00012E   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    875              return;
    876             
    877            // check if delivery mode is of the right type
    878            if ( ( saff.FrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_INDIRECT )
   \   000131   E0           MOVX    A,@DPTR
   \   000132   540C         ANL     A,#0xc
   \   000134   6404         XRL     A,#0x4
   \   000136   7003         JNZ     $+5
   \   000138   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    879              return;
    880            
    881            // check if incoming frame is unsecured
    882            if ( saff.FrmCtrl & APS_FC_SECURITY )
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   54A0         ANL     A,#0xa0
   \   00013E   6003         JZ      $+5
   \   000140   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    883              return;
    884            
    885            // check if there's no extended header
    886            if ( saff.FrmCtrl & APS_FC_EXTENDED )
    887                return;
    888            
    889            // Set the endpoints
    890            saff.DstEndPoint = appEndPoint;
   \   000143   90....       MOV     DPTR,#appEndPoint
   \   000146   E0           MOVX    A,@DPTR
   \   000147   C0E0         PUSH    A
   \   000149   7424         MOV     A,#0x24
   \   00014B   12....       LCALL   ?XSTACK_DISP0_8
   \   00014E   D0E0         POP     A
   \   000150   F0           MOVX    @DPTR,A
    891            saff.SrcEndPoint = STUBAPS_INTER_PAN_EP;
   \   000151   7425         MOV     A,#0x25
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   74FE         MOV     A,#-0x2
   \   000158   F0           MOVX    @DPTR,A
    892            
    893            // Set the signal strength information
    894            sig.LinkQuality = dataInd->mac.mpduLinkQuality;
   \   000159   EE           MOV     A,R6
   \   00015A   242E         ADD     A,#0x2e
   \   00015C   F582         MOV     DPL,A
   \   00015E   EF           MOV     A,R7
   \   00015F   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000162   85..82       MOV     DPL,?XSP + 0
   \   000165   85..83       MOV     DPH,?XSP + 1
   \   000168   F0           MOVX    @DPTR,A
    895            sig.correlation = dataInd->mac.correlation;
   \   000169   EE           MOV     A,R6
   \   00016A   242F         ADD     A,#0x2f
   \   00016C   F582         MOV     DPL,A
   \   00016E   EF           MOV     A,R7
   \   00016F   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000172   C0E0         PUSH    A
   \   000174   7401         MOV     A,#0x1
   \   000176   12....       LCALL   ?XSTACK_DISP0_8
   \   000179   D0E0         POP     A
   \   00017B   F0           MOVX    @DPTR,A
    896            sig.rssi = dataInd->mac.rssi;
   \   00017C   EE           MOV     A,R6
   \   00017D   2430         ADD     A,#0x30
   \   00017F   F582         MOV     DPL,A
   \   000181   EF           MOV     A,R7
   \   000182   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000185   C0E0         PUSH    A
   \   000187   7402         MOV     A,#0x2
   \   000189   12....       LCALL   ?XSTACK_DISP0_8
   \   00018C   D0E0         POP     A
   \   00018E   F0           MOVX    @DPTR,A
    897            
    898            APSDE_DataIndication( &saff, &srcAddr, dataInd->mac.srcPanId, 
    899                                  &sig, snff.broadcastId, FALSE, dataInd->mac.timestamp );
   \   00018F                ; Setup parameters for call to function APSDE_DataIndication
   \   00018F   EE           MOV     A,R6
   \   000190   2424         ADD     A,#0x24
   \   000192   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000195   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000198   75..00       MOV     ?V0 + 0,#0x0
   \   00019B   78..         MOV     R0,#?V0 + 0
   \   00019D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001A0   7405         MOV     A,#0x5
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   8582..       MOV     ?V0 + 0,DPL
   \   0001A8   8583..       MOV     ?V0 + 1,DPH
   \   0001AB   78..         MOV     R0,#?V0 + 0
   \   0001AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B0   EE           MOV     A,R6
   \   0001B1   242A         ADD     A,#0x2a
   \   0001B3   12....       LCALL   ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0001B6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001B9   741E         MOV     A,#0x1e
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   F9           MOV     R1,A
   \   0001C0   7440         MOV     A,#0x40
   \   0001C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C5   AC82         MOV     R4,DPL
   \   0001C7   AD83         MOV     R5,DPH
   \   0001C9   742B         MOV     A,#0x2b
   \   0001CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CE   AA82         MOV     R2,DPL
   \   0001D0   AB83         MOV     R3,DPH
   \   0001D2   12....       LCALL   ??APSDE_DataIndication?relay
   \   0001D5   7409         MOV     A,#0x9
   \   0001D7   12....       LCALL   ?DEALLOC_XSTACK8
    900          
    901          } /* INTERP_DataIndication */
   \                     ??INTERP_DataIndication_0:
   \   0001DA   7440         MOV     A,#0x40
   \   0001DC   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for StubAPS_TaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for appTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StubAPS_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StubAPS_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StubAPS_ParseMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_ParseMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StubAPS_BuildFrameControl?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_BuildFrameControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StubAPS_BuildMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_BuildMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StubAPS_SetNewChannel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_SetNewChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StubAPS_SetInterPanChannel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_SetInterPanChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StubAPS_SetIntraPanChannel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_SetIntraPanChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StubAPS_InterPan?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_InterPan

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StubAPS_RegisterApp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_RegisterApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??StubAPS_ZMacCallback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_ZMacCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??INTERP_DataReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??INTERP_DataReqMTU?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??INTERP_DataConfirm?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??INTERP_DataIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataIndication
    902          
    903          
    904          /*********************************************************************
    905          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0     13  INTERP_DataConfirm
                          2 0  0 -> afDataConfirm
       1      0     97  INTERP_DataIndication
                          0 0 84 -> APSDE_DataIndication
                          0 0 75 -> NLDE_ParseFrameControl
                          0 0 75 -> NLME_GetProtocolVersion
                          0 0 75 -> StubAPS_ParseMsg
                          0 0 75 -> osal_memset
                          0 0 75 -> sAddrCpy
       1      0     51  INTERP_DataReq
                          0 0 47 -> NLME_GetProtocolVersion
                          0 0 51 -> StubAPS_BuildFrameControl
                          0 0 49 -> StubAPS_BuildMsg
                          0 0 47 -> ZMacDataReq
                          0 0 47 -> osal_mem_alloc
                          0 0 47 -> osal_mem_free
                          0 0 47 -> osal_memset
       0      0      0  INTERP_DataReqMTU
       1      0     62  StubAPS_BuildFrameControl
                          0 0 11 -> sAddrExtCpy
       1      0     63  StubAPS_BuildMsg
                          0 0 14 -> osal_memcpy
       2      0      0  StubAPS_Init
       0      0      0  StubAPS_InterPan
       1      0     85  StubAPS_ParseMsg
                          0 0 10 -> osal_memset
       1      0     13  StubAPS_ProcessEvent
                          0 0 13 -> INTERP_DataConfirm
                          0 0 13 -> INTERP_DataIndication
                          0 0 13 -> StubAPS_SetNewChannel
                          0 0 13 -> ZMacSetReq
                          0 0 13 -> nwk_setStateIdle
                          0 0 13 -> osal_msg_allocate
                          0 0 13 -> osal_msg_deallocate
                          0 0 13 -> osal_msg_receive
                          0 0 13 -> osal_msg_send
       2      0      0  StubAPS_RegisterApp
       0      0     11  StubAPS_SetInterPanChannel
                          0 0 11 -> StubAPS_SetNewChannel
                          0 0 11 -> ZMacGetReq
                          0 0 11 -> ZMacSetReq
                          0 0 11 -> nwk_setStateIdle
                          0 0 11 -> osal_start_timerEx
       2      0      2  StubAPS_SetIntraPanChannel
                          2 0  2 -> ZMacGetReq
                          2 0  2 -> ZMacSetReq
                          2 0  2 -> nwk_setStateIdle
       3      0     15  StubAPS_SetNewChannel
                          2 0  2 -> ZMacSetReq
                          2 0  2 -> ZMacStateIdle
                          2 0  2 -> nwkDB_CountTypes
       2      0      0  StubAPS_ZMacCallback
                          2 0  0 -> osal_msg_send


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for StubAPS_TaskID>
       1  ?<Initializer for appTaskID>
       6  ??INTERP_DataConfirm?relay
       6  ??INTERP_DataIndication?relay
       6  ??INTERP_DataReq?relay
       6  ??INTERP_DataReqMTU?relay
       6  ??StubAPS_BuildFrameControl?relay
       6  ??StubAPS_BuildMsg?relay
       6  ??StubAPS_Init?relay
       6  ??StubAPS_InterPan?relay
       6  ??StubAPS_ParseMsg?relay
       6  ??StubAPS_ProcessEvent?relay
       6  ??StubAPS_RegisterApp?relay
       6  ??StubAPS_SetInterPanChannel?relay
       6  ??StubAPS_SetIntraPanChannel?relay
       6  ??StubAPS_SetNewChannel?relay
       6  ??StubAPS_ZMacCallback?relay
       8  ??Subroutine13_0
      17  ??Subroutine14_0
       5  ??Subroutine15_0
       7  ??Subroutine16_0
       4  ??Subroutine17_0
       6  ??Subroutine18_0
       8  ??Subroutine19_0
       6  ??Subroutine20_0
       5  ?Subroutine0
       3  ?Subroutine1
       4  ?Subroutine10
      17  ?Subroutine11
       3  ?Subroutine12
       2  ?Subroutine2
       8  ?Subroutine3
      17  ?Subroutine4
      15  ?Subroutine5
       4  ?Subroutine6
      19  ?Subroutine7
       7  ?Subroutine8
      10  ?Subroutine9
      34  INTERP_DataConfirm
     479  INTERP_DataIndication
     384  INTERP_DataReq
       5  INTERP_DataReqMTU
     231  StubAPS_BuildFrameControl
     101  StubAPS_BuildMsg
      22  StubAPS_Init
      16  StubAPS_InterPan
     217  StubAPS_ParseMsg
     162  StubAPS_ProcessEvent
      27  StubAPS_RegisterApp
     113  StubAPS_SetInterPanChannel
      98  StubAPS_SetIntraPanChannel
      63  StubAPS_SetNewChannel
       1  StubAPS_TaskID
      72  StubAPS_ZMacCallback
       1  appEndPoint
       1  appTaskID
       1  channelChangeInProgress
       1  newChannel

 
 2 199 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
     3 bytes in segment XDATA_Z
 
 2 291 bytes of CODE  memory
     5 bytes of XDATA memory

Errors: none
Warnings: none
