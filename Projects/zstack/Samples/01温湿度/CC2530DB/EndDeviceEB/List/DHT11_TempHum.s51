///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            07/Dec/2016  15:47:18 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\Source\D /
//                          HT11_TempHum.c                                    /
//    Command line       =  -f E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC253 /
//                          0DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg          /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f E:\Lib\micro-electromechan /
//                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sa /
//                          mples\01ÎÂÊª¶È\CC2530DB\..\..\..\Tools\CC2530DB\f /
//                          8wConfig.cfg (-DZIGBEEPRO -DSECURE=0              /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00100000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\Lib\micro-electromechan /
//                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sa /
//                          mples\01ÎÂÊª¶È\Source\DHT11_TempHum.c -D          /
//                          NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D           /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC          /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \EndDeviceEB\List\ -lA E:\Lib\micro-electromechan /
//                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sa /
//                          mples\01ÎÂÊª¶È\CC2530DB\EndDeviceEB\List\         /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \EndDeviceEB\Obj\ -e --no_code_motion --debug     /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \ -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-C /
//                          C2530-2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2 /
//                          530DB\..\Source\ -I E:\Lib\micro-electromechanica /
//                          l\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sampl /
//                          es\01ÎÂÊª¶È\CC2530DB\..\..\..\ZMain\TI2530DB\ -I  /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\hal\include\ -I        /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\hal\target\CC2530EB\   /
//                          -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC253 /
//                          0DB\..\..\..\..\..\Components\mac\include\ -I     /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\mac\high_level\ -I     /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\mac\low_level\srf04\   /
//                          -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC253 /
//                          0DB\..\..\..\..\..\Components\mac\low_level\srf04 /
//                          \single_chip\ -I E:\Lib\micro-electromechanical\Ê /
//                          ±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ /
//                          01ÎÂÊª¶È\CC2530DB\..\..\..\..\..\Components\mt\   /
//                          -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC253 /
//                          0DB\..\..\..\..\..\Components\osal\include\ -I    /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\services\saddr\ -I     /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\services\sdata\ -I     /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\stack\af\ -I           /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\stack\nwk\ -I          /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\stack\sapi\ -I         /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\stack\sec\ -I          /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\stack\sys\ -I          /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\stack\zdo\ -I          /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\zmac\ -I               /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\zmac\f8w\ -Ohz         /
//    List file          =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \EndDeviceEB\List\DHT11_TempHum.s51               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME DHT11_TempHum

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??COMM?relay
        FUNCTION ??COMM?relay,0203H
        PUBLIC ??Delay_10us?relay
        FUNCTION ??Delay_10us?relay,0203H
        PUBLIC ??Delay_ms?relay
        FUNCTION ??Delay_ms?relay,0203H
        PUBLIC ??Delay_us?relay
        FUNCTION ??Delay_us?relay,0203H
        PUBLIC ??Read_DHT11?relay
        FUNCTION ??Read_DHT11?relay,0203H
        PUBLIC COMM
        FUNCTION COMM,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Delay_10us
        FUNCTION Delay_10us,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Delay_ms
        FUNCTION Delay_ms,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Delay_us
        FUNCTION Delay_us,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Hum
        PUBLIC Hum_H
        PUBLIC Hum_L
        PUBWEAK P1DIR
        PUBLIC Read_DHT11
        FUNCTION Read_DHT11,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Temp
        PUBLIC U8FLAG
        PUBLIC U8RH_data_H
        PUBLIC U8RH_data_H_temp
        PUBLIC U8RH_data_L
        PUBLIC U8RH_data_L_temp
        PUBLIC U8T_data_H
        PUBLIC U8T_data_H_temp
        PUBLIC U8T_data_L
        PUBLIC U8T_data_L_temp
        PUBLIC U8checkdata
        PUBLIC U8checkdata_temp
        PUBLIC U8comdata
        PUBLIC U8temp
        PUBWEAK _A_P1
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
Onboard_wait        SYMBOL "Onboard_wait"
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
COMM                SYMBOL "COMM"
??COMM?relay        SYMBOL "?relay", COMM
Delay_10us          SYMBOL "Delay_10us"
??Delay_10us?relay  SYMBOL "?relay", Delay_10us
Delay_ms            SYMBOL "Delay_ms"
??Delay_ms?relay    SYMBOL "?relay", Delay_ms
Delay_us            SYMBOL "Delay_us"
??Delay_us?relay    SYMBOL "?relay", Delay_us
Read_DHT11          SYMBOL "Read_DHT11"
??Read_DHT11?relay  SYMBOL "?relay", Read_DHT11

        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\Source\DHT11_TempHum.c
//    1 //DHT11ÎÂ¶ÈÊª¶È²É¼¯»ù´¡ÊµÑé
//    2 
//    3 #include <ioCC2530.h>

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    4 #include "OnBoard.h"
//    5 #define uint unsigned int
//    6 #define U8 unsigned char
//    7 
//    8 
//    9 #define DATA_PIN P1_3 
//   10 
//   11 /*******º¯ÊýÉùÃ÷*********/
//   12 void Delay_us(void);      //1usÑÓÊ±
//   13 void Delay_10us(void);    //10usÑÓÊ±
//   14 void Delay_ms(uint Time); //nmsÑÓÊ±
//   15 void COMM(void);          //ÎÂÊªÐ´Èë
//   16 void Read_DHT11(void) ;   //ÎÂÊª´«¸ÐÆô¶¯
//   17 
//   18 
//   19 //ÎÂÊª¶È¶¨Òå

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   20 U8 U8FLAG,U8temp;
U8FLAG:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
U8temp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   21 U8 Hum_H,Hum_L;           //¶¨ÒåÊª¶È´æ·Å±äÁ¿
Hum_H:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
Hum_L:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   22 U8 Temp,Hum;              //¶¨ÒåÎÂ¶È´æ·Å±äÁ¿
Temp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
Hum:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   23 U8 U8T_data_H,U8T_data_L,U8RH_data_H,U8RH_data_L,U8checkdata;
U8T_data_H:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
U8T_data_L:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
U8RH_data_H:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
U8RH_data_L:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
U8checkdata:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   24 U8 U8T_data_H_temp,U8T_data_L_temp,U8RH_data_H_temp,U8RH_data_L_temp,U8checkdata_temp;
U8T_data_H_temp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
U8T_data_L_temp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
U8RH_data_H_temp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
U8RH_data_L_temp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
U8checkdata_temp:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   25 U8 U8comdata;
U8comdata:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   26 
//   27 
//   28 /****************************
//   29 //ÑÓÊ±º¯Êý
//   30 *****************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   31 void Delay_us(void)
Delay_us:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function Delay_us
        CODE
//   32 {
        FUNCALL Delay_us, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   33     MicroWait(1);   
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x1
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//   34 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
          CFI EndBlock cfiBlock1
        REQUIRE ??Subroutine3_0
        ; // Fall through to label ??Subroutine3_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine3_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock2
//   35 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   36 void Delay_10us(void)
Delay_10us:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function Delay_10us
        CODE
//   37 {
        FUNCALL Delay_10us, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   38    MicroWait(10);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock3
//   39 }
//   40 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   41 void Delay_ms(uint Time)
Delay_ms:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function Delay_ms
        CODE
//   42 {
        FUNCALL Delay_ms, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   43   unsigned char i;
//   44   while(Time--)
??Delay_ms_0:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R7,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??Delay_ms_1
//   45   {
//   46     for(i = 0;i<100;i++)
        MOV     ?V0 + 0,#0x64
//   47      Delay_10us();
??Delay_ms_2:
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        JZ      ??Delay_ms_0
        SJMP    ??Delay_ms_2
          CFI EndBlock cfiBlock4
//   48   }
//   49 }
??Delay_ms_1:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//   50 
//   51 
//   52 /***********************
//   53    ÎÂÊª¶È´«¸Ð
//   54 ***********************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   55 void COMM(void)	// ÎÂÊªÐ´Èë
COMM:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function COMM
        CODE
//   56 {     
        FUNCALL COMM, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL COMM, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL COMM, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   57     U8 i;         
//   58     for(i = 0;i<8;i++)    
        MOV     R6,#0x8
//   59     {
//   60      U8FLAG = 2; 
??COMM_0:
        MOV     DPTR,#U8FLAG
        MOV     A,#0x2
        MOVX    @DPTR,A
//   61      DATA_PIN = 0;
        CLR     0x90.3
//   62      DATA_PIN = 1;
        SETB    0x90.3
//   63      while((!DATA_PIN)&&U8FLAG++);
??COMM_1:
        MOV     C,0x90.3
        JC      ??COMM_2
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        JNZ     ??COMM_1
//   64      Delay_10us();
??COMM_2:
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//   65      Delay_10us();
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//   66      Delay_10us();
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//   67      U8temp = 0;
        MOV     DPTR,#U8temp
        CLR     A
        MOVX    @DPTR,A
//   68      if(DATA_PIN)U8temp = 1;
        MOV     C,0x90.3
        JNC     ??COMM_3
        INC     A
        MOVX    @DPTR,A
//   69      U8FLAG = 2;
??COMM_3:
        MOV     DPTR,#U8FLAG
        MOV     A,#0x2
        MOVX    @DPTR,A
//   70      while((DATA_PIN)&&U8FLAG++);   
??COMM_4:
        MOV     C,0x90.3
        JNC     ??COMM_5
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        JNZ     ??COMM_4
//   71      if(U8FLAG == 1)break;    
??COMM_5:
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??COMM_6
//   72      U8comdata <<= 1;
//   73      U8comdata |= U8temp; 
        MOV     DPTR,#U8temp
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#U8comdata
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        ORL     A,R0
        MOVX    @DPTR,A
//   74      }    
        DEC     R6
        MOV     A,R6
        JNZ     ??COMM_0
//   75 }
??COMM_6:
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock6
        REQUIRE _A_P1
//   76 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   77 void Read_DHT11(void)   //ÎÂÊª´«¸ÐÆô¶¯
Read_DHT11:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function Read_DHT11
        CODE
//   78 {
        FUNCALL Read_DHT11, Delay_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Read_DHT11, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Read_DHT11, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Read_DHT11, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Read_DHT11, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Read_DHT11, COMM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Read_DHT11, COMM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Read_DHT11, COMM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Read_DHT11, COMM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Read_DHT11, COMM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   79     DATA_PIN = 0;
        CLR     0x90.3
//   80     Delay_ms(19);  //Ö÷»úÀ­µÍ18ms
        ; Setup parameters for call to function Delay_ms
        MOV     R2,#0x13
        MOV     R3,#0x0
        LCALL   ??Delay_ms?relay
//   81     DATA_PIN = 1;     //×ÜÏßÓÉÉÏÀ­µç×èÀ­¸ß Ö÷»úÑÓÊ±40us 
        SETB    0x90.3
//   82     P1DIR &=  ~0x08; //ÖØÐÂÅäÖÃIO¿Ú·½Ïò
        ANL     0xfe,#0xf7
//   83     Delay_10us();
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//   84     Delay_10us();						
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//   85     Delay_10us();
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//   86     Delay_10us();  
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//   87     //ÅÐ¶Ï´Ó»úÊÇ·ñÓÐµÍµçÆ½ÏìÓ¦ÐÅºÅ Èç²»ÏìÓ¦ÔòÌø³ö£¬ÏìÓ¦ÔòÏòÏÂÔËÐÐ 
//   88      if(!DATA_PIN) 
        MOV     C,0x90.3
        JNC     $+5
        LJMP    ??Read_DHT11_0 & 0xFFFF
//   89      {
//   90       U8FLAG = 2; //ÅÐ¶Ï´Ó»úÊÇ·ñ·¢³ö 80us µÄµÍµçÆ½ÏìÓ¦ÐÅºÅÊÇ·ñ½áÊø 
        MOV     DPTR,#U8FLAG
        MOV     A,#0x2
        MOVX    @DPTR,A
//   91       while((!DATA_PIN)&&U8FLAG++);
??Read_DHT11_1:
        MOV     C,0x90.3
        JC      ??Read_DHT11_2
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        JNZ     ??Read_DHT11_1
//   92       U8FLAG = 2;//ÅÐ¶Ï´Ó»úÊÇ·ñ·¢³ö 80us µÄ¸ßµçÆ½£¬Èç·¢³öÔò½øÈëÊý¾Ý½ÓÊÕ×´Ì¬
??Read_DHT11_2:
        MOV     A,#0x2
        MOVX    @DPTR,A
//   93       while((DATA_PIN)&&U8FLAG++); 
??Read_DHT11_3:
        MOV     C,0x90.3
        JNC     ??Read_DHT11_4
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        JNZ     ??Read_DHT11_3
//   94       COMM();//Êý¾Ý½ÓÊÕ×´Ì¬ 
??Read_DHT11_4:
        ; Setup parameters for call to function COMM
        LCALL   ??COMM?relay
//   95       U8RH_data_H_temp = U8comdata;
        MOV     DPTR,#U8comdata
        MOVX    A,@DPTR
        MOV     DPTR,#U8RH_data_H_temp
        MOVX    @DPTR,A
//   96       COMM();
        ; Setup parameters for call to function COMM
        LCALL   ??COMM?relay
//   97       U8RH_data_L_temp = U8comdata;
        MOV     DPTR,#U8comdata
        MOVX    A,@DPTR
        MOV     DPTR,#U8RH_data_L_temp
        MOVX    @DPTR,A
//   98       COMM();
        ; Setup parameters for call to function COMM
        LCALL   ??COMM?relay
//   99       U8T_data_H_temp = U8comdata;
        MOV     DPTR,#U8comdata
        MOVX    A,@DPTR
        MOV     DPTR,#U8T_data_H_temp
        MOVX    @DPTR,A
//  100       COMM();
        ; Setup parameters for call to function COMM
        LCALL   ??COMM?relay
//  101       U8T_data_L_temp = U8comdata;
        MOV     DPTR,#U8comdata
        MOVX    A,@DPTR
        MOV     DPTR,#U8T_data_L_temp
        MOVX    @DPTR,A
//  102       COMM();
        ; Setup parameters for call to function COMM
        LCALL   ??COMM?relay
//  103       U8checkdata_temp = U8comdata;
        MOV     DPTR,#U8comdata
        MOVX    A,@DPTR
        MOV     DPTR,#U8checkdata_temp
        MOVX    @DPTR,A
//  104       DATA_PIN = 1; 
        SETB    0x90.3
//  105       //Êý¾ÝÐ£Ñé 
//  106       U8temp = (U8T_data_H_temp+U8T_data_L_temp+U8RH_data_H_temp+U8RH_data_L_temp);
        MOV     DPTR,#U8RH_data_L_temp
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#U8RH_data_H_temp
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#U8T_data_L_temp
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#U8T_data_H_temp
        MOVX    A,@DPTR
        ADD     A,R0
        ADD     A,R1
        ADD     A,R2
        MOV     DPTR,#U8temp
        MOVX    @DPTR,A
//  107        if(U8temp == U8checkdata_temp)
        MOV     R0,A
        MOV     DPTR,#U8checkdata_temp
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??Read_DHT11_5
//  108       {
//  109           U8RH_data_H = U8RH_data_H_temp;
        MOV     DPTR,#U8RH_data_H_temp
        MOVX    A,@DPTR
        MOV     DPTR,#U8RH_data_H
        MOVX    @DPTR,A
//  110           U8RH_data_L = U8RH_data_L_temp;
        MOV     DPTR,#U8RH_data_L_temp
        MOVX    A,@DPTR
        MOV     DPTR,#U8RH_data_L
        MOVX    @DPTR,A
//  111           U8T_data_H = U8T_data_H_temp;
        MOV     DPTR,#U8T_data_H_temp
        MOVX    A,@DPTR
        MOV     DPTR,#U8T_data_H
        MOVX    @DPTR,A
//  112           U8T_data_L = U8T_data_L_temp;
        MOV     DPTR,#U8T_data_L_temp
        MOVX    A,@DPTR
        MOV     DPTR,#U8T_data_L
        MOVX    @DPTR,A
//  113           U8checkdata = U8checkdata_temp;
        MOV     DPTR,#U8checkdata_temp
        MOVX    A,@DPTR
        MOV     DPTR,#U8checkdata
        MOVX    @DPTR,A
//  114        }
//  115        Temp = U8T_data_H;
??Read_DHT11_5:
        MOV     DPTR,#U8T_data_H
        MOVX    A,@DPTR
        MOV     DPTR,#Temp
        MOVX    @DPTR,A
//  116        Hum = U8RH_data_H;
        MOV     DPTR,#U8RH_data_H
        MOVX    A,@DPTR
        SJMP    ??Read_DHT11_6
//  117     } 
//  118     else 
//  119     {  
//  120       Temp = 0;
??Read_DHT11_0:
        MOV     DPTR,#Temp
        CLR     A
        MOVX    @DPTR,A
//  121       Hum = 0;
??Read_DHT11_6:
        MOV     DPTR,#Hum
        MOVX    @DPTR,A
//  122     } 
//  123     P1DIR |=  0x08; 
        ORL     0xfe,#0x8
//  124 }
        LJMP    ??Subroutine3_0 & 0xFFFF
          CFI EndBlock cfiBlock7
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function COMM
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function COMM
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+0
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function Read_DHT11
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond10) CFA_SP SP+-5
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function Read_DHT11
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond11) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond11) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond11) CFA_SP SP+-5
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        ADD     A,R0
        MOVX    @DPTR,A
        MOV     A,R0
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_us?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Delay_us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_10us?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Delay_10us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_ms?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Delay_ms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??COMM?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    COMM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Read_DHT11?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Read_DHT11

        END
// 
// 419 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//   2 bytes in segment SFR_AN
//  17 bytes in segment XDATA_Z
// 
// 449 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 2 bytes shared)
//  17 bytes of XDATA memory
//
//Errors: none
//Warnings: none
