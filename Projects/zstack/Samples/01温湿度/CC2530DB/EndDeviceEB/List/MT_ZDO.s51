///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            07/Dec/2016  15:47:18 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Components\mt\MT_ZDO.c                    /
//    Command line       =  -f E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC253 /
//                          0DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg          /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f E:\Lib\micro-electromechan /
//                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sa /
//                          mples\01ÎÂÊª¶È\CC2530DB\..\..\..\Tools\CC2530DB\f /
//                          8wConfig.cfg (-DZIGBEEPRO -DSECURE=0              /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00100000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\Lib\micro-electromechan /
//                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Components\mt\MT_Z /
//                          DO.c -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D   /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC          /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \EndDeviceEB\List\ -lA E:\Lib\micro-electromechan /
//                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sa /
//                          mples\01ÎÂÊª¶È\CC2530DB\EndDeviceEB\List\         /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \EndDeviceEB\Obj\ -e --no_code_motion --debug     /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \ -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-C /
//                          C2530-2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2 /
//                          530DB\..\Source\ -I E:\Lib\micro-electromechanica /
//                          l\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sampl /
//                          es\01ÎÂÊª¶È\CC2530DB\..\..\..\ZMain\TI2530DB\ -I  /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\hal\include\ -I        /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\hal\target\CC2530EB\   /
//                          -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC253 /
//                          0DB\..\..\..\..\..\Components\mac\include\ -I     /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\mac\high_level\ -I     /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\mac\low_level\srf04\   /
//                          -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC253 /
//                          0DB\..\..\..\..\..\Components\mac\low_level\srf04 /
//                          \single_chip\ -I E:\Lib\micro-electromechanical\Ê /
//                          ±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ /
//                          01ÎÂÊª¶È\CC2530DB\..\..\..\..\..\Components\mt\   /
//                          -I E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC253 /
//                          0DB\..\..\..\..\..\Components\osal\include\ -I    /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\services\saddr\ -I     /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\services\sdata\ -I     /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\stack\af\ -I           /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\stack\nwk\ -I          /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\stack\sapi\ -I         /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\stack\sec\ -I          /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\stack\sys\ -I          /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\stack\zdo\ -I          /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\zmac\ -I               /
//                          E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \..\..\..\..\..\Components\zmac\f8w\ -Ohz         /
//    List file          =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\01ÎÂÊª¶È\CC2530DB /
//                          \EndDeviceEB\List\MT_ZDO.s51                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_ZDO

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??MT_ZdoActiveEpRequest?relay
        FUNCTION ??MT_ZdoActiveEpRequest?relay,0203H
        PUBLIC ??MT_ZdoBeaconIndCB?relay
        FUNCTION ??MT_ZdoBeaconIndCB?relay,0203H
        PUBLIC ??MT_ZdoBindRequest?relay
        FUNCTION ??MT_ZdoBindRequest?relay,0203H
        PUBLIC ??MT_ZdoCommandProcessing?relay
        FUNCTION ??MT_ZdoCommandProcessing?relay,0203H
        PUBLIC ??MT_ZdoComplexDescRequest?relay
        FUNCTION ??MT_ZdoComplexDescRequest?relay,0203H
        PUBLIC ??MT_ZdoEndDevAnnce?relay
        FUNCTION ??MT_ZdoEndDevAnnce?relay,0203H
        PUBLIC ??MT_ZdoEndDevBindRequest?relay
        FUNCTION ??MT_ZdoEndDevBindRequest?relay,0203H
        PUBLIC ??MT_ZdoIEEEAddrRequest?relay
        FUNCTION ??MT_ZdoIEEEAddrRequest?relay,0203H
        PUBLIC ??MT_ZdoInit?relay
        FUNCTION ??MT_ZdoInit?relay,0203H
        PUBLIC ??MT_ZdoJoinCnfCB?relay
        FUNCTION ??MT_ZdoJoinCnfCB?relay,0203H
        PUBLIC ??MT_ZdoJoinReq?relay
        FUNCTION ??MT_ZdoJoinReq?relay,0203H
        PUBLIC ??MT_ZdoMatchDescRequest?relay
        FUNCTION ??MT_ZdoMatchDescRequest?relay,0203H
        PUBLIC ??MT_ZdoNWKAddressRequest?relay
        FUNCTION ??MT_ZdoNWKAddressRequest?relay,0203H
        PUBLIC ??MT_ZdoNetworkDiscoveryReq?relay
        FUNCTION ??MT_ZdoNetworkDiscoveryReq?relay,0203H
        PUBLIC ??MT_ZdoNodeDescRequest?relay
        FUNCTION ??MT_ZdoNodeDescRequest?relay,0203H
        PUBLIC ??MT_ZdoNwkDiscoveryCnfCB?relay
        FUNCTION ??MT_ZdoNwkDiscoveryCnfCB?relay,0203H
        PUBLIC ??MT_ZdoPowerDescRequest?relay
        FUNCTION ??MT_ZdoPowerDescRequest?relay,0203H
        PUBLIC ??MT_ZdoRegisterForZDOMsg?relay
        FUNCTION ??MT_ZdoRegisterForZDOMsg?relay,0203H
        PUBLIC ??MT_ZdoRemoveRegisteredCB?relay
        FUNCTION ??MT_ZdoRemoveRegisteredCB?relay,0203H
        PUBLIC ??MT_ZdoSendMsgCB?relay
        FUNCTION ??MT_ZdoSendMsgCB?relay,0203H
        PUBLIC ??MT_ZdoServiceDiscRequest?relay
        FUNCTION ??MT_ZdoServiceDiscRequest?relay,0203H
        PUBLIC ??MT_ZdoSimpleDescRequest?relay
        FUNCTION ??MT_ZdoSimpleDescRequest?relay,0203H
        PUBLIC ??MT_ZdoStartupFromApp?relay
        FUNCTION ??MT_ZdoStartupFromApp?relay,0203H
        PUBLIC ??MT_ZdoUnbindRequest?relay
        FUNCTION ??MT_ZdoUnbindRequest?relay,0203H
        PUBLIC ??MT_ZdoUserDescRequest?relay
        FUNCTION ??MT_ZdoUserDescRequest?relay,0203H
        PUBLIC ??MT_ZdoUserDescSet?relay
        FUNCTION ??MT_ZdoUserDescSet?relay,0203H
        PUBLIC MT_ZdoActiveEpRequest
        FUNCTION MT_ZdoActiveEpRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoBeaconIndCB
        FUNCTION MT_ZdoBeaconIndCB,021603H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC MT_ZdoBindRequest
        FUNCTION MT_ZdoBindRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC MT_ZdoCommandProcessing
        FUNCTION MT_ZdoCommandProcessing,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_ZdoComplexDescRequest
        FUNCTION MT_ZdoComplexDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoEndDevAnnce
        FUNCTION MT_ZdoEndDevAnnce,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC MT_ZdoEndDevBindRequest
        FUNCTION MT_ZdoEndDevBindRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 95, STACK
        PUBLIC MT_ZdoIEEEAddrRequest
        FUNCTION MT_ZdoIEEEAddrRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoInit
        FUNCTION MT_ZdoInit,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MT_ZdoJoinCnfCB
        FUNCTION MT_ZdoJoinCnfCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC MT_ZdoJoinReq
        FUNCTION MT_ZdoJoinReq,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC MT_ZdoMatchDescRequest
        FUNCTION MT_ZdoMatchDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 97, STACK
        PUBLIC MT_ZdoNWKAddressRequest
        FUNCTION MT_ZdoNWKAddressRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoNetworkDiscoveryReq
        FUNCTION MT_ZdoNetworkDiscoveryReq,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoNodeDescRequest
        FUNCTION MT_ZdoNodeDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoNwkDiscoveryCnfCB
        FUNCTION MT_ZdoNwkDiscoveryCnfCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_ZdoPowerDescRequest
        FUNCTION MT_ZdoPowerDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoRegisterForZDOMsg
        FUNCTION MT_ZdoRegisterForZDOMsg,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoRemoveRegisteredCB
        FUNCTION MT_ZdoRemoveRegisteredCB,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoSendMsgCB
        FUNCTION MT_ZdoSendMsgCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC MT_ZdoServiceDiscRequest
        FUNCTION MT_ZdoServiceDiscRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoSimpleDescRequest
        FUNCTION MT_ZdoSimpleDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoStartupFromApp
        FUNCTION MT_ZdoStartupFromApp,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_ZdoUnbindRequest
        FUNCTION MT_ZdoUnbindRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC MT_ZdoUserDescRequest
        FUNCTION MT_ZdoUserDescRequest,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_ZdoUserDescSet
        FUNCTION MT_ZdoUserDescSet,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 42, STACK
        PUBLIC _zdoCallbackSub
        PUBLIC pBeaconIndBuf
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
??MT_BuildAndSendZToolResponse?relay SYMBOL "?relay", MT_BuildAndSendZToolResponse
ZDApp_JoinReq       SYMBOL "ZDApp_JoinReq"
??ZDApp_JoinReq?relay SYMBOL "?relay", ZDApp_JoinReq
ZDApp_NetworkDiscoveryReq SYMBOL "ZDApp_NetworkDiscoveryReq"
??ZDApp_NetworkDiscoveryReq?relay SYMBOL "?relay", ZDApp_NetworkDiscoveryReq
ZDOInitDevice       SYMBOL "ZDOInitDevice"
??ZDOInitDevice?relay SYMBOL "?relay", ZDOInitDevice
ZDO_DeregisterForZdoCB SYMBOL "ZDO_DeregisterForZdoCB"
??ZDO_DeregisterForZdoCB?relay SYMBOL "?relay", ZDO_DeregisterForZdoCB
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
??ZDO_RegisterForZdoCB?relay SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_RemoveRegisteredCB SYMBOL "ZDO_RemoveRegisteredCB"
??ZDO_RemoveRegisteredCB?relay SYMBOL "?relay", ZDO_RemoveRegisteredCB
ZDP_BindUnbindReq   SYMBOL "ZDP_BindUnbindReq"
??ZDP_BindUnbindReq?relay SYMBOL "?relay", ZDP_BindUnbindReq
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
??ZDP_DeviceAnnce?relay SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
??ZDP_IEEEAddrReq?relay SYMBOL "?relay", ZDP_IEEEAddrReq
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
??ZDP_NWKAddrOfInterestReq?relay SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
??ZDP_NwkAddrReq?relay SYMBOL "?relay", ZDP_NwkAddrReq
ZDP_ServerDiscReq   SYMBOL "ZDP_ServerDiscReq"
??ZDP_ServerDiscReq?relay SYMBOL "?relay", ZDP_ServerDiscReq
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
??ZDP_SimpleDescReq?relay SYMBOL "?relay", ZDP_SimpleDescReq
ZDP_UserDescSet     SYMBOL "ZDP_UserDescSet"
??ZDP_UserDescSet?relay SYMBOL "?relay", ZDP_UserDescSet
osal_build_uint32   SYMBOL "osal_build_uint32"
??osal_build_uint32?relay SYMBOL "?relay", osal_build_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
sAddrExtCpy         SYMBOL "sAddrExtCpy"
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
MT_ZdoActiveEpRequest SYMBOL "MT_ZdoActiveEpRequest"
??MT_ZdoActiveEpRequest?relay SYMBOL "?relay", MT_ZdoActiveEpRequest
MT_ZdoBeaconIndCB   SYMBOL "MT_ZdoBeaconIndCB"
??MT_ZdoBeaconIndCB?relay SYMBOL "?relay", MT_ZdoBeaconIndCB
MT_ZdoBindRequest   SYMBOL "MT_ZdoBindRequest"
??MT_ZdoBindRequest?relay SYMBOL "?relay", MT_ZdoBindRequest
MT_ZdoCommandProcessing SYMBOL "MT_ZdoCommandProcessing"
??MT_ZdoCommandProcessing?relay SYMBOL "?relay", MT_ZdoCommandProcessing
MT_ZdoComplexDescRequest SYMBOL "MT_ZdoComplexDescRequest"
??MT_ZdoComplexDescRequest?relay SYMBOL "?relay", MT_ZdoComplexDescRequest
MT_ZdoEndDevAnnce   SYMBOL "MT_ZdoEndDevAnnce"
??MT_ZdoEndDevAnnce?relay SYMBOL "?relay", MT_ZdoEndDevAnnce
MT_ZdoEndDevBindRequest SYMBOL "MT_ZdoEndDevBindRequest"
??MT_ZdoEndDevBindRequest?relay SYMBOL "?relay", MT_ZdoEndDevBindRequest
MT_ZdoIEEEAddrRequest SYMBOL "MT_ZdoIEEEAddrRequest"
??MT_ZdoIEEEAddrRequest?relay SYMBOL "?relay", MT_ZdoIEEEAddrRequest
MT_ZdoInit          SYMBOL "MT_ZdoInit"
??MT_ZdoInit?relay  SYMBOL "?relay", MT_ZdoInit
MT_ZdoJoinCnfCB     SYMBOL "MT_ZdoJoinCnfCB"
??MT_ZdoJoinCnfCB?relay SYMBOL "?relay", MT_ZdoJoinCnfCB
MT_ZdoJoinReq       SYMBOL "MT_ZdoJoinReq"
??MT_ZdoJoinReq?relay SYMBOL "?relay", MT_ZdoJoinReq
MT_ZdoMatchDescRequest SYMBOL "MT_ZdoMatchDescRequest"
??MT_ZdoMatchDescRequest?relay SYMBOL "?relay", MT_ZdoMatchDescRequest
MT_ZdoNWKAddressRequest SYMBOL "MT_ZdoNWKAddressRequest"
??MT_ZdoNWKAddressRequest?relay SYMBOL "?relay", MT_ZdoNWKAddressRequest
MT_ZdoNetworkDiscoveryReq SYMBOL "MT_ZdoNetworkDiscoveryReq"
??MT_ZdoNetworkDiscoveryReq?relay SYMBOL "?relay", MT_ZdoNetworkDiscoveryReq
MT_ZdoNodeDescRequest SYMBOL "MT_ZdoNodeDescRequest"
??MT_ZdoNodeDescRequest?relay SYMBOL "?relay", MT_ZdoNodeDescRequest
MT_ZdoNwkDiscoveryCnfCB SYMBOL "MT_ZdoNwkDiscoveryCnfCB"
??MT_ZdoNwkDiscoveryCnfCB?relay SYMBOL "?relay", MT_ZdoNwkDiscoveryCnfCB
MT_ZdoPowerDescRequest SYMBOL "MT_ZdoPowerDescRequest"
??MT_ZdoPowerDescRequest?relay SYMBOL "?relay", MT_ZdoPowerDescRequest
MT_ZdoRegisterForZDOMsg SYMBOL "MT_ZdoRegisterForZDOMsg"
??MT_ZdoRegisterForZDOMsg?relay SYMBOL "?relay", MT_ZdoRegisterForZDOMsg
MT_ZdoRemoveRegisteredCB SYMBOL "MT_ZdoRemoveRegisteredCB"
??MT_ZdoRemoveRegisteredCB?relay SYMBOL "?relay", MT_ZdoRemoveRegisteredCB
MT_ZdoSendMsgCB     SYMBOL "MT_ZdoSendMsgCB"
??MT_ZdoSendMsgCB?relay SYMBOL "?relay", MT_ZdoSendMsgCB
MT_ZdoServiceDiscRequest SYMBOL "MT_ZdoServiceDiscRequest"
??MT_ZdoServiceDiscRequest?relay SYMBOL "?relay", MT_ZdoServiceDiscRequest
MT_ZdoSimpleDescRequest SYMBOL "MT_ZdoSimpleDescRequest"
??MT_ZdoSimpleDescRequest?relay SYMBOL "?relay", MT_ZdoSimpleDescRequest
MT_ZdoStartupFromApp SYMBOL "MT_ZdoStartupFromApp"
??MT_ZdoStartupFromApp?relay SYMBOL "?relay", MT_ZdoStartupFromApp
MT_ZdoUnbindRequest SYMBOL "MT_ZdoUnbindRequest"
??MT_ZdoUnbindRequest?relay SYMBOL "?relay", MT_ZdoUnbindRequest
MT_ZdoUserDescRequest SYMBOL "MT_ZdoUserDescRequest"
??MT_ZdoUserDescRequest?relay SYMBOL "?relay", MT_ZdoUserDescRequest
MT_ZdoUserDescSet   SYMBOL "MT_ZdoUserDescSet"
??MT_ZdoUserDescSet?relay SYMBOL "?relay", MT_ZdoUserDescSet

        EXTERN ??MT_BuildAndSendZToolResponse?relay
        FUNCTION ??MT_BuildAndSendZToolResponse?relay,00H
        EXTERN ??ZDApp_JoinReq?relay
        FUNCTION ??ZDApp_JoinReq?relay,00H
        EXTERN ??ZDApp_NetworkDiscoveryReq?relay
        FUNCTION ??ZDApp_NetworkDiscoveryReq?relay,00H
        EXTERN ??ZDOInitDevice?relay
        FUNCTION ??ZDOInitDevice?relay,00H
        EXTERN ??ZDO_DeregisterForZdoCB?relay
        FUNCTION ??ZDO_DeregisterForZdoCB?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDO_RegisterForZdoCB?relay
        FUNCTION ??ZDO_RegisterForZdoCB?relay,00H
        EXTERN ??ZDO_RemoveRegisteredCB?relay
        FUNCTION ??ZDO_RemoveRegisteredCB?relay,00H
        EXTERN ??ZDP_BindUnbindReq?relay
        FUNCTION ??ZDP_BindUnbindReq?relay,00H
        EXTERN ??ZDP_DeviceAnnce?relay
        FUNCTION ??ZDP_DeviceAnnce?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??ZDP_IEEEAddrReq?relay
        FUNCTION ??ZDP_IEEEAddrReq?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??ZDP_NWKAddrOfInterestReq?relay
        FUNCTION ??ZDP_NWKAddrOfInterestReq?relay,00H
        EXTERN ??ZDP_NwkAddrReq?relay
        FUNCTION ??ZDP_NwkAddrReq?relay,00H
        EXTERN ??ZDP_ServerDiscReq?relay
        FUNCTION ??ZDP_ServerDiscReq?relay,00H
        EXTERN ??ZDP_SimpleDescReq?relay
        FUNCTION ??ZDP_SimpleDescReq?relay,00H
        EXTERN ??ZDP_UserDescSet?relay
        FUNCTION ??ZDP_UserDescSet?relay,00H
        EXTERN ??osal_build_uint32?relay
        FUNCTION ??osal_build_uint32?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_TaskID
        EXTERN ZDApp_JoinReq
        FUNCTION ZDApp_JoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NetworkDiscoveryReq
        FUNCTION ZDApp_NetworkDiscoveryReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDOInitDevice
        FUNCTION ZDOInitDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_DeregisterForZdoCB
        FUNCTION ZDO_DeregisterForZdoCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RemoveRegisteredCB
        FUNCTION ZDO_RemoveRegisteredCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 95, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_ServerDiscReq
        FUNCTION ZDP_ServerDiscReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_UserDescSet
        FUNCTION ZDP_UserDescSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Components\mt\MT_ZDO.c
//    1 /**************************************************************************************************
//    2   Filename:       MT_ZDO.c
//    3   Revised:        $Date: 2012-02-16 16:04:32 -0800 (Thu, 16 Feb 2012) $
//    4   Revision:       $Revision: 29348 $
//    5 
//    6   Description:    MonitorTest functions for the ZDO layer.
//    7 
//    8 
//    9   Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef MT_ZDO_FUNC
//   41 
//   42 /**************************************************************************************************
//   43  * INCLUDES
//   44  **************************************************************************************************/
//   45 #include "ZComDef.h"
//   46 #include "OSAL.h"
//   47 #include "OSAL_Nv.h"
//   48 #include "MT.h"
//   49 #include "MT_ZDO.h"
//   50 #include "APSMEDE.h"
//   51 #include "ZDConfig.h"
//   52 #include "ZDProfile.h"
//   53 #include "ZDObject.h"
//   54 #include "ZDApp.h"
//   55 
//   56 #if !defined( WIN32 )
//   57   #include "OnBoard.h"
//   58 #endif
//   59 
//   60 #if defined ( MT_SYS_KEY_MANAGEMENT )
//   61   #include "ZDSecMgr.h"
//   62 #endif
//   63 
//   64 #include "nwk_util.h"
//   65 
//   66 /**************************************************************************************************
//   67  * CONSTANTS
//   68  **************************************************************************************************/
//   69 #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
//   70 #define MT_ZDO_ADDR_RSP_LEN               0x0D
//   71 #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
//   72 #define MT_ZDO_BEACON_IND_LEN             21
//   73 #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
//   74 #define MT_ZDO_JOIN_CNF_LEN               5
//   75 
//   76 // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
//   77 // sizeof(zdoConcentratorInd_t) is not usable.
//   78 #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
//   79 
//   80 #define MTZDO_RESPONSE_BUFFER_LEN   100
//   81 
//   82 #define MTZDO_MAX_MATCH_CLUSTERS    16
//   83 #define MTZDO_MAX_ED_BIND_CLUSTERS  15
//   84 
//   85 // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
//   86 #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
//   87 
//   88 #define MT_ZDO_STATUS_LEN   1
//   89 
//   90 /**************************************************************************************************
//   91  * GLOBAL VARIABLES
//   92  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   93 uint32 _zdoCallbackSub;
_zdoCallbackSub:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   94 uint8 *pBeaconIndBuf = NULL;
pBeaconIndBuf:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   95 
//   96 /**************************************************************************************************
//   97  * LOCAL VARIABLES
//   98  **************************************************************************************************/
//   99 
//  100 /**************************************************************************************************
//  101  * LOCAL FUNCTIONS
//  102  **************************************************************************************************/
//  103 #if defined (MT_ZDO_FUNC)
//  104 void MT_ZdoNWKAddressRequest(uint8 *pBuf);
//  105 void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
//  106 void MT_ZdoNodeDescRequest(uint8 *pBuf);
//  107 void MT_ZdoPowerDescRequest(uint8 *pBuf);
//  108 void MT_ZdoSimpleDescRequest(uint8 *pBuf);
//  109 void MT_ZdoActiveEpRequest(uint8 *pBuf);
//  110 void MT_ZdoMatchDescRequest(uint8 *pBuf);
//  111 void MT_ZdoComplexDescRequest(uint8 *pBuf);
//  112 void MT_ZdoUserDescRequest(uint8 *pBuf);
//  113 void MT_ZdoEndDevAnnce(uint8 *pBuf);
//  114 void MT_ZdoUserDescSet(uint8 *pBuf);
//  115 void MT_ZdoServiceDiscRequest(uint8 *pBuf);
//  116 void MT_ZdoEndDevBindRequest(uint8 *pBuf);
//  117 void MT_ZdoBindRequest(uint8 *pBuf);
//  118 void MT_ZdoUnbindRequest(uint8 *pBuf);
//  119 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
//  120 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  121 void MT_ZdoSetLinkKey(uint8 *pBuf);
//  122 void MT_ZdoRemoveLinkKey(uint8 *pBuf);
//  123 void MT_ZdoGetLinkKey(uint8 *pBuf);
//  124 #endif /* MT_SYS_KEY_MANAGEMENT */
//  125 void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
//  126 void MT_ZdoJoinReq(uint8 *pBuf);
//  127 /* Call back function */
//  128 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
//  129 void *MT_ZdoBeaconIndCB ( void *pStr );
//  130 void *MT_ZdoJoinCnfCB ( void *pStr );
//  131 #if defined (MT_ZDO_MGMT)
//  132 void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
//  133 void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
//  134 void MT_ZdoMgmtBindRequest(uint8 *pBuf);
//  135 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
//  136 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
//  137 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
//  138 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
//  139 #endif /* MT_ZDO_MGMT */
//  140 void MT_ZdoStartupFromApp(uint8 *pBuf);
//  141 void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
//  142 void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
//  143 #endif /* MT_ZDO_FUNC */
//  144 
//  145 #if defined (MT_ZDO_CB_FUNC)
//  146 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
//  147 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
//  148 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
//  149 void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
//  150 void* MT_ZdoSrcRtgCB( void *pStr );
//  151 static void *MT_ZdoConcentratorIndCB(void *pStr);
//  152 static void *MT_ZdoLeaveInd(void *vPtr);
//  153 #endif /* MT_ZDO_CB_FUNC */
//  154 
//  155 #if defined (MT_ZDO_FUNC)
//  156 /***************************************************************************************************
//  157  * @fn      MT_ZdoInit
//  158  *
//  159  * @brief   MT ZDO initialization
//  160  *
//  161  * @param   none
//  162  *
//  163  * @return  none
//  164  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  165 void MT_ZdoInit(void)
MT_ZdoInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_ZdoInit
        CODE
//  166 {
        ; Saved register size: 0
        ; Auto size: 0
//  167 #ifdef MT_ZDO_CB_FUNC
//  168   /* Register with ZDO for indication callbacks */
//  169   ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
//  170   ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
//  171   ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
//  172 #endif
//  173 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock0
//  174 
//  175 /***************************************************************************************************
//  176  * @fn      MT_ZdoCommandProcessing
//  177  *
//  178  * @brief
//  179  *
//  180  *   Process all the ZDO commands that are issued by test tool
//  181  *
//  182  * @param   pBuf - pointer to the msg buffer
//  183  *
//  184  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  185  *          |  1   |   1   |   1   |  0-255 |
//  186  *
//  187  * @return  status
//  188  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  189 uint8 MT_ZdoCommandProcessing(uint8* pBuf)
MT_ZdoCommandProcessing:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
        CODE
//  190 {
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNWKAddressRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoIEEEAddrRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNodeDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoPowerDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoSimpleDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoActiveEpRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoMatchDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoComplexDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUserDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoEndDevAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUserDescSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoServiceDiscRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoEndDevBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUnbindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNetworkDiscoveryReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoStartupFromApp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoRegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoRemoveRegisteredCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  191   uint8 status = MT_RPC_SUCCESS;
        MOV     R6,#0x0
//  192 
//  193   switch (pBuf[MT_RPC_POS_CMD1])
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??MT_ZdoCommandProcessing_0
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_1
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_2
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_3
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_4
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_5
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_6
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_7
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_8
        ADD     A,#-0x2
        JZ      ??MT_ZdoCommandProcessing_9
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_10
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_11
        ADD     A,#-0x14
        JZ      ??MT_ZdoCommandProcessing_12
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_13
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_14
        ADD     A,#-0x4
        JZ      ??MT_ZdoCommandProcessing_15
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_16
        ADD     A,#-0x17
        JZ      ??MT_ZdoCommandProcessing_17
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_18
        DEC     A
        JZ      ??MT_ZdoCommandProcessing_19
        SJMP    ??MT_ZdoCommandProcessing_20
//  194   {
//  195 #if defined ( ZDO_NWKADDR_REQUEST )
//  196     case MT_ZDO_NWK_ADDR_REQ:
//  197       MT_ZdoNWKAddressRequest(pBuf);
??MT_ZdoCommandProcessing_0:
        ; Setup parameters for call to function MT_ZdoNWKAddressRequest
        LCALL   ??MT_ZdoNWKAddressRequest?relay
//  198       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  199 #endif
//  200 
//  201 #if defined ( ZDO_IEEEADDR_REQUEST )
//  202     case MT_ZDO_IEEE_ADDR_REQ:
//  203       MT_ZdoIEEEAddrRequest(pBuf);
??MT_ZdoCommandProcessing_1:
        ; Setup parameters for call to function MT_ZdoIEEEAddrRequest
        LCALL   ??MT_ZdoIEEEAddrRequest?relay
//  204       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  205 #endif
//  206 
//  207 #if defined ( ZDO_NODEDESC_REQUEST )
//  208     case MT_ZDO_NODE_DESC_REQ:
//  209       MT_ZdoNodeDescRequest(pBuf);
??MT_ZdoCommandProcessing_2:
        ; Setup parameters for call to function MT_ZdoNodeDescRequest
        LCALL   ??MT_ZdoNodeDescRequest?relay
//  210       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  211 #endif
//  212 
//  213 #if defined ( ZDO_POWERDESC_REQUEST )
//  214     case MT_ZDO_POWER_DESC_REQ:
//  215       MT_ZdoPowerDescRequest(pBuf);
??MT_ZdoCommandProcessing_3:
        ; Setup parameters for call to function MT_ZdoPowerDescRequest
        LCALL   ??MT_ZdoPowerDescRequest?relay
//  216       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  217 #endif
//  218 
//  219 #if defined ( ZDO_SIMPLEDESC_REQUEST )
//  220     case MT_ZDO_SIMPLE_DESC_REQ:
//  221       MT_ZdoSimpleDescRequest(pBuf);
??MT_ZdoCommandProcessing_4:
        ; Setup parameters for call to function MT_ZdoSimpleDescRequest
        LCALL   ??MT_ZdoSimpleDescRequest?relay
//  222       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  223 #endif
//  224 
//  225 #if defined ( ZDO_ACTIVEEP_REQUEST )
//  226     case MT_ZDO_ACTIVE_EP_REQ:
//  227       MT_ZdoActiveEpRequest(pBuf);
??MT_ZdoCommandProcessing_5:
        ; Setup parameters for call to function MT_ZdoActiveEpRequest
        LCALL   ??MT_ZdoActiveEpRequest?relay
//  228       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  229 #endif
//  230 
//  231 #if defined ( ZDO_MATCH_REQUEST )
//  232     case MT_ZDO_MATCH_DESC_REQ:
//  233       MT_ZdoMatchDescRequest(pBuf);
??MT_ZdoCommandProcessing_6:
        ; Setup parameters for call to function MT_ZdoMatchDescRequest
        LCALL   ??MT_ZdoMatchDescRequest?relay
//  234       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  235 #endif
//  236 
//  237 #if defined ( ZDO_COMPLEXDESC_REQUEST )
//  238     case MT_ZDO_COMPLEX_DESC_REQ:
//  239       MT_ZdoComplexDescRequest(pBuf);
??MT_ZdoCommandProcessing_7:
        ; Setup parameters for call to function MT_ZdoComplexDescRequest
        LCALL   ??MT_ZdoComplexDescRequest?relay
//  240       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  241 #endif
//  242 
//  243 #if defined ( ZDO_USERDESC_REQUEST )
//  244     case MT_ZDO_USER_DESC_REQ:
//  245       MT_ZdoUserDescRequest(pBuf);
??MT_ZdoCommandProcessing_8:
        ; Setup parameters for call to function MT_ZdoUserDescRequest
        LCALL   ??MT_ZdoUserDescRequest?relay
//  246       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  247 #endif
//  248 
//  249 #if defined ( ZDO_ENDDEVICE_ANNCE )
//  250     case MT_ZDO_END_DEV_ANNCE:
//  251       MT_ZdoEndDevAnnce(pBuf);
??MT_ZdoCommandProcessing_9:
        ; Setup parameters for call to function MT_ZdoEndDevAnnce
        LCALL   ??MT_ZdoEndDevAnnce?relay
//  252       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  253 #endif
//  254 
//  255 #if defined ( ZDO_USERDESCSET_REQUEST )
//  256     case MT_ZDO_USER_DESC_SET:
//  257       MT_ZdoUserDescSet(pBuf);
??MT_ZdoCommandProcessing_10:
        ; Setup parameters for call to function MT_ZdoUserDescSet
        LCALL   ??MT_ZdoUserDescSet?relay
//  258       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  259 #endif
//  260 
//  261 #if defined ( ZDO_SERVERDISC_REQUEST )
//  262     case MT_ZDO_SERVICE_DISC_REQ:
//  263       MT_ZdoServiceDiscRequest(pBuf);
??MT_ZdoCommandProcessing_11:
        ; Setup parameters for call to function MT_ZdoServiceDiscRequest
        LCALL   ??MT_ZdoServiceDiscRequest?relay
//  264       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  265 #endif
//  266 
//  267 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
//  268     case MT_ZDO_END_DEV_BIND_REQ:
//  269       MT_ZdoEndDevBindRequest(pBuf);
??MT_ZdoCommandProcessing_12:
        ; Setup parameters for call to function MT_ZdoEndDevBindRequest
        LCALL   ??MT_ZdoEndDevBindRequest?relay
//  270       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  271 #endif
//  272 
//  273 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  274     case MT_ZDO_BIND_REQ:
//  275       MT_ZdoBindRequest(pBuf);
??MT_ZdoCommandProcessing_13:
        ; Setup parameters for call to function MT_ZdoBindRequest
        LCALL   ??MT_ZdoBindRequest?relay
//  276       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  277 #endif
//  278 
//  279 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  280     case MT_ZDO_UNBIND_REQ:
//  281       MT_ZdoUnbindRequest(pBuf);
??MT_ZdoCommandProcessing_14:
        ; Setup parameters for call to function MT_ZdoUnbindRequest
        LCALL   ??MT_ZdoUnbindRequest?relay
//  282       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  283 #endif
//  284 
//  285 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  286     case MT_ZDO_SET_LINK_KEY:
//  287       MT_ZdoSetLinkKey(pBuf);
//  288       break;
//  289 
//  290     case MT_ZDO_REMOVE_LINK_KEY:
//  291       MT_ZdoRemoveLinkKey(pBuf);
//  292       break;
//  293 
//  294     case MT_ZDO_GET_LINK_KEY:
//  295       MT_ZdoGetLinkKey(pBuf);
//  296       break;
//  297 #endif // MT_SYS_KEY_MANAGEMENT
//  298 
//  299 #if defined ( ZDO_MANUAL_JOIN )
//  300     case MT_ZDO_NWK_DISCOVERY_REQ:
//  301       MT_ZdoNetworkDiscoveryReq(pBuf);
??MT_ZdoCommandProcessing_15:
        ; Setup parameters for call to function MT_ZdoNetworkDiscoveryReq
        LCALL   ??MT_ZdoNetworkDiscoveryReq?relay
//  302       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  303 
//  304     case MT_ZDO_JOIN_REQ:
//  305       MT_ZdoJoinReq(pBuf);
??MT_ZdoCommandProcessing_16:
        ; Setup parameters for call to function MT_ZdoJoinReq
        LCALL   ??MT_ZdoJoinReq?relay
//  306       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  307 #endif
//  308 
//  309 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
//  310     case MT_ZDO_MGMT_NWKDISC_REQ:
//  311       MT_ZdoMgmtNwkDiscRequest(pBuf);
//  312       break;
//  313 #endif
//  314 
//  315 #if defined ( ZDO_MGMT_LQI_REQUEST )
//  316     case MT_ZDO_MGMT_LQI_REQ:
//  317       MT_ZdoMgmtLqiRequest(pBuf);
//  318       break;
//  319 #endif
//  320 
//  321 #if defined ( ZDO_MGMT_RTG_REQUEST )
//  322     case MT_ZDO_MGMT_RTG_REQ:
//  323       MT_ZdoMgmtRtgRequest(pBuf);
//  324       break;
//  325 #endif
//  326 
//  327 #if defined ( ZDO_MGMT_BIND_REQUEST )
//  328     case MT_ZDO_MGMT_BIND_REQ:
//  329       MT_ZdoMgmtBindRequest(pBuf);
//  330       break;
//  331 #endif
//  332 
//  333 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
//  334     case MT_ZDO_MGMT_LEAVE_REQ:
//  335       MT_ZdoMgmtLeaveRequest(pBuf);
//  336       break;
//  337 #endif
//  338 
//  339 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
//  340     case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
//  341       MT_ZdoMgmtDirectJoinRequest(pBuf);
//  342       break;
//  343 #endif
//  344 
//  345 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
//  346     case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
//  347       MT_ZdoMgmtPermitJoinRequest(pBuf);
//  348       break;
//  349 #endif
//  350 
//  351 #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
//  352     case MT_ZDO_MGMT_NWK_UPDATE_REQ:
//  353       MT_ZdoMgmtNwkUpdateRequest(pBuf);
//  354       break;
//  355 #endif
//  356 
//  357 #if defined ( ZDO_NETWORKSTART_REQUEST )
//  358     case MT_ZDO_STARTUP_FROM_APP:
//  359       MT_ZdoStartupFromApp(pBuf);
??MT_ZdoCommandProcessing_19:
        ; Setup parameters for call to function MT_ZdoStartupFromApp
        LCALL   ??MT_ZdoStartupFromApp?relay
//  360       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  361 #endif
//  362 
//  363     case MT_ZDO_MSG_CB_REGISTER:
//  364       MT_ZdoRegisterForZDOMsg(pBuf);
??MT_ZdoCommandProcessing_17:
        ; Setup parameters for call to function MT_ZdoRegisterForZDOMsg
        LCALL   ??MT_ZdoRegisterForZDOMsg?relay
//  365       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  366 
//  367     case MT_ZDO_MSG_CB_REMOVE:
//  368       MT_ZdoRemoveRegisteredCB(pBuf);
??MT_ZdoCommandProcessing_18:
        ; Setup parameters for call to function MT_ZdoRemoveRegisteredCB
        LCALL   ??MT_ZdoRemoveRegisteredCB?relay
//  369       break;
        SJMP    ??MT_ZdoCommandProcessing_21
//  370 
//  371     default:
//  372       status = MT_RPC_ERR_COMMAND_ID;
??MT_ZdoCommandProcessing_20:
        INC     R6
        INC     R6
//  373       break;
//  374   }
//  375 
//  376   return status;
??MT_ZdoCommandProcessing_21:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine72_0 & 0xFFFF
          CFI EndBlock cfiBlock1
//  377 }
//  378 
//  379 /***************************************************************************************************
//  380  * @fn      MT_ZdoNwkAddrReq
//  381  *
//  382  * @brief   Handle a nwk address request.
//  383  *
//  384  * @param   pData  - MT message data
//  385  *
//  386  * @return  void
//  387  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  388 void MT_ZdoNWKAddressRequest(uint8 *pBuf)
MT_ZdoNWKAddressRequest:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
        CODE
//  389 {
        FUNCALL MT_ZdoNWKAddressRequest, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNWKAddressRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  390   uint8 cmdId;
//  391   uint8 retValue;
//  392   uint8 reqType;
//  393   uint8 startIndex;
//  394   uint8 *pExtAddr;
//  395 
//  396   /* parse header */
//  397   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
//  398   pBuf += MT_RPC_FRAME_HDR_SZ;
//  399 
//  400   /* parse parameters */
//  401   pExtAddr = pBuf;
        MOV     A,R2
        ADD     A,#0x3
        MOV     R6,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R7,A
//  402   pBuf += Z_EXTADDR_LEN;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R2,A
        MOV     A,R7
        LCALL   ?Subroutine24 & 0xFFFF
//  403 
//  404   /* Request type */
//  405   reqType = *pBuf++;
//  406 
//  407   /* Start index */
//  408   startIndex = *pBuf;
//  409 
//  410   retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
??CrossCallReturnLabel_35:
        LCALL   ??ZDP_NwkAddrReq?relay
          CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
//  411 
//  412   /* Build and send back the response */
//  413   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  414 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_59:
        SJMP    ??Subroutine63_0
          CFI EndBlock cfiBlock3
//  415 
//  416 /***************************************************************************************************
//  417  * @fn      MT_ZdoIEEEAddrRequest
//  418  *
//  419  * @brief   Handle a IEEE address request.
//  420  *
//  421  * @param   pData  - MT message data
//  422  *
//  423  * @return  void
//  424  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  425 void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
MT_ZdoIEEEAddrRequest:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function MT_ZdoIEEEAddrRequest
        CODE
//  426 {
        FUNCALL MT_ZdoIEEEAddrRequest, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoIEEEAddrRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  427   uint8 cmdId;
//  428   uint8 retValue;
//  429   uint16 shortAddr;
//  430   uint8 reqType;
//  431   uint8 startIndex;
//  432 
//  433   /* parse header */
//  434   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
//  435   pBuf += MT_RPC_FRAME_HDR_SZ;
        LCALL   ?Subroutine31 & 0xFFFF
//  436 
//  437   /* Dev address */
//  438   shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
??CrossCallReturnLabel_53:
        LCALL   ??Subroutine74_0 & 0xFFFF
??CrossCallReturnLabel_119:
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  439   pBuf += 2;
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R3
        LCALL   ?Subroutine24 & 0xFFFF
//  440 
//  441   /* request type */
//  442   reqType = *pBuf++;
//  443 
//  444   /* start index */
//  445   startIndex = *pBuf;
//  446 
//  447   retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
??CrossCallReturnLabel_36:
        LCALL   ??ZDP_IEEEAddrReq?relay
        SJMP    ?Subroutine5
          CFI EndBlock cfiBlock4
//  448 
//  449   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  450 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function MT_ZdoIEEEAddrRequest
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+0
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        LCALL   ??Subroutine75_0 & 0xFFFF
??CrossCallReturnLabel_124:
        MOV     R1,A
        INC     DPTR
        ; Setup parameters for call to function ZDP_NwkAddrReq
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV     R5,#0x0
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine39 & 0xFFFF
          CFI EndBlock cfiBlock8
??CrossCallReturnLabel_111:
        REQUIRE ??Subroutine62_0
        ; // Fall through to label ??Subroutine62_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine62_0:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R2,A
          CFI EndBlock cfiBlock9
        REQUIRE ??Subroutine63_0
        ; // Fall through to label ??Subroutine63_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine63_0:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
          CFI EndBlock cfiBlock10
        REQUIRE ??Subroutine64_0
        ; // Fall through to label ??Subroutine64_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine64_0:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x1
        LJMP    ??Subroutine71_0 & 0xFFFF
          CFI EndBlock cfiBlock11
//  451 
//  452 /***************************************************************************************************
//  453  * @fn      MT_ZdoNodeDescRequest
//  454  *
//  455  * @brief   Handle a Node Descriptor request.
//  456  *
//  457  * @param   pData  - MT message data
//  458  *
//  459  * @return  void
//  460  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  461 void MT_ZdoNodeDescRequest (uint8 *pBuf)
MT_ZdoNodeDescRequest:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
        CODE
//  462 {
        FUNCALL MT_ZdoNodeDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNodeDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  463   uint8 cmdId;
//  464   uint8 retValue;
//  465   zAddrType_t destAddr;
//  466   uint16 shortAddr;
//  467 
//  468   /* parse header */
//  469   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine68_0 & 0xFFFF
//  470   pBuf += MT_RPC_FRAME_HDR_SZ;
//  471 
//  472   /* Destination address */
//  473   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_99:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  474   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_0:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
//  475   pBuf += 2;
//  476 
//  477   /* Network address of interest */
//  478   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  479   pBuf += 2;
//  480 
//  481   retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_45:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x2
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     A,R1
        LJMP    ??Subroutine69_0 & 0xFFFF
          CFI EndBlock cfiBlock12
//  482 
//  483   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  484 }
//  485 
//  486 /***************************************************************************************************
//  487  * @fn      MT_ZdoPowerDescRequest
//  488  *
//  489  * @brief   Handle a Power Descriptor request.
//  490  *
//  491  * @param   pData  - MT message data
//  492  *
//  493  * @return  void
//  494  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  495 void MT_ZdoPowerDescRequest(uint8 *pBuf)
MT_ZdoPowerDescRequest:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function MT_ZdoPowerDescRequest
        CODE
//  496 {
        FUNCALL MT_ZdoPowerDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoPowerDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  497   uint8 cmdId;
//  498   uint8 retValue;
//  499   zAddrType_t destAddr;
//  500   uint16 shortAddr;
//  501 
//  502   /* parse header */
//  503   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine68_0 & 0xFFFF
//  504   pBuf += MT_RPC_FRAME_HDR_SZ;
//  505 
//  506   /* Dev address */
//  507   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_100:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  508   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_1:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
//  509   pBuf += 2;
//  510 
//  511   /* Network address of interest */
//  512   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  513   pBuf += 2;
//  514 
//  515   retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_46:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x3
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock13
//  516 
//  517   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  518 }
//  519 
//  520 /***************************************************************************************************
//  521  * @fn      MT_ZdoSimpleDescRequest
//  522  *
//  523  * @brief   Handle a Simple Descriptor request.
//  524  *
//  525  * @param   pBuf  - MT message data
//  526  *
//  527  * @return  void
//  528  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  529 void MT_ZdoSimpleDescRequest(uint8 *pBuf)
MT_ZdoSimpleDescRequest:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function MT_ZdoSimpleDescRequest
        CODE
//  530 {
        FUNCALL MT_ZdoSimpleDescRequest, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSimpleDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  531   uint8 cmdId;
//  532   uint8 retValue;
//  533   uint8 epInt;
//  534   zAddrType_t destAddr;
//  535   uint16 shortAddr;
//  536 
//  537   /* parse header */
//  538   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine68_0 & 0xFFFF
//  539   pBuf += MT_RPC_FRAME_HDR_SZ;
//  540 
//  541   /* Dev address */
//  542   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_101:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  543   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_2:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
//  544   pBuf += 2;
//  545 
//  546   /* Network address of interest */
//  547   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  548   pBuf += 2;
//  549 
//  550   /* endpoint/interface */
//  551   epInt = *pBuf++;
//  552 
//  553   retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
??CrossCallReturnLabel_47:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_SimpleDescReq?relay
        LJMP    ??Subroutine70_0 & 0xFFFF
          CFI EndBlock cfiBlock14
//  554 
//  555   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  556 }
//  557 
//  558 /***************************************************************************************************
//  559  * @fn      MT_ZdoActiveEpRequest
//  560  *
//  561  * @brief   Handle a Active EP request.
//  562  *
//  563  * @param   pBuf  - MT message data
//  564  *
//  565  * @return  void
//  566  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  567 void MT_ZdoActiveEpRequest(uint8 *pBuf)
MT_ZdoActiveEpRequest:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function MT_ZdoActiveEpRequest
        CODE
//  568 {
        FUNCALL MT_ZdoActiveEpRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoActiveEpRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  569   uint8 cmdId;
//  570   uint8 retValue;
//  571   zAddrType_t destAddr;
//  572   uint16 shortAddr;
//  573 
//  574   /* parse header */
//  575   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine68_0 & 0xFFFF
//  576   pBuf += MT_RPC_FRAME_HDR_SZ;
//  577 
//  578   /* Dev address */
//  579   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_102:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  580   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_3:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
//  581   pBuf += 2;
//  582 
//  583   /* Network address of interest */
//  584   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  585   pBuf += 2;
//  586 
//  587   retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_48:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x5
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock15
//  588 
//  589   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  590 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function MT_ZdoPowerDescRequest
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+0
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+0
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function MT_ZdoActiveEpRequest
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+0
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function MT_ZdoComplexDescRequest
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+0
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function MT_ZdoUserDescRequest
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+0
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_93:
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_SimpleDescReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine52:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
          CFI Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function MT_ZdoPowerDescRequest
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_46
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+0
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_47
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+0
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function MT_ZdoActiveEpRequest
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_48
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+0
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function MT_ZdoComplexDescRequest
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_49
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+0
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function MT_ZdoUserDescRequest
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_50
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+0
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function MT_ZdoMatchDescRequest
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_33
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+0
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_34
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+0
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31
        REQUIRE ??Subroutine65_0
        ; // Fall through to label ??Subroutine65_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine65_0:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function MT_ZdoMatchDescRequest
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_90
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+0
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_91
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+0
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_92
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+0
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function MT_ZdoNodeDescRequest
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_45
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+0
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function MT_ZdoPowerDescRequest
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_46
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+0
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_47
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+0
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function MT_ZdoActiveEpRequest
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_48
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+0
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function MT_ZdoComplexDescRequest
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_49
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+0
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function MT_ZdoUserDescRequest
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_50
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+0
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function MT_ZdoMatchDescRequest
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_33
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+0
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_34
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+0
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        MOVX    @DPTR,A
        MOV     A,R2
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44
        REQUIRE ??Subroutine66_0
        ; // Fall through to label ??Subroutine66_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine66_0:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_96
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function MT_ZdoMatchDescRequest
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_89
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+0
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function MT_ZdoMatchDescRequest
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_90
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+0
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_91
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+0
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_95, ??CrossCallReturnLabel_92
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+0
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function MT_ZdoNodeDescRequest
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_45
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+0
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function MT_ZdoPowerDescRequest
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_46
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+0
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_47
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+0
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function MT_ZdoActiveEpRequest
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_48
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+0
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function MT_ZdoComplexDescRequest
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_49
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+0
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function MT_ZdoUserDescRequest
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_50
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+0
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function MT_ZdoMatchDescRequest
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_33
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+0
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_94, ??CrossCallReturnLabel_34
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+0
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58
//  591 
//  592 /***************************************************************************************************
//  593  * @fn      MT_ZdoMatchDescRequest
//  594  *
//  595  * @brief   Handle a Match Descriptor request.
//  596  *
//  597  * @param   pBuf  - MT message data
//  598  *
//  599  * @return  void
//  600  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  601 void MT_ZdoMatchDescRequest(uint8 *pBuf)
MT_ZdoMatchDescRequest:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
        CODE
//  602 {
        FUNCALL MT_ZdoMatchDescRequest, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 97, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 97, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 74
        MOV     A,#-0x4a
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 89)
//  603   uint8 cmdId;
//  604   uint8 retValue = 0;
        LCALL   ?Subroutine6 & 0xFFFF
//  605   uint8 i, numInClusters, numOutClusters;
//  606   uint16 profileId;
//  607   zAddrType_t destAddr;
//  608   uint16 shortAddr;
//  609   uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
//  610 
//  611   /* parse header */
//  612   cmdId = pBuf[MT_RPC_POS_CMD1];
//  613   pBuf += MT_RPC_FRAME_HDR_SZ;
//  614 
//  615   /* Dev address */
//  616   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_97:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  617   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_4:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
//  618   pBuf += 2;
//  619 
//  620   /* Network address of interest */
//  621   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  622   pBuf += 2;
??CrossCallReturnLabel_33:
        LCALL   ??Subroutine66_0 & 0xFFFF
//  623 
//  624   /* Profile ID */
//  625   profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_96:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine11 & 0xFFFF
//  626   pBuf += 2;
//  627 
//  628   /* NumInClusters */
//  629   numInClusters = *pBuf++;
??CrossCallReturnLabel_13:
        MOV     R7,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  630   if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
        CLR     C
        SUBB    A,#0x11
        JNC     ??MT_ZdoMatchDescRequest_0
//  631   {
//  632     /* IN clusters */
//  633     for ( i = 0; i < numInClusters; i++ )
        MOV     ?V0 + 2,R0
??MT_ZdoMatchDescRequest_1:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,R7
        JNC     ??MT_ZdoMatchDescRequest_2
//  634     {
//  635       inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
        LCALL   ?Subroutine14 & 0xFFFF
//  636       pBuf += 2;
//  637     }
//  638   }
??CrossCallReturnLabel_17:
        MOV     A,#0x2a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_89:
        SJMP    ??MT_ZdoMatchDescRequest_1
//  639   else
//  640   {
//  641     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x80
        MOVX    @DPTR,A
//  642   }
//  643 
//  644   /* NumOutClusters */
//  645   numOutClusters = *pBuf++;
??MT_ZdoMatchDescRequest_2:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  646   if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
        CLR     C
        SUBB    A,#0x11
        JNC     ??MT_ZdoMatchDescRequest_3
//  647   {
//  648     /* OUT Clusters */
//  649     for ( i = 0; i < numOutClusters; i++ )
        MOV     ?V0 + 2,#0x0
??MT_ZdoMatchDescRequest_4:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 6
        JNC     ??MT_ZdoMatchDescRequest_5
//  650     {
//  651       outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
        LCALL   ?Subroutine14 & 0xFFFF
//  652       pBuf += 2;
//  653     }
//  654   }
??CrossCallReturnLabel_18:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_90:
        SJMP    ??MT_ZdoMatchDescRequest_4
//  655   else
//  656   {
//  657     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x80
        SJMP    ??MT_ZdoMatchDescRequest_6
//  658   }
//  659 
//  660   if ( retValue == 0 )
??MT_ZdoMatchDescRequest_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??MT_ZdoMatchDescRequest_7
//  661   {
//  662     retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
//  663                                        inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 90)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 92)
        MOV     A,?V0 + 6
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 95)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 97)
        MOV     A,R7
        MOV     R1,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
??MT_ZdoMatchDescRequest_6:
        MOVX    @DPTR,A
//  664   }
//  665 
//  666   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoMatchDescRequest_7:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  667 }
        MOV     A,#0x4a
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock59
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond61 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function MT_ZdoMatchDescRequest
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+0
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiPicker63 Using cfiCommon1
          CFI (cfiPicker63) NoFunction
          CFI (cfiPicker63) Picker
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiPicker63
        REQUIRE ??Subroutine67_0
        ; // Fall through to label ??Subroutine67_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine67_0:
          CFI Block cfiCond64 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+0
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function MT_ZdoMatchDescRequest
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+0
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function MT_ZdoMatchDescRequest
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+0
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) Picker
        LCALL   ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_95:
        INC     ?V0 + 2
        RET
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function MT_ZdoMatchDescRequest
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+0
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 4
        ADD     A,#0x0
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 5,A
        MOV     A,?V0 + 2
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        RET
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond72 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function MT_ZdoPowerDescRequest
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+0
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+0
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function MT_ZdoActiveEpRequest
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+0
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function MT_ZdoMatchDescRequest
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+0
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function MT_ZdoComplexDescRequest
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+0
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function MT_ZdoUserDescRequest
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+0
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function MT_ZdoUserDescSet
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+0
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+0
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker81 Using cfiCommon1
          CFI (cfiPicker81) NoFunction
          CFI (cfiPicker81) Picker
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,#0x1
        RET
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiPicker81
//  668 
//  669 /***************************************************************************************************
//  670  * @fn      MT_ZdoComplexDescRequest
//  671  *
//  672  * @brief   Handle a Complex Descriptor request.
//  673  *
//  674  * @param   pBuf  - MT message data
//  675  *
//  676  * @return  void
//  677  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  678 void MT_ZdoComplexDescRequest(uint8 *pBuf)
MT_ZdoComplexDescRequest:
          CFI Block cfiBlock82 Using cfiCommon0
          CFI Function MT_ZdoComplexDescRequest
        CODE
//  679 {
        FUNCALL MT_ZdoComplexDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoComplexDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  680   uint8 cmdId;
//  681   uint8 retValue;
//  682   zAddrType_t destAddr;
//  683   uint16 shortAddr;
//  684 
//  685   /* parse header */
//  686   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine68_0 & 0xFFFF
//  687   pBuf += MT_RPC_FRAME_HDR_SZ;
//  688 
//  689   /* Dev address */
//  690   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_103:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  691   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_5:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
//  692   pBuf += 2;
//  693 
//  694   /* Network address of interest */
//  695   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  696   pBuf += 2;
//  697 
//  698   retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_49:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x10
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock82
//  699 
//  700   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  701 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+0
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker85 Using cfiCommon1
          CFI (cfiPicker85) NoFunction
          CFI (cfiPicker85) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiPicker85
        REQUIRE ??Subroutine68_0
        ; // Fall through to label ??Subroutine68_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine68_0:
          CFI Block cfiCond86 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
          CFI Conditional ??CrossCallReturnLabel_99
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function MT_ZdoPowerDescRequest
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+0
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+0
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function MT_ZdoActiveEpRequest
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+0
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function MT_ZdoComplexDescRequest
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+0
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function MT_ZdoUserDescRequest
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+0
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function MT_ZdoMatchDescRequest
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+0
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+0
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker94 Using cfiCommon1
          CFI (cfiPicker94) NoFunction
          CFI (cfiPicker94) Picker
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_105:
        MOV     A,#0x9
        RET
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiPicker94
//  702 
//  703 /***************************************************************************************************
//  704  * @fn      MT_ZdoUserDescRequest
//  705  *
//  706  * @brief   Handle a User Descriptor request.
//  707  *
//  708  * @param   pBuf  - MT message data
//  709  *
//  710  * @return  void
//  711  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  712 void MT_ZdoUserDescRequest(uint8 *pBuf)
MT_ZdoUserDescRequest:
          CFI Block cfiBlock95 Using cfiCommon0
          CFI Function MT_ZdoUserDescRequest
        CODE
//  713 {
        FUNCALL MT_ZdoUserDescRequest, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  714   uint8 cmdId;
//  715   uint8 retValue;
//  716   zAddrType_t destAddr;
//  717   uint16 shortAddr;
//  718 
//  719   /* parse header */
//  720   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine68_0 & 0xFFFF
//  721   pBuf += MT_RPC_FRAME_HDR_SZ;
//  722 
//  723   /* Dev address */
//  724   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_104:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  725   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
??CrossCallReturnLabel_6:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine29 & 0xFFFF
//  726   pBuf += 2;
//  727 
//  728   /* Network address of interest */
//  729   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
//  730   pBuf += 2;
//  731 
//  732   retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
??CrossCallReturnLabel_50:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x11
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock95
//  733 
//  734   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  735 }
//  736 
//  737 /***************************************************************************************************
//  738  * @fn      MT_ZdoEndDevAnnce
//  739  *
//  740  * @brief   Handle a End Device Announce Descriptor request.
//  741  *
//  742  * @param   pBuf  - MT message data
//  743  *
//  744  * @return  void
//  745  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  746 void MT_ZdoEndDevAnnce(uint8 *pBuf)
MT_ZdoEndDevAnnce:
          CFI Block cfiBlock96 Using cfiCommon0
          CFI Function MT_ZdoEndDevAnnce
        CODE
//  747 {
        FUNCALL MT_ZdoEndDevAnnce, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevAnnce, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  748   uint8 cmdId;
//  749   uint8 retValue;
//  750   uint16 shortAddr;
//  751   uint8 *pIEEEAddr;
//  752 
//  753   /* parse header */
//  754   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  755   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R4
        ADD     A,#0x3
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  756 
//  757   /* network address */
//  758   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        CLR     A
        ADDC    A,R1
        MOV     R3,A
//  759   pBuf += 2;
        MOV     A,R4
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
//  760 
//  761   /* extended address */
//  762   pIEEEAddr = pBuf;
//  763   pBuf += Z_EXTADDR_LEN;
//  764 
//  765   retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV     ?V0 + 0,R0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDP_DeviceAnnce?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock96
//  766 
//  767   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  768 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock97 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?Subroutine21 & 0xFFFF
          CFI EndBlock cfiBlock97
??CrossCallReturnLabel_30:
        REQUIRE ??Subroutine69_0
        ; // Fall through to label ??Subroutine69_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine69_0:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_NWKAddrOfInterestReq?relay
          CFI EndBlock cfiBlock98
        REQUIRE ??Subroutine70_0
        ; // Fall through to label ??Subroutine70_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine70_0:
          CFI Block cfiBlock99 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_112:
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        MOV     A,#0xa
          CFI EndBlock cfiBlock99
        REQUIRE ??Subroutine71_0
        ; // Fall through to label ??Subroutine71_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine71_0:
          CFI Block cfiBlock100 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock100
        REQUIRE ??Subroutine72_0
        ; // Fall through to label ??Subroutine72_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine72_0:
          CFI Block cfiBlock101 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock101

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function MT_ZdoEndDevAnnce
          CFI Conditional ??CrossCallReturnLabel_111
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function MT_ZdoServiceDiscRequest
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+0
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function MT_ZdoPowerDescRequest
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+0
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function MT_ZdoActiveEpRequest
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+0
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function MT_ZdoComplexDescRequest
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+0
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function MT_ZdoUserDescRequest
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+0
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function MT_ZdoNodeDescRequest
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+0
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+0
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker110 Using cfiCommon1
          CFI (cfiPicker110) NoFunction
          CFI (cfiPicker110) Picker
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_113:
        MOV     A,R6
        RET
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond111 Using cfiCommon0
          CFI Function MT_ZdoSimpleDescRequest
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function MT_ZdoPowerDescRequest
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+0
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function MT_ZdoActiveEpRequest
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+0
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function MT_ZdoComplexDescRequest
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+0
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function MT_ZdoUserDescRequest
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+0
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker116 Using cfiCommon1
          CFI (cfiPicker116) NoFunction
          CFI (cfiPicker116) Picker
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV     A,#0x2
        RET
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiPicker116

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond117 Using cfiCommon0
          CFI Function MT_ZdoNodeDescRequest
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_29
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+0
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function MT_ZdoPowerDescRequest
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_30
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+0
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function MT_ZdoActiveEpRequest
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_30
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+0
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function MT_ZdoComplexDescRequest
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_30
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+0
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function MT_ZdoUserDescRequest
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_30
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+0
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker123 Using cfiCommon1
          CFI (cfiPicker123) NoFunction
          CFI (cfiPicker123) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        ADD     A,#0x0
        CLR     A
        ADDC    A,R3
        MOV     R5,A
        RET
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiPicker123
//  769 
//  770 /***************************************************************************************************
//  771  * @fn      MT_ZdoUserDescSet
//  772  *
//  773  * @brief   Handle a User Descriptor Set.
//  774  *
//  775  * @param   pBuf  - MT message data
//  776  *
//  777  * @return  void
//  778  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  779 void MT_ZdoUserDescSet(uint8 *pBuf)
MT_ZdoUserDescSet:
          CFI Block cfiBlock124 Using cfiCommon0
          CFI Function MT_ZdoUserDescSet
        CODE
//  780 {
        FUNCALL MT_ZdoUserDescSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescSet, ZDP_UserDescSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUserDescSet, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 27
        MOV     A,#-0x1b
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  781   uint8 cmdId;
//  782   uint8 retValue;
//  783   zAddrType_t destAddr;
//  784   uint16 shortAddr;
//  785   UserDescriptorFormat_t userDesc;
//  786 
//  787   /* parse header */
//  788   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  789   pBuf += MT_RPC_FRAME_HDR_SZ;
        LCALL   ?Subroutine58 & 0xFFFF
//  790 
//  791   /* Dev address */
//  792   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_108:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  793   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_7:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  794   pBuf += 2;
        LCALL   ?Subroutine32 & 0xFFFF
//  795 
//  796   /* Network address of interest */
//  797   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_116:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x0
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  798   pBuf += 2;
        LCALL   ?Subroutine32 & 0xFFFF
//  799 
//  800   /* User descriptor */
//  801   userDesc.len = *pBuf++;
??CrossCallReturnLabel_117:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  802   osal_memcpy( userDesc.desc, pBuf, userDesc.len );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
//  803   pBuf += 16;
//  804 
//  805   retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
        ; Setup parameters for call to function ZDP_UserDescSet
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_UserDescSet?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 39)
        LCALL   ?Subroutine55 & 0xFFFF
//  806 
//  807   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??CrossCallReturnLabel_114:
        MOV     R2,?V0 + 3
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  808 }
        MOV     A,#0x1b
          CFI EndBlock cfiBlock124
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock125 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 39)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Valid
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock125

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine55:
          CFI Block cfiCond126 Using cfiCommon0
          CFI Function MT_ZdoEndDevAnnce
          CFI Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_111
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function MT_ZdoServiceDiscRequest
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_111
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+0
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function MT_ZdoPowerDescRequest
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_112
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+0
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function MT_ZdoActiveEpRequest
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_112
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+0
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function MT_ZdoComplexDescRequest
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_112
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+0
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function MT_ZdoUserDescRequest
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_112
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+0
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function MT_ZdoNodeDescRequest
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_112
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+0
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_113, ??CrossCallReturnLabel_112
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+0
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function MT_ZdoUserDescSet
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+0
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function MT_ZdoNWKAddressRequest
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_59
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+0
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function MT_ZdoIEEEAddrRequest
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_59
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+0
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function MT_ZdoBindRequest
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_60
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+0
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function MT_ZdoUnbindRequest
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_60
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+0
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker139 Using cfiCommon1
          CFI (cfiPicker139) NoFunction
          CFI (cfiPicker139) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        RET
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiPicker139

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond140 Using cfiCommon0
          CFI Function MT_ZdoUserDescSet
          CFI Conditional ??CrossCallReturnLabel_116
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function MT_ZdoUserDescSet
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+0
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker142 Using cfiCommon1
          CFI (cfiPicker142) NoFunction
          CFI (cfiPicker142) Picker
        MOV     A,R2
        ADD     A,#0x2
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiPicker142
        REQUIRE ??Subroutine73_0
        ; // Fall through to label ??Subroutine73_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine73_0:
          CFI Block cfiCond143 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
          CFI Conditional ??CrossCallReturnLabel_118
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function MT_ZdoUserDescSet
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+0
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function MT_ZdoUserDescSet
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+0
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker146 Using cfiCommon1
          CFI (cfiPicker146) NoFunction
          CFI (cfiPicker146) Picker
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_122:
        RET
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiPicker146
//  809 
//  810 /***************************************************************************************************
//  811  * @fn      MT_ZdoServiceDiscRequest
//  812  *
//  813  * @brief   Handle a Server Discovery request.
//  814  *
//  815  * @param   pBuf  - MT message data
//  816  *
//  817  * @return  void
//  818  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  819 void MT_ZdoServiceDiscRequest(uint8 *pBuf)
MT_ZdoServiceDiscRequest:
          CFI Block cfiBlock147 Using cfiCommon0
          CFI Function MT_ZdoServiceDiscRequest
        CODE
//  820 {
        FUNCALL MT_ZdoServiceDiscRequest, ZDP_ServerDiscReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoServiceDiscRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  821   uint8 cmdId;
//  822   uint8 retValue;
//  823   uint16 serviceMask;
//  824 
//  825   /* parse header */
//  826   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine42 & 0xFFFF
//  827   pBuf += MT_RPC_FRAME_HDR_SZ;
//  828 
//  829   /* Service Mask */
//  830   serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
//  831   pBuf += 2;
//  832 
//  833   retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
??CrossCallReturnLabel_106:
        ; Setup parameters for call to function ZDP_ServerDiscReq
        MOV     R1,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        MOV     R2,A
        LCALL   ??ZDP_ServerDiscReq?relay
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock147
//  834 
//  835   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  836 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond148 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_97
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_98
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+0
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function MT_ZdoNodeDescRequest
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_99
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+0
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function MT_ZdoPowerDescRequest
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_100
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+0
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_101
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+0
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function MT_ZdoActiveEpRequest
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_102
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+0
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function MT_ZdoComplexDescRequest
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_103
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+0
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function MT_ZdoUserDescRequest
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_104
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+0
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function MT_ZdoServiceDiscRequest
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+0
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_9
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+0
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_10
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+0
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker159 Using cfiCommon1
          CFI (cfiPicker159) NoFunction
          CFI (cfiPicker159) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_110:
        RET
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiPicker159

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine58:
          CFI Block cfiCond160 Using cfiCommon0
          CFI Function MT_ZdoUserDescSet
          CFI Conditional ??CrossCallReturnLabel_108
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function MT_ZdoMatchDescRequest
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_97
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+0
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_98
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+0
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function MT_ZdoNodeDescRequest
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_99
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+0
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function MT_ZdoPowerDescRequest
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_100
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+0
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function MT_ZdoSimpleDescRequest
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_101
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+0
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function MT_ZdoActiveEpRequest
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_102
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+0
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function MT_ZdoComplexDescRequest
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_103
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+0
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function MT_ZdoUserDescRequest
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_104
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+0
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function MT_ZdoServiceDiscRequest
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_106
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+0
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_9
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+0
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_10
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+0
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function MT_ZdoIEEEAddrRequest
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_53
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+0
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function MT_ZdoNetworkDiscoveryReq
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_54
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+0
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker174 Using cfiCommon1
          CFI (cfiPicker174) NoFunction
          CFI (cfiPicker174) Picker
        MOV     A,R2
        ADD     A,#0x3
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        RET
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiPicker174
//  837 
//  838 /***************************************************************************************************
//  839  * @fn      MT_ZdoEndDevBindRequest
//  840  *
//  841  * @brief   Handle a End Device Bind request.
//  842  *
//  843  * @param   pBuf  - MT message data
//  844  *
//  845  * @return  void
//  846  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  847 void MT_ZdoEndDevBindRequest(uint8 *pBuf)
MT_ZdoEndDevBindRequest:
          CFI Block cfiBlock175 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
        CODE
//  848 {
        FUNCALL MT_ZdoEndDevBindRequest, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 95, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 95, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 86, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 70
        MOV     A,#-0x46
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
//  849   uint8 cmdId;
//  850   uint8 retValue = 0;
        LCALL   ?Subroutine6 & 0xFFFF
//  851   uint8 i, epInt, numInClusters, numOutClusters;
//  852   zAddrType_t destAddr;
//  853   uint16 shortAddr;
//  854   uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
//  855 
//  856   /* parse header */
//  857   cmdId = pBuf[MT_RPC_POS_CMD1];
//  858   pBuf += MT_RPC_FRAME_HDR_SZ;
//  859 
//  860   /* Dev address */
//  861   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_98:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  862   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_8:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
//  863   pBuf += 2;
//  864 
//  865   /* Local coordinator of the binding */
//  866   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  867   pBuf += 2;
//  868 
//  869   /* For now, skip past the extended address */
//  870   pBuf += Z_EXTADDR_LEN;
??CrossCallReturnLabel_34:
        ADD     A,#0xa
        LCALL   ??Subroutine73_0 & 0xFFFF
//  871 
//  872   /* Endpoint */
//  873   epInt = *pBuf++;
??CrossCallReturnLabel_118:
        MOV     R7,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  874 
//  875   /* Profile ID */
//  876   profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
        LCALL   ?Subroutine11 & 0xFFFF
//  877   pBuf += 2;
//  878 
//  879   /* NumInClusters */
//  880   numInClusters = *pBuf++;
??CrossCallReturnLabel_14:
        MOV     ?V0 + 4,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
//  881   if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
        CLR     C
        SUBB    A,#0x10
        JNC     ??MT_ZdoEndDevBindRequest_0
//  882   {
//  883     for ( i = 0; i < numInClusters; i++ )
        MOV     ?V0 + 2,R0
??MT_ZdoEndDevBindRequest_1:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 4
        JNC     ??MT_ZdoEndDevBindRequest_2
//  884     {
//  885       inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
        LCALL   ?Subroutine15 & 0xFFFF
//  886       pBuf += 2;
//  887     }
//  888   }
??CrossCallReturnLabel_19:
        MOV     A,#0x28
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL   ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_91:
        SJMP    ??MT_ZdoEndDevBindRequest_1
//  889   else
//  890   {
//  891     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x80
        MOVX    @DPTR,A
//  892   }
//  893 
//  894   /* NumOutClusters */
//  895   numOutClusters = *pBuf++;
??MT_ZdoEndDevBindRequest_2:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  896   if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
        CLR     C
        SUBB    A,#0x10
        JNC     ??MT_ZdoEndDevBindRequest_3
//  897   {
//  898     for ( i = 0; i < numOutClusters; i++ )
        MOV     ?V0 + 2,#0x0
??MT_ZdoEndDevBindRequest_4:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 5
        JNC     ??MT_ZdoEndDevBindRequest_5
//  899     {
//  900       outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
        LCALL   ?Subroutine15 & 0xFFFF
//  901       pBuf += 2;
//  902     }
//  903   }
??CrossCallReturnLabel_20:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL   ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_92:
        SJMP    ??MT_ZdoEndDevBindRequest_4
//  904   else
//  905   {
//  906     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x80
        SJMP    ??MT_ZdoEndDevBindRequest_6
//  907   }
//  908 
//  909   if ( retValue == 0 )
??MT_ZdoEndDevBindRequest_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??MT_ZdoEndDevBindRequest_7
//  910   {
//  911     retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
//  912                                           numInClusters, inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 87)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 89)
        MOV     A,?V0 + 5
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 90)
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 92)
        MOV     A,?V0 + 4
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 93)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 95)
        MOV     A,R7
        MOV     R1,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
??MT_ZdoEndDevBindRequest_6:
        MOVX    @DPTR,A
//  913   }
//  914 
//  915   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoEndDevBindRequest_7:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  916 }
        MOV     A,#0x46
        LJMP    ??Subroutine76_0 & 0xFFFF
          CFI EndBlock cfiBlock175

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond176 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+0
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker178 Using cfiCommon1
          CFI (cfiPicker178) NoFunction
          CFI (cfiPicker178) Picker
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     A,?V0 + 6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 7
        RET
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiPicker178

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine56:
          CFI Block cfiCond179 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function MT_ZdoMatchDescRequest
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_90
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+0
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_64
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+0
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_65
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+0
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker183 Using cfiCommon1
          CFI (cfiPicker183) NoFunction
          CFI (cfiPicker183) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiPicker183

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond184 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+0
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker186 Using cfiCommon1
          CFI (cfiPicker186) NoFunction
          CFI (cfiPicker186) Picker
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_121:
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     A,R2
        RET
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiPicker186

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond187 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_34
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+0
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_9
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+0
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_10
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+0
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker191 Using cfiCommon1
          CFI (cfiPicker191) NoFunction
          CFI (cfiPicker191) Picker
        MOV     DPL,R2
        MOV     DPH,R3
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiPicker191
        REQUIRE ??Subroutine74_0
        ; // Fall through to label ??Subroutine74_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine74_0:
          CFI Block cfiCond192 Using cfiCommon0
          CFI Function MT_ZdoIEEEAddrRequest
          CFI Conditional ??CrossCallReturnLabel_119
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function MT_ZdoMatchDescRequest
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_33
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+0
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_121, ??CrossCallReturnLabel_34
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+0
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_9
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+0
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_10
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+0
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x0
        RET
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+0
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker200 Using cfiCommon1
          CFI (cfiPicker200) NoFunction
          CFI (cfiPicker200) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 6
        ADD     A,#0x0
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 7,A
        MOV     A,?V0 + 2
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        RET
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiPicker200

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond201 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+0
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker203 Using cfiCommon1
          CFI (cfiPicker203) NoFunction
          CFI (cfiPicker203) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,#0x0
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     A,R2
        ADD     A,#0x2
        LCALL   ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_123:
        RET
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiPicker203

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine51:
          CFI Block cfiCond204 Using cfiCommon0
          CFI Function MT_ZdoUserDescSet
          CFI Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_116
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function MT_ZdoUserDescSet
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_117
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+0
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_118
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+0
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function MT_ZdoMatchDescRequest
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_13
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+0
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_14
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+0
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker209 Using cfiCommon1
          CFI (cfiPicker209) NoFunction
          CFI (cfiPicker209) Picker
        MOV     R2,A
        MOV     A,R3
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiPicker209
        REQUIRE ??Subroutine75_0
        ; // Fall through to label ??Subroutine75_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine75_0:
          CFI Block cfiCond210 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
          CFI Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function MT_ZdoIEEEAddrRequest
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_36
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+0
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function MT_ZdoUserDescSet
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_116
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+0
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function MT_ZdoUserDescSet
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_117
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+0
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_118
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+0
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function MT_ZdoMatchDescRequest
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_13
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+0
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 89)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_14
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+0
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker217 Using cfiCommon1
          CFI (cfiPicker217) NoFunction
          CFI (cfiPicker217) Picker
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiPicker217
//  917 
//  918 /***************************************************************************************************
//  919  * @fn      MT_ZdoBindRequest
//  920  *
//  921  * @brief   Handle a Bind request.
//  922  *
//  923  * @param   pBuf  - MT message data
//  924  *
//  925  * @return  void
//  926  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  927 void MT_ZdoBindRequest(uint8 *pBuf)
MT_ZdoBindRequest:
          CFI Block cfiBlock218 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
        CODE
//  928 {
        FUNCALL MT_ZdoBindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL   ?Subroutine20 & 0xFFFF
//  929   uint8 cmdId;
//  930   uint8 retValue;
//  931   zAddrType_t destAddr, devAddr;
//  932   uint8 *pSrcAddr, *ptr;
//  933   uint8 srcEPInt, dstEPInt;
//  934   uint16 clusterID;
//  935 
//  936   /* parse header */
//  937   cmdId = pBuf[MT_RPC_POS_CMD1];
//  938   pBuf += MT_RPC_FRAME_HDR_SZ;
//  939 
//  940   /* Dev address */
//  941   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_27:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
//  942   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_37:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
//  943   pBuf += 2;
//  944 
//  945   /* SrcAddress */
//  946   pSrcAddr = pBuf;
//  947   pBuf += Z_EXTADDR_LEN;
//  948 
//  949   /* SrcEPInt */
//  950   srcEPInt = *pBuf++;
//  951 
//  952   /* ClusterID */
//  953   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
//  954   pBuf += 2;
//  955 
//  956   /* Destination Address mode */
//  957   devAddr.addrMode = *pBuf++;
??CrossCallReturnLabel_11:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
//  958 
//  959   /* Destination Address */
//  960   if ( devAddr.addrMode == Addr64Bit )
??CrossCallReturnLabel_57:
        JNZ     ??MT_ZdoBindRequest_0
//  961   {
//  962     ptr = pBuf;
//  963     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??MT_ZdoBindRequest_1
//  964   }
//  965   else
//  966   {
//  967     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoBindRequest_0:
        LCALL   ?Subroutine26 & 0xFFFF
//  968   }
??CrossCallReturnLabel_39:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  969   /* The short address occupies LSB two bytes */
//  970   pBuf += Z_EXTADDR_LEN;
//  971 
//  972   /* DstEPInt */
//  973   dstEPInt = *pBuf;
//  974 
//  975   retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??MT_ZdoBindRequest_1:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     R1,?V0 + 1
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x21
          CFI EndBlock cfiBlock218
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  976 
//  977   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  978 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock219 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 43)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0x0
        LCALL   ??ZDP_BindUnbindReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        MOV     A,#0x13
          CFI EndBlock cfiBlock219
        REQUIRE ??Subroutine76_0
        ; // Fall through to label ??Subroutine76_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine76_0:
          CFI Block cfiBlock220 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 86)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock220

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond221 Using cfiCommon0
          CFI Function MT_ZdoNWKAddressRequest
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function MT_ZdoIEEEAddrRequest
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+0
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function MT_ZdoBindRequest
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+0
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function MT_ZdoUnbindRequest
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+0
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker225 Using cfiCommon1
          CFI (cfiPicker225) NoFunction
          CFI (cfiPicker225) Picker
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_115:
        MOV     R2,?V0 + 0
        RET
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiPicker225
//  979 
//  980 /***************************************************************************************************
//  981  * @fn      MT_ZdoUnbindRequest
//  982  *
//  983  * @brief   Handle a Unbind request.
//  984  *
//  985  * @param   pBuf  - MT message data
//  986  *
//  987  * @return  void
//  988  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  989 void MT_ZdoUnbindRequest(uint8 *pBuf)
MT_ZdoUnbindRequest:
          CFI Block cfiBlock226 Using cfiCommon0
          CFI Function MT_ZdoUnbindRequest
        CODE
//  990 {
        FUNCALL MT_ZdoUnbindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL   ?Subroutine20 & 0xFFFF
//  991   uint8 cmdId;
//  992   uint8 retValue;
//  993   zAddrType_t destAddr, devAddr;
//  994   uint8 *pSrcAddr, *ptr;
//  995   uint8 srcEPInt, dstEPInt;
//  996   uint16 clusterID;
//  997 
//  998   /* parse header */
//  999   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1000   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1001 
// 1002   /* dev address */
// 1003   destAddr.addrMode = Addr16Bit;
??CrossCallReturnLabel_28:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
// 1004   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_38:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
// 1005   pBuf += 2;
// 1006 
// 1007   /* SrcAddress */
// 1008   pSrcAddr = pBuf;
// 1009   pBuf += Z_EXTADDR_LEN;
// 1010 
// 1011   /* SrcEPInt */
// 1012   srcEPInt = *pBuf++;
// 1013 
// 1014   /* ClusterID */
// 1015   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
// 1016   pBuf += 2;
// 1017 
// 1018   /* Destination Address mode */
// 1019   devAddr.addrMode = *pBuf++;
??CrossCallReturnLabel_12:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
// 1020 
// 1021   /* Destination Address */
// 1022   if ( devAddr.addrMode == Addr64Bit )
??CrossCallReturnLabel_58:
        JNZ     ??MT_ZdoUnbindRequest_0
// 1023   {
// 1024     ptr = pBuf;
// 1025     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??MT_ZdoUnbindRequest_1
// 1026   }
// 1027   else
// 1028   {
// 1029     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_ZdoUnbindRequest_0:
        LCALL   ?Subroutine26 & 0xFFFF
// 1030   }
??CrossCallReturnLabel_40:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1031   /* The short address occupies LSB two bytes */
// 1032   pBuf += Z_EXTADDR_LEN;
// 1033 
// 1034   /* dstEPInt */
// 1035   dstEPInt = *pBuf;
// 1036 
// 1037   retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??MT_ZdoUnbindRequest_1:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     R1,?V0 + 1
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x22
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock226
// 1038 
// 1039   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1040 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond227 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function MT_ZdoUnbindRequest
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond228) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond228) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+0
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker229 Using cfiCommon1
          CFI (cfiPicker229) NoFunction
          CFI (cfiPicker229) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        MOV     A,#0x3
        XRL     A,R0
        RET
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiPicker229

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond230 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function MT_ZdoUnbindRequest
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+0
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker232 Using cfiCommon1
          CFI (cfiPicker232) NoFunction
          CFI (cfiPicker232) Picker
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_76:
        MOV     R0,A
        MOV     A,#0x1
        RET
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiPicker232

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond233 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function MT_ZdoUnbindRequest
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+0
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker235 Using cfiCommon1
          CFI (cfiPicker235) NoFunction
          CFI (cfiPicker235) Picker
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_75:
        MOV     R0,A
        MOV     A,#0xa
        RET
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiPicker235

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond236 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function MT_ZdoUnbindRequest
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_40
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+0
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function MT_ZdoBindRequest
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_37
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond238) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond238) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond238) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond238) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond238) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+0
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond239 Using cfiCommon0
          CFI (cfiCond239) Function MT_ZdoUnbindRequest
          CFI (cfiCond239) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_38
          CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond239) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond239) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond239) CFA_SP SP+0
          CFI (cfiCond239) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function MT_ZdoBindRequest
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_11
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+0
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function MT_ZdoUnbindRequest
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_74, ??CrossCallReturnLabel_12
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+0
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker242 Using cfiCommon1
          CFI (cfiPicker242) NoFunction
          CFI (cfiPicker242) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        RET
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiPicker242

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond243 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function MT_ZdoUnbindRequest
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+0
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker245 Using cfiCommon1
          CFI (cfiPicker245) NoFunction
          CFI (cfiPicker245) Picker
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV     A,#0x12
        RET
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiPicker245

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond246 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function MT_ZdoUnbindRequest
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond247) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+0
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker248 Using cfiCommon1
          CFI (cfiPicker248) NoFunction
          CFI (cfiPicker248) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     A,?V0 + 2
        ADD     A,#0x8
        MOV     R6,A
        MOV     A,?V0 + 3
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_81:
        MOV     ?V0 + 1,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_74:
        ADD     A,#0x0
        MOV     ?V0 + 6,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 7,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        MOV     A,R7
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_82:
        MOV     R0,A
        MOV     A,#0x9
        RET
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiPicker248

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine53:
          CFI Block cfiCond249 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function MT_ZdoUnbindRequest
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_12
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond250) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+0
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function MT_ZdoBindRequest
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_11
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+0
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function MT_ZdoUnbindRequest
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_82, ??CrossCallReturnLabel_12
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond252) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond252) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond252) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+0
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker253 Using cfiCommon1
          CFI (cfiPicker253) NoFunction
          CFI (cfiPicker253) Picker
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiPicker253
// 1041 
// 1042 #if defined (MT_SYS_KEY_MANAGEMENT)
// 1043 /***************************************************************************************************
// 1044  * @fn      MT_ZdoSetLinkKey
// 1045  *
// 1046  * @brief   Set an application or trust center link key.
// 1047  *
// 1048  * @param   pBuf  - MT message data
// 1049  *
// 1050  * @return  void
// 1051  ***************************************************************************************************/
// 1052 void MT_ZdoSetLinkKey(uint8 *pBuf)
// 1053 {
// 1054   uint8 cmdId;
// 1055   uint8 retValue;
// 1056   uint8 *pExtAddr;
// 1057   uint8 *pKey;
// 1058   uint16 shortAddr;
// 1059 
// 1060   /* parse header */
// 1061   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1062   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1063 
// 1064   /* ShortAddr */
// 1065   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1066   pBuf += 2;
// 1067 
// 1068   /* Extended Addr */
// 1069   pExtAddr = pBuf;
// 1070   pBuf += Z_EXTADDR_LEN;
// 1071 
// 1072   /* Key data */
// 1073   pKey = pBuf;
// 1074 
// 1075   retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
// 1076 
// 1077   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1078 }
// 1079 
// 1080 /***************************************************************************************************
// 1081  * @fn      MT_ZdoRemoveLinkKey
// 1082  *
// 1083  * @brief   Remove an application or trust center link key.
// 1084  *
// 1085  * @param   pBuf  - MT message data
// 1086  *
// 1087  * @return  void
// 1088  ***************************************************************************************************/
// 1089 void MT_ZdoRemoveLinkKey(uint8 *pBuf)
// 1090 {
// 1091   uint8 cmdId;
// 1092   uint8 retValue;
// 1093   uint8 *pExtAddr;
// 1094 
// 1095   /* parse header */
// 1096   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1097   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1098 
// 1099   /* ShortAddr */
// 1100   pExtAddr = pBuf;
// 1101 
// 1102   retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
// 1103 
// 1104   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1105 }
// 1106 
// 1107 /***************************************************************************************************
// 1108  * @fn      MT_ZdoGetLinkKey
// 1109  *
// 1110  * @brief   Get the application link key.
// 1111  *
// 1112  * @param   pBuf  - MT message data
// 1113  *
// 1114  * @return  void
// 1115  ***************************************************************************************************/
// 1116 void MT_ZdoGetLinkKey(uint8 *pBuf)
// 1117 {
// 1118   uint8 cmdId;
// 1119   uint8 retValue;
// 1120   uint8 *pExtAddr;
// 1121   uint8 *retBuf = NULL;
// 1122   uint8 len;
// 1123   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 1124   uint16 apsLinkKeyNvId;
// 1125 
// 1126   // parse header
// 1127   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1128   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1129 
// 1130   // Extended Address
// 1131   pExtAddr = pBuf;
// 1132 
// 1133   // Fetch the key NV ID
// 1134   retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
// 1135 
// 1136   if (retValue == ZSuccess)
// 1137   {
// 1138     if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
// 1139     {
// 1140       // retrieve key from NV
// 1141       if (osal_nv_read( apsLinkKeyNvId, 0,
// 1142                        sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
// 1143       {
// 1144         retValue = ZNwkUnknownDevice;
// 1145       }
// 1146     }
// 1147     else
// 1148     {
// 1149       retValue = ZNwkUnknownDevice;
// 1150     }
// 1151   }
// 1152 
// 1153   // Construct the response message
// 1154   len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
// 1155   if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
// 1156   {
// 1157     if (retValue == ZSuccess)
// 1158     {
// 1159       // Extended Address
// 1160       osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
// 1161 
// 1162       // Key data
// 1163       osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
// 1164     }
// 1165     else
// 1166     {
// 1167       // Failed case - set the rest fields to all FF
// 1168       osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
// 1169     }
// 1170 
// 1171     retBuf[0] = retValue;  // Status
// 1172 
// 1173     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
// 1174 
// 1175     // clear retBuf because it contains key data and free allocated memory
// 1176     osal_memset(retBuf, 0x00, len);
// 1177 
// 1178     osal_mem_free(retBuf);
// 1179   }
// 1180 
// 1181   // clear copy of key in RAM
// 1182   if (pApsLinkKey != NULL)
// 1183   {
// 1184     osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
// 1185 
// 1186     osal_mem_free(pApsLinkKey);
// 1187   }
// 1188 
// 1189   return;
// 1190 }
// 1191 #endif // MT_SYS_KEY_MANAGEMENT
// 1192 
// 1193 #if defined (MT_ZDO_MGMT)
// 1194 /***************************************************************************************************
// 1195  * @fn      MT_ZdoMgmtNwkDiscRequest
// 1196  *
// 1197  * @brief   Handle a Mgmt Nwk Discovery request.
// 1198  *
// 1199  * @param   pBuf  - MT message data
// 1200  *
// 1201  * @return  void
// 1202  ***************************************************************************************************/
// 1203 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
// 1204 {
// 1205   uint8 cmdId;
// 1206   uint8 retValue;
// 1207   zAddrType_t destAddr;
// 1208   uint32 scanChannels;
// 1209   uint8 scanDuration, startIndex;
// 1210 
// 1211   /* parse header */
// 1212   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1213   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1214 
// 1215   /* Dev address */
// 1216   destAddr.addrMode = Addr16Bit;
// 1217   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1218   pBuf += 2;
// 1219 
// 1220   /* Scan Channels */
// 1221   scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
// 1222   pBuf += 4;
// 1223 
// 1224   /* Scan Duration */
// 1225   scanDuration = *pBuf++;
// 1226 
// 1227   /* Start Index */
// 1228   startIndex = *pBuf;
// 1229 
// 1230   retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
// 1231 
// 1232   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1233 }
// 1234 
// 1235 /***************************************************************************************************
// 1236  * @fn      MT_ZdoMgmtLqiRequest
// 1237  *
// 1238  * @brief   Handle a Mgmt Lqi request.
// 1239  *
// 1240  * @param   pBuf  - MT message data
// 1241  *
// 1242  * @return  void
// 1243  ***************************************************************************************************/
// 1244 void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
// 1245 {
// 1246   uint8 cmdId;
// 1247   uint8 retValue;
// 1248   zAddrType_t destAddr;
// 1249   uint8 startIndex;
// 1250 
// 1251   /* parse header */
// 1252   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1253   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1254 
// 1255   /* Dev address */
// 1256   destAddr.addrMode = Addr16Bit;
// 1257   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1258   pBuf += 2;
// 1259 
// 1260   /* Start Index */
// 1261   startIndex = *pBuf;
// 1262 
// 1263   retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
// 1264 
// 1265   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1266 }
// 1267 
// 1268 /***************************************************************************************************
// 1269  * @fn      MT_ZdoMgmtRtgRequest
// 1270  *
// 1271  * @brief   Handle a Mgmt Rtg request.
// 1272  *
// 1273  * @param   pBuf  - MT message data
// 1274  *
// 1275  * @return  void
// 1276  ***************************************************************************************************/
// 1277 void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
// 1278 {
// 1279   uint8 cmdId;
// 1280   uint8 retValue;
// 1281   zAddrType_t destAddr;
// 1282   uint8 startIndex;
// 1283 
// 1284   /* parse header */
// 1285   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1286   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1287 
// 1288   /* Dev Address */
// 1289   destAddr.addrMode = Addr16Bit;
// 1290   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
// 1291   pBuf += 2;
// 1292 
// 1293   /* Start Index */
// 1294   startIndex = *pBuf;
// 1295 
// 1296   retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
// 1297 
// 1298   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1299 }
// 1300 
// 1301 /***************************************************************************************************
// 1302  * @fn      MT_ZdoMgmtBindRequest
// 1303  *
// 1304  * @brief   Handle a Mgmt Bind request.
// 1305  *
// 1306  * @param   pBuf  - MT message data
// 1307  *
// 1308  * @return  void
// 1309  ***************************************************************************************************/
// 1310 void MT_ZdoMgmtBindRequest(uint8 *pBuf)
// 1311 {
// 1312   uint8 cmdId;
// 1313   uint8 retValue;
// 1314   zAddrType_t destAddr;
// 1315   uint8 startIndex;
// 1316 
// 1317   /* parse header */
// 1318   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1319   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1320 
// 1321   /* Dev Address */
// 1322   destAddr.addrMode = Addr16Bit;
// 1323   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1324   pBuf += 2;
// 1325 
// 1326   /* Start Index */
// 1327   startIndex = *pBuf;
// 1328 
// 1329   retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
// 1330 
// 1331   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1332 }
// 1333 
// 1334 /***************************************************************************************************
// 1335  * @fn      MT_ZdoMgmtLeaveRequest
// 1336  *
// 1337  * @brief   Handle a Mgmt Leave request.
// 1338  *
// 1339  * @param   pBuf  - MT message data
// 1340  *
// 1341  * @return  void
// 1342  ***************************************************************************************************/
// 1343 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
// 1344 {
// 1345   uint8 cmdId;
// 1346   uint8 retValue;
// 1347   zAddrType_t destAddr;
// 1348   uint8 *pIEEEAddr;
// 1349   uint8 removeChildren, rejoin;
// 1350 
// 1351   /* parse header */
// 1352   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1353   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1354 
// 1355   /* Destination Address */
// 1356   destAddr.addrMode = Addr16Bit;
// 1357   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1358   pBuf += 2;
// 1359 
// 1360   /* IEEE address */
// 1361   pIEEEAddr = pBuf;
// 1362   pBuf += Z_EXTADDR_LEN;
// 1363 
// 1364   /* Remove Children */
// 1365   removeChildren = *pBuf++;
// 1366 
// 1367   /* Rejoin */
// 1368   rejoin = *pBuf;
// 1369 
// 1370   retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
// 1371 
// 1372   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1373 }
// 1374 
// 1375 
// 1376 /***************************************************************************************************
// 1377  * @fn      MT_ZdoMgmtDirectJoinRequest
// 1378  *
// 1379  * @brief   Handle a Mgmt Direct Join request.
// 1380  *
// 1381  * @param   pBuf  - MT message data
// 1382  *
// 1383  * @return  void
// 1384  ***************************************************************************************************/
// 1385 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
// 1386 {
// 1387   uint8 cmdId;
// 1388   uint8 retValue;
// 1389   zAddrType_t destAddr;
// 1390   uint8 *deviceAddr;
// 1391   uint8 capInfo;
// 1392 
// 1393   /* parse header */
// 1394   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1395   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1396 
// 1397   /* Destination Address */
// 1398   destAddr.addrMode = Addr16Bit;
// 1399   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1400   pBuf += 2;
// 1401 
// 1402   /* Device Address */
// 1403   deviceAddr = pBuf;
// 1404   pBuf += Z_EXTADDR_LEN;
// 1405 
// 1406   /* Capability information */
// 1407   capInfo = *pBuf;
// 1408 
// 1409   retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
// 1410 
// 1411   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1412 }
// 1413 
// 1414 /***************************************************************************************************
// 1415  * @fn      MT_ZdoMgmtPermitJoinRequest
// 1416  *
// 1417  * @brief   Handle a Mgmt Permit Join request.
// 1418  *
// 1419  * @param   pBuf  - MT message data
// 1420  *
// 1421  * @return  void
// 1422  ***************************************************************************************************/
// 1423 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
// 1424 {
// 1425   uint8 cmdId;
// 1426   uint8 retValue;
// 1427   zAddrType_t destAddr;
// 1428   uint8 duration, tcSignificance;
// 1429 
// 1430   /* parse header */
// 1431   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1432   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1433 
// 1434   /* Destination Address */
// 1435   destAddr.addrMode = Addr16Bit;
// 1436   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1437   pBuf += 2;
// 1438 
// 1439   /* Duration */
// 1440   duration = *pBuf++;
// 1441 
// 1442   /* Trust center significance */
// 1443   tcSignificance = *pBuf;
// 1444 
// 1445   retValue = (byte)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
// 1446 
// 1447   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1448 }
// 1449 
// 1450 /***************************************************************************************************
// 1451  * @fn      MT_ZdoMgmtNwkUpdateRequest
// 1452  *
// 1453  * @brief   Handle a Mgmt Nwk Update request.
// 1454  *
// 1455  * @param   pBuf  - MT message data
// 1456  *
// 1457  * @return  void
// 1458  ***************************************************************************************************/
// 1459 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
// 1460 {
// 1461   uint8 cmdId;
// 1462   uint8 retValue;
// 1463   zAddrType_t destAddr;
// 1464   uint32 channelMask;
// 1465   uint8 scanDuration, scanCount;
// 1466   uint16 nwkManagerAddr;
// 1467 
// 1468     /* parse header */
// 1469   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1470   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1471 
// 1472   /* Destination address */
// 1473   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1474   pBuf += 2;
// 1475 
// 1476   /* Destination address mode */
// 1477   destAddr.addrMode = *pBuf++;
// 1478 
// 1479   channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
// 1480   pBuf += 4;
// 1481 
// 1482   /* Scan duration */
// 1483   scanDuration = *pBuf++;
// 1484 
// 1485   /* Scan count */
// 1486   scanCount = *pBuf++;
// 1487 
// 1488   /* NWK manager address */
// 1489   nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1490 
// 1491   /* Send the Management Network Update request */
// 1492   retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1493                                           scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1494 
// 1495   /*
// 1496     Since we don't recevied our own broadcast messages, we should
// 1497     send a unicast copy of the message to ourself.
// 1498   */
// 1499   if ( destAddr.addrMode == AddrBroadcast )
// 1500   {
// 1501     destAddr.addrMode = Addr16Bit;
// 1502     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
// 1503     retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1504                                              scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1505   }
// 1506 
// 1507   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1508 }
// 1509 #endif /* MT_ZDO_MGMT */
// 1510 
// 1511 /***************************************************************************************************
// 1512  * @fn      MT_ZdoStartupFromApp
// 1513  *
// 1514  * @brief   Handle a Startup from App request.
// 1515  *
// 1516  * @param   pBuf  - MT message data
// 1517  *
// 1518  * @return  void
// 1519  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1520 void MT_ZdoStartupFromApp(uint8 *pBuf)
MT_ZdoStartupFromApp:
          CFI Block cfiBlock254 Using cfiCommon0
          CFI Function MT_ZdoStartupFromApp
        CODE
// 1521 {
        FUNCALL MT_ZdoStartupFromApp, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoStartupFromApp, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1522   uint8 cmd0, cmd1, retValue;
// 1523 
// 1524   /* parse header */
// 1525   cmd0 = pBuf[MT_RPC_POS_CMD0];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1526   cmd1 = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
// 1527   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1528 
// 1529   retValue = ZDOInitDevice(100);
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ??ZDOInitDevice?relay
        LCALL   ?Subroutine38 & 0xFFFF
// 1530 
// 1531   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
??CrossCallReturnLabel_61:
        JNZ     ??MT_ZdoStartupFromApp_0
// 1532   {
// 1533     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1534   }
// 1535 }
??MT_ZdoStartupFromApp_0:
        LJMP    ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock254
// 1536 
// 1537 
// 1538 /***************************************************************************************************
// 1539  * @fn      MT_ZdoNetworkDiscoveryReq
// 1540  *
// 1541  * @brief   Handle a ZDO Network Discovery request.
// 1542  *
// 1543  * @param   pBuf  - MT message data
// 1544  *
// 1545  * @return  void
// 1546  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1547 void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
MT_ZdoNetworkDiscoveryReq:
          CFI Block cfiBlock255 Using cfiCommon0
          CFI Function MT_ZdoNetworkDiscoveryReq
        CODE
// 1548 {
        FUNCALL MT_ZdoNetworkDiscoveryReq, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNetworkDiscoveryReq, ZDApp_NetworkDiscoveryReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNetworkDiscoveryReq, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNetworkDiscoveryReq, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNetworkDiscoveryReq, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1549   uint8  retValue = ZFailure;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1550   uint8  cmdId;
// 1551   uint32 scanChannels;
// 1552 
// 1553   /* parse header */
// 1554   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1555   pBuf += MT_RPC_FRAME_HDR_SZ;
        LCALL   ?Subroutine31 & 0xFFFF
// 1556 
// 1557   /* Packet format */
// 1558   /* scan channels (4) | scan duration (1) */
// 1559 
// 1560   /* Scan channels */
// 1561   scanChannels = osal_build_uint32(pBuf, 4);
// 1562   pBuf += 4;
// 1563 
// 1564   retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
??CrossCallReturnLabel_54:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x4
        LCALL   ??osal_build_uint32?relay
        MOV     A,R6
        MOV     R1,A
        LCALL   ??ZDApp_NetworkDiscoveryReq?relay
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1565 
// 1566   // Register ZDO callback for MT to handle the network discovery confirm
// 1567   // and beacon notification confirm
// 1568   ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV     R2,#??MT_ZdoNwkDiscoveryCnfCB?relay & 0xff
        MOV     R3,#(??MT_ZdoNwkDiscoveryCnfCB?relay >> 8) & 0xff
        MOV     R1,#0x2
        LCALL   ??ZDO_RegisterForZdoCB?relay
// 1569   ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV     R2,#??MT_ZdoBeaconIndCB?relay & 0xff
        MOV     R3,#(??MT_ZdoBeaconIndCB?relay >> 8) & 0xff
        MOV     R1,#0x3
        LCALL   ??ZDO_RegisterForZdoCB?relay
// 1570 
// 1571   /* Build and send back the response */
// 1572   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R7
        LJMP    ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock255
// 1573 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond256 Using cfiCommon0
          CFI Function MT_ZdoIEEEAddrRequest
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond257 Using cfiCommon0
          CFI (cfiCond257) Function MT_ZdoNetworkDiscoveryReq
          CFI (cfiCond257) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond257) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond257) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond257) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond257) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond257) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond257) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond257) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond257) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond257) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond257) CFA_SP SP+0
          CFI (cfiCond257) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker258 Using cfiCommon1
          CFI (cfiPicker258) NoFunction
          CFI (cfiPicker258) Picker
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_109:
        ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond256
          CFI EndBlock cfiCond257
          CFI EndBlock cfiPicker258
// 1574 
// 1575 
// 1576 /***************************************************************************************************
// 1577  * @fn      MT_ZdoJoinReq
// 1578  *
// 1579  * @brief   Handle a ZDO Join request.
// 1580  *
// 1581  * @param   pBuf  - MT message data
// 1582  *
// 1583  * @return  void
// 1584  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1585 void MT_ZdoJoinReq(uint8 *pBuf)
MT_ZdoJoinReq:
          CFI Block cfiBlock259 Using cfiCommon0
          CFI Function MT_ZdoJoinReq
        CODE
// 1586 {
        FUNCALL MT_ZdoJoinReq, ZDApp_JoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoJoinReq, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoJoinReq, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1587   uint8  retValue = ZFailure;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1588   uint8  cmdId;
// 1589   uint16 panId;
// 1590   uint16 chosenParent;
// 1591 
// 1592   /* parse header */
// 1593   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine45 & 0xFFFF
// 1594   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1595 
// 1596   /* Packet format */
// 1597   /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
// 1598    * parentDepth (1) | stackProfile  (1)
// 1599    */
// 1600 
// 1601   panId        = BUILD_UINT16(pBuf[1], pBuf[2]);
// 1602   chosenParent = BUILD_UINT16(pBuf[11], pBuf[12]);
// 1603 
// 1604   retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
??CrossCallReturnLabel_71:
        ; Setup parameters for call to function ZDApp_JoinReq
        MOV     A,R6
        ADD     A,#0xe
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        ADD     A,#0xd
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R6
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine80_0 & 0xFFFF
??CrossCallReturnLabel_137:
        MOV     R2,A
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine80_0 & 0xFFFF
??CrossCallReturnLabel_138:
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     ?V0 + 2,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R6
        ADD     A,#0x3
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDApp_JoinReq?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1605 
// 1606   /* Register for MT to receive Join Confirm */
// 1607   ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV     R2,#??MT_ZdoJoinCnfCB?relay & 0xff
        MOV     R3,#(??MT_ZdoJoinCnfCB?relay >> 8) & 0xff
        MOV     R1,#0x4
        LCALL   ??ZDO_RegisterForZdoCB?relay
// 1608 
// 1609   /* Build and send back the response */
// 1610   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     R2,?V0 + 0
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1611 
// 1612 }
        MOV     A,#0x1
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock259

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond260 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond261 Using cfiCommon0
          CFI (cfiCond261) Function MT_ZdoUnbindRequest
          CFI (cfiCond261) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_28
          CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond261) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond261) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond261) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond261) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond261) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond261) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond261) CFA_SP SP+0
          CFI (cfiCond261) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function MT_ZdoJoinReq
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond262) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond262) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond262) CFA_SP SP+0
          CFI (cfiCond262) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker263 Using cfiCommon1
          CFI (cfiPicker263) NoFunction
          CFI (cfiPicker263) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,R6
        ADD     A,#0x3
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        RET
          CFI EndBlock cfiCond260
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiPicker263

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond264 Using cfiCommon0
          CFI Function MT_ZdoJoinReq
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function MT_ZdoJoinReq
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+0
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker266 Using cfiCommon1
          CFI (cfiPicker266) NoFunction
          CFI (cfiPicker266) Picker
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine81_0 & 0xFFFF
??CrossCallReturnLabel_143:
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 1
        RET
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiPicker266
// 1613 
// 1614 /***************************************************************************************************
// 1615  * @fn          MT_ZdoNwkDiscoveryCnfCB
// 1616  *
// 1617  * @brief       Send an indication to inform host device the completion of
// 1618  *              network discovery scan
// 1619  *
// 1620  * @param       pStr - pointer to a parameter and a structure of parameters
// 1621  *
// 1622  * @return      void
// 1623  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1624 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
MT_ZdoNwkDiscoveryCnfCB:
          CFI Block cfiBlock267 Using cfiCommon0
          CFI Function MT_ZdoNwkDiscoveryCnfCB
        CODE
// 1625 {
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, MT_ZdoBeaconIndCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1626   /* pStr: status (uint8) */
// 1627   /* Packet Format */
// 1628   /* Status (1) */
// 1629 
// 1630   // Scan completed. De-register the callback with ZDO
// 1631   ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV     R1,#0x2
        LCALL   ??ZDO_DeregisterForZdoCB?relay
// 1632   ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV     R1,#0x3
        LCALL   ??ZDO_DeregisterForZdoCB?relay
// 1633 
// 1634   // Send the buffered beacon indication
// 1635   MT_ZdoBeaconIndCB ( NULL );
        ; Setup parameters for call to function MT_ZdoBeaconIndCB
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??MT_ZdoBeaconIndCB?relay
// 1636 
// 1637   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1638                                          MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R3,#0x1
        MOV     R2,#-0x39
        MOV     R1,#0x45
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1639   return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??Subroutine72_0 & 0xFFFF
          CFI EndBlock cfiBlock267
// 1640 }
// 1641 
// 1642 
// 1643 
// 1644 /***************************************************************************************************
// 1645  * @fn          MT_ZdoBeaconIndCB
// 1646  *
// 1647  * @brief       Send an indication to host device of a beacon notification
// 1648  *
// 1649  * @param       pStr -  pointer to a parameter and a structure of parameters
// 1650  *
// 1651  * @return      void
// 1652  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1653 void *MT_ZdoBeaconIndCB ( void *pStr )
MT_ZdoBeaconIndCB:
          CFI Block cfiBlock268 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
        CODE
// 1654 {
        FUNCALL MT_ZdoBeaconIndCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1655   zdoBeaconInd_t *pBeacon = pStr;
// 1656   uint8 *pTmp;
// 1657 
// 1658   /* Packet Format */
// 1659   /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
// 1660 
// 1661   if( pStr != NULL)
        MOV     A,R6
        ORL     A,R7
        MOV     DPTR,#pBeaconIndBuf
        JNZ     $+5
        LJMP    ??MT_ZdoBeaconIndCB_0 & 0xFFFF
// 1662   {
// 1663     if( pBeaconIndBuf == NULL )
        LCALL   ??Subroutine78_0 & 0xFFFF
??CrossCallReturnLabel_129:
        JNZ     ??MT_ZdoBeaconIndCB_1
// 1664     {
// 1665       // If pBeaconIndBuf has not been allocated yet
// 1666       // allocate memory now with MAX_UART_TX_BUFF
// 1667       if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x7b
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#pBeaconIndBuf
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_131:
        JNZ     $+5
        LJMP    ??MT_ZdoBeaconIndCB_2 & 0xFFFF
// 1668       {
// 1669         // Memory failure
// 1670         return NULL;
// 1671       }
// 1672       pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
        LCALL   ??Subroutine77_0 & 0xFFFF
// 1673     }
??CrossCallReturnLabel_125:
        CLR     A
        MOVX    @DPTR,A
// 1674 
// 1675     // Fill in the buffer with the beacon indication
// 1676     pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
??MT_ZdoBeaconIndCB_1:
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     R0,A
        MOV     R1,B
        MOV     DPTR,#pBeaconIndBuf
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 1677     *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine19 & 0xFFFF
// 1678     *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
??CrossCallReturnLabel_25:
        LCALL   ??Subroutine79_0 & 0xFFFF
// 1679     *pTmp++ = LO_UINT16(pBeacon->panID);
??CrossCallReturnLabel_135:
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R7
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_51:
        INC     R2
        MOV     R3,DPH
// 1680     *pTmp++ = HI_UINT16(pBeacon->panID);
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        LCALL   ?Subroutine19 & 0xFFFF
// 1681     *pTmp++ = pBeacon->logicalChannel;
??CrossCallReturnLabel_26:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine17 & 0xFFFF
// 1682     *pTmp++ = pBeacon->permitJoining;
??CrossCallReturnLabel_23:
        LCALL   ?Subroutine17 & 0xFFFF
// 1683     *pTmp++ = pBeacon->routerCapacity;
??CrossCallReturnLabel_24:
        INC     DPTR
        LCALL   ?Subroutine16 & 0xFFFF
// 1684     *pTmp++ = pBeacon->deviceCapacity;
??CrossCallReturnLabel_21:
        LCALL   ?Subroutine16 & 0xFFFF
// 1685     *pTmp++ = pBeacon->protocolVersion;
??CrossCallReturnLabel_22:
        INC     DPTR
        LCALL   ?Subroutine13 & 0xFFFF
// 1686     *pTmp++ = pBeacon->stackProfile;
??CrossCallReturnLabel_15:
        LCALL   ?Subroutine13 & 0xFFFF
// 1687     *pTmp++ = pBeacon->LQI;
??CrossCallReturnLabel_16:
        INC     DPTR
        LCALL   ??Subroutine79_0 & 0xFFFF
// 1688     *pTmp++ = pBeacon->depth;
??CrossCallReturnLabel_136:
        ADD     A,#0xb
        LCALL   ?Subroutine12 & 0xFFFF
// 1689     *pTmp++ = pBeacon->updateID;
??CrossCallReturnLabel_133:
        ADD     A,#0xc
        LCALL   ?Subroutine12 & 0xFFFF
// 1690     osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
??CrossCallReturnLabel_134:
        ADD     A,#0xd
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x8
        MOV     R5,#0x0
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1691 
// 1692     pBeaconIndBuf[0] += 1; // Increment the devCnt
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_41:
        INC     A
        MOVX    @DPTR,A
// 1693 
// 1694     // Check if the buffer can fit in another beacon
// 1695     if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_32:
        ADD     A,#0x16
        MOV     R0,A
        MOV     A,B
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x7c
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??MT_ZdoBeaconIndCB_2
// 1696     {
// 1697       // Packet full, send the packet over MT
// 1698       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1699                                    MT_ZDO_BEACON_NOTIFY_IND,
// 1700                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_42:
        MUL     AB
        INC     A
        MOV     R3,A
        MOV     R2,#-0x3b
        MOV     R1,#0x45
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1701       pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
        LCALL   ?Subroutine59 & 0xFFFF
// 1702     }
// 1703   }
??CrossCallReturnLabel_127:
        CLR     A
        SJMP    ??MT_ZdoBeaconIndCB_3
// 1704   else
// 1705   {
// 1706     if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
??MT_ZdoBeaconIndCB_0:
        LCALL   ??Subroutine78_0 & 0xFFFF
??CrossCallReturnLabel_130:
        JZ      ??MT_ZdoBeaconIndCB_2
        LCALL   ??Subroutine77_0 & 0xFFFF
??CrossCallReturnLabel_126:
        MOVX    A,@DPTR
        JZ      ??MT_ZdoBeaconIndCB_4
// 1707     {
// 1708       // End of beacon indication, send the packet over MT
// 1709       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1710                                    MT_ZDO_BEACON_NOTIFY_IND,
// 1711                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LCALL   ?Subroutine28 & 0xFFFF
// 1712     }
??CrossCallReturnLabel_44:
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MUL     AB
        INC     A
        MOV     R3,A
        MOV     R2,#-0x3b
        MOV     R1,#0x45
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1713     // Free the allocated memory
// 1714     if(pBeaconIndBuf != NULL)
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_132:
        JZ      ??MT_ZdoBeaconIndCB_2
// 1715     {
// 1716       osal_mem_free(pBeaconIndBuf);
??MT_ZdoBeaconIndCB_4:
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#pBeaconIndBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
// 1717       pBeaconIndBuf = NULL;
        MOV     DPTR,#pBeaconIndBuf
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??MT_ZdoBeaconIndCB_3:
        MOVX    @DPTR,A
// 1718     }
// 1719   }
// 1720 
// 1721   return NULL;
??MT_ZdoBeaconIndCB_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock268
// 1722 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond269 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond270 Using cfiCommon0
          CFI (cfiCond270) Function MT_ZdoBeaconIndCB
          CFI (cfiCond270) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond270) CFA_SP SP+0
          CFI (cfiCond270) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker271 Using cfiCommon1
          CFI (cfiPicker271) NoFunction
          CFI (cfiPicker271) Picker
        MOV     DPTR,#pBeaconIndBuf
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     B,#0x15
        RET
          CFI EndBlock cfiCond269
          CFI EndBlock cfiCond270
          CFI EndBlock cfiPicker271

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond272 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function MT_ZdoBeaconIndCB
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond273) CFA_SP SP+0
          CFI (cfiCond273) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker274 Using cfiCommon1
          CFI (cfiPicker274) NoFunction
          CFI (cfiPicker274) Picker
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_78:
        RET
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiPicker274

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
          CFI Block cfiCond275 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond276 Using cfiCommon0
          CFI (cfiCond276) Function MT_ZdoBeaconIndCB
          CFI (cfiCond276) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_42
          CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond276) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond276) CFA_SP SP+0
          CFI (cfiCond276) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond277 Using cfiCommon0
          CFI (cfiCond277) Function MT_ZdoBeaconIndCB
          CFI (cfiCond277) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_31
          CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond277) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond277) CFA_SP SP+0
          CFI (cfiCond277) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function MT_ZdoBeaconIndCB
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_32
          CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond278) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond278) CFA_SP SP+0
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker279 Using cfiCommon1
          CFI (cfiPicker279) NoFunction
          CFI (cfiPicker279) Picker
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_128:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond275
          CFI EndBlock cfiCond276
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiPicker279

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine59:
          CFI Block cfiCond280 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_127
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function MT_ZdoBeaconIndCB
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_41
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+0
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function MT_ZdoBeaconIndCB
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_42
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+0
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond283 Using cfiCommon0
          CFI (cfiCond283) Function MT_ZdoBeaconIndCB
          CFI (cfiCond283) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_31
          CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond283) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond283) CFA_SP SP+0
          CFI (cfiCond283) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function MT_ZdoBeaconIndCB
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_32
          CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond284) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond284) CFA_SP SP+0
          CFI (cfiCond284) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker285 Using cfiCommon1
          CFI (cfiPicker285) NoFunction
          CFI (cfiPicker285) Picker
        MOV     DPTR,#pBeaconIndBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiPicker285
        REQUIRE ??Subroutine77_0
        ; // Fall through to label ??Subroutine77_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine77_0:
          CFI Block cfiCond286 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_125
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function MT_ZdoBeaconIndCB
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+0
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function MT_ZdoBeaconIndCB
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+0
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function MT_ZdoBeaconIndCB
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_41
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+0
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond290 Using cfiCommon0
          CFI (cfiCond290) Function MT_ZdoBeaconIndCB
          CFI (cfiCond290) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_42
          CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond290) CFA_SP SP+0
          CFI (cfiCond290) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function MT_ZdoBeaconIndCB
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_31
          CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond291) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond291) CFA_SP SP+0
          CFI (cfiCond291) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function MT_ZdoBeaconIndCB
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_32
          CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond292) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond292) CFA_SP SP+0
          CFI (cfiCond292) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker293 Using cfiCommon1
          CFI (cfiPicker293) NoFunction
          CFI (cfiPicker293) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiPicker293

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond294 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function MT_ZdoBeaconIndCB
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+0
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker296 Using cfiCommon1
          CFI (cfiPicker296) NoFunction
          CFI (cfiPicker296) Picker
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV     B,#0x15
        MUL     AB
        RET
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiPicker296

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond297 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function MT_ZdoBeaconIndCB
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+0
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker299 Using cfiCommon1
          CFI (cfiPicker299) NoFunction
          CFI (cfiPicker299) Picker
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_68:
        RET
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiPicker299

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond300 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function MT_ZdoBeaconIndCB
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_26
          CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond301) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond301) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond301) CFA_SP SP+0
          CFI (cfiCond301) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond302 Using cfiCommon0
          CFI (cfiCond302) Function MT_ZdoBeaconIndCB
          CFI (cfiCond302) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_23
          CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond302) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond302) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond302) CFA_SP SP+0
          CFI (cfiCond302) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond303 Using cfiCommon0
          CFI (cfiCond303) Function MT_ZdoBeaconIndCB
          CFI (cfiCond303) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_24
          CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond303) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond303) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond303) CFA_SP SP+0
          CFI (cfiCond303) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker304 Using cfiCommon1
          CFI (cfiPicker304) NoFunction
          CFI (cfiPicker304) Picker
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_85:
        RET
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiCond302
          CFI EndBlock cfiCond303
          CFI EndBlock cfiPicker304

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine57:
          CFI Block cfiCond305 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond306 Using cfiCommon0
          CFI (cfiCond306) Function MT_ZdoBeaconIndCB
          CFI (cfiCond306) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_26
          CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond306) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond306) CFA_SP SP+0
          CFI (cfiCond306) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond307 Using cfiCommon0
          CFI (cfiCond307) Function MT_ZdoBeaconIndCB
          CFI (cfiCond307) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_23
          CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond307) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond307) CFA_SP SP+0
          CFI (cfiCond307) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function MT_ZdoBeaconIndCB
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_24
          CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond308) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond308) CFA_SP SP+0
          CFI (cfiCond308) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function MT_ZdoBeaconIndCB
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_21
          CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond309) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond309) CFA_SP SP+0
          CFI (cfiCond309) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function MT_ZdoBeaconIndCB
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_22
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+0
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond311 Using cfiCommon0
          CFI (cfiCond311) Function MT_ZdoBeaconIndCB
          CFI (cfiCond311) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_15
          CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond311) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond311) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond311) CFA_SP SP+0
          CFI (cfiCond311) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond312 Using cfiCommon0
          CFI (cfiCond312) Function MT_ZdoBeaconIndCB
          CFI (cfiCond312) Conditional ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_16
          CFI (cfiCond312) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond312) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond312) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond312) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond312) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond312) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond312) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond312) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond312) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond312) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond312) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond312) CFA_SP SP+0
          CFI (cfiCond312) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker313 Using cfiCommon1
          CFI (cfiPicker313) NoFunction
          CFI (cfiPicker313) Picker
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_156:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        RET
          CFI EndBlock cfiCond305
          CFI EndBlock cfiCond306
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiCond311
          CFI EndBlock cfiCond312
          CFI EndBlock cfiPicker313

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond314 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_131
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond315 Using cfiCommon0
          CFI (cfiCond315) Function MT_ZdoBeaconIndCB
          CFI (cfiCond315) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond315) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond315) CFA_SP SP+0
          CFI (cfiCond315) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker316 Using cfiCommon1
          CFI (cfiPicker316) NoFunction
          CFI (cfiPicker316) Picker
        MOV     DPTR,#pBeaconIndBuf
          CFI EndBlock cfiCond314
          CFI EndBlock cfiCond315
          CFI EndBlock cfiPicker316
        REQUIRE ??Subroutine78_0
        ; // Fall through to label ??Subroutine78_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine78_0:
          CFI Block cfiCond317 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_129
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function MT_ZdoBeaconIndCB
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond318) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond318) CFA_SP SP+0
          CFI (cfiCond318) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond319 Using cfiCommon0
          CFI (cfiCond319) Function MT_ZdoBeaconIndCB
          CFI (cfiCond319) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond319) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond319) CFA_SP SP+0
          CFI (cfiCond319) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond320 Using cfiCommon0
          CFI (cfiCond320) Function MT_ZdoBeaconIndCB
          CFI (cfiCond320) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond320) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond320) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond320) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond320) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond320) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond320) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond320) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond320) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond320) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond320) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond320) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond320) CFA_SP SP+0
          CFI (cfiCond320) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker321 Using cfiCommon1
          CFI (cfiPicker321) NoFunction
          CFI (cfiPicker321) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiCond319
          CFI EndBlock cfiCond320
          CFI EndBlock cfiPicker321

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond322 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond323 Using cfiCommon0
          CFI (cfiCond323) Function MT_ZdoBeaconIndCB
          CFI (cfiCond323) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond323) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond323) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond323) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond323) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond323) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond323) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond323) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond323) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond323) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond323) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond323) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond323) CFA_SP SP+0
          CFI (cfiCond323) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker324 Using cfiCommon1
          CFI (cfiPicker324) NoFunction
          CFI (cfiPicker324) Picker
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_69:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond322
          CFI EndBlock cfiCond323
          CFI EndBlock cfiPicker324

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond325 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond326 Using cfiCommon0
          CFI (cfiCond326) Function MT_ZdoBeaconIndCB
          CFI (cfiCond326) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond326) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond326) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond326) CFA_SP SP+0
          CFI (cfiCond326) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker327 Using cfiCommon1
          CFI (cfiPicker327) NoFunction
          CFI (cfiPicker327) Picker
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_66:
        RET
          CFI EndBlock cfiCond325
          CFI EndBlock cfiCond326
          CFI EndBlock cfiPicker327

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond328 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond329 Using cfiCommon0
          CFI (cfiCond329) Function MT_ZdoBeaconIndCB
          CFI (cfiCond329) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_22
          CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond329) CFA_SP SP+0
          CFI (cfiCond329) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond330 Using cfiCommon0
          CFI (cfiCond330) Function MT_ZdoBeaconIndCB
          CFI (cfiCond330) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_15
          CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond330) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond330) CFA_SP SP+0
          CFI (cfiCond330) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond331 Using cfiCommon0
          CFI (cfiCond331) Function MT_ZdoBeaconIndCB
          CFI (cfiCond331) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_16
          CFI (cfiCond331) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond331) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond331) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond331) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond331) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond331) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond331) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond331) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond331) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond331) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond331) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond331) CFA_SP SP+0
          CFI (cfiCond331) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker332 Using cfiCommon1
          CFI (cfiPicker332) NoFunction
          CFI (cfiPicker332) Picker
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_86:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond328
          CFI EndBlock cfiCond329
          CFI EndBlock cfiCond330
          CFI EndBlock cfiCond331
          CFI EndBlock cfiPicker332

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond333 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond334 Using cfiCommon0
          CFI (cfiCond334) Function MT_ZdoBeaconIndCB
          CFI (cfiCond334) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond334) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond334) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond334) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond334) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond334) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond334) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond334) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond334) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond334) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond334) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond334) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond334) CFA_SP SP+0
          CFI (cfiCond334) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker335 Using cfiCommon1
          CFI (cfiPicker335) NoFunction
          CFI (cfiPicker335) Picker
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_67:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond333
          CFI EndBlock cfiCond334
          CFI EndBlock cfiPicker335

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond336 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_133
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond337 Using cfiCommon0
          CFI (cfiCond337) Function MT_ZdoBeaconIndCB
          CFI (cfiCond337) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond337) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond337) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond337) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond337) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond337) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond337) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond337) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond337) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond337) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond337) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond337) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond337) CFA_SP SP+0
          CFI (cfiCond337) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker338 Using cfiCommon1
          CFI (cfiPicker338) NoFunction
          CFI (cfiPicker338) Picker
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine81_0 & 0xFFFF
          CFI EndBlock cfiCond336
          CFI EndBlock cfiCond337
          CFI EndBlock cfiPicker338
??CrossCallReturnLabel_142:
        REQUIRE ??Subroutine79_0
        ; // Fall through to label ??Subroutine79_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine79_0:
          CFI Block cfiCond339 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_135
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond340 Using cfiCommon0
          CFI (cfiCond340) Function MT_ZdoBeaconIndCB
          CFI (cfiCond340) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond340) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond340) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond340) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond340) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond340) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond340) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond340) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond340) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond340) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond340) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond340) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond340) CFA_SP SP+0
          CFI (cfiCond340) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond341 Using cfiCommon0
          CFI (cfiCond341) Function MT_ZdoBeaconIndCB
          CFI (cfiCond341) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond341) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond341) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond341) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond341) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond341) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond341) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond341) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond341) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond341) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond341) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond341) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond341) CFA_SP SP+0
          CFI (cfiCond341) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond342 Using cfiCommon0
          CFI (cfiCond342) Function MT_ZdoBeaconIndCB
          CFI (cfiCond342) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond342) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond342) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond342) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond342) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond342) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond342) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond342) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond342) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond342) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond342) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond342) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond342) CFA_SP SP+0
          CFI (cfiCond342) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker343 Using cfiCommon1
          CFI (cfiPicker343) NoFunction
          CFI (cfiPicker343) Picker
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_154:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        RET
          CFI EndBlock cfiCond339
          CFI EndBlock cfiCond340
          CFI EndBlock cfiCond341
          CFI EndBlock cfiCond342
          CFI EndBlock cfiPicker343
// 1723 
// 1724 
// 1725 
// 1726 /***************************************************************************************************
// 1727  * @fn          MT_ZdoJoinCnfCB
// 1728  *
// 1729  * @brief       Handle the ZDO Join Confirm from ZDO
// 1730  *
// 1731  * @param       pStr - pointer to a parameter and a structure of parameters
// 1732  *
// 1733  * @return      void
// 1734  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1735 void *MT_ZdoJoinCnfCB ( void *pStr )
MT_ZdoJoinCnfCB:
          CFI Block cfiBlock344 Using cfiCommon0
          CFI Function MT_ZdoJoinCnfCB
        CODE
// 1736 {
        FUNCALL MT_ZdoJoinCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoJoinCnfCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1737   /* pStr: zdoJoinCnf_t* */
// 1738   /* Packet Format */
// 1739   /* Status (1) | device addr (2) | parent addr (2) */
// 1740 
// 1741   uint8 buf[MT_ZDO_JOIN_CNF_LEN];
// 1742   zdoJoinCnf_t *joinCnf = pStr;
// 1743 
// 1744   /* Join Complete. De-register the callback with ZDO */
// 1745   ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV     R1,#0x4
        LCALL   ??ZDO_DeregisterForZdoCB?relay
// 1746 
// 1747   buf[0] = joinCnf->status;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1748   buf[1] = LO_UINT16( joinCnf->deviceAddr );
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1749   buf[2] = HI_UINT16( joinCnf->deviceAddr );
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1750   buf[3] = LO_UINT16( joinCnf->parentAddr );
        MOV     A,R6
        ADD     A,#0x3
        MOV     R0,A
        MOV     A,R7
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_87:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1751   buf[4] = HI_UINT16( joinCnf->parentAddr );
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1752 
// 1753   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1754                                MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x5
        MOV     R2,#-0x3a
        MOV     R1,#0x45
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1755 
// 1756   return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,#0x5
        LJMP    ??Subroutine71_0 & 0xFFFF
          CFI EndBlock cfiBlock344
// 1757 }
// 1758 
// 1759 /*************************************************************************************************
// 1760  * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
// 1761  *
// 1762  * @brief   MT proxy for ZDO_RegisterForZDOMsg.
// 1763  *
// 1764  * @param   pBuf  - MT message data
// 1765  *
// 1766  * @return  void
// 1767  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1768 void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
MT_ZdoRegisterForZDOMsg:
          CFI Block cfiBlock345 Using cfiCommon0
          CFI Function MT_ZdoRegisterForZDOMsg
        CODE
// 1769 {
        FUNCALL MT_ZdoRegisterForZDOMsg, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoRegisterForZDOMsg, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1770   uint8 cmd0, cmd1, tmp;
// 1771   uint16 cId;
// 1772 
// 1773   /* parse header */
// 1774   cmd0 = pBuf[MT_RPC_POS_CMD0];
        LCALL   ?Subroutine9 & 0xFFFF
// 1775   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 1776   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1777 
// 1778   cId = BUILD_UINT16(pBuf[0], pBuf[1]);
// 1779   tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
??CrossCallReturnLabel_9:
        LCALL   ??ZDO_RegisterForZDOMsg?relay
        LCALL   ?Subroutine38 & 0xFFFF
// 1780 
// 1781   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
??CrossCallReturnLabel_62:
        JNZ     ??MT_ZdoRegisterForZDOMsg_0
// 1782   {
// 1783     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1784   }
// 1785 }
??MT_ZdoRegisterForZDOMsg_0:
        LJMP    ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock345

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond346 Using cfiCommon0
          CFI Function MT_ZdoStartupFromApp
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond347 Using cfiCommon0
          CFI (cfiCond347) Function MT_ZdoRegisterForZDOMsg
          CFI (cfiCond347) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond347) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond347) CFA_SP SP+0
          CFI (cfiCond347) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond348 Using cfiCommon0
          CFI (cfiCond348) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond348) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond348) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond348) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond348) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond348) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond348) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond348) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond348) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond348) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond348) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond348) CFA_SP SP+0
          CFI (cfiCond348) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker349 Using cfiCommon1
          CFI (cfiPicker349) NoFunction
          CFI (cfiPicker349) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#-0x20
        ANL     A,R7
        XRL     A,#0x20
        RET
          CFI EndBlock cfiCond346
          CFI EndBlock cfiCond347
          CFI EndBlock cfiCond348
          CFI EndBlock cfiPicker349
// 1786 
// 1787 /*************************************************************************************************
// 1788  * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
// 1789  *
// 1790  * @brief   MT proxy for ZDO_RemoveRegisteredCB.
// 1791  *
// 1792  * @param   pBuf  - MT message data
// 1793  *
// 1794  * @return  void
// 1795  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1796 void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
MT_ZdoRemoveRegisteredCB:
          CFI Block cfiBlock350 Using cfiCommon0
          CFI Function MT_ZdoRemoveRegisteredCB
        CODE
// 1797 {
        FUNCALL MT_ZdoRemoveRegisteredCB, ZDO_RemoveRegisteredCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoRemoveRegisteredCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1798   uint8 cmd0, cmd1, tmp;
// 1799   uint16 cId;
// 1800 
// 1801   /* parse header */
// 1802   cmd0 = pBuf[MT_RPC_POS_CMD0];
        LCALL   ?Subroutine9 & 0xFFFF
// 1803   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 1804   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1805 
// 1806   cId = BUILD_UINT16(pBuf[0], pBuf[1]);
// 1807   tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
??CrossCallReturnLabel_10:
        LCALL   ??ZDO_RemoveRegisteredCB?relay
        LCALL   ?Subroutine38 & 0xFFFF
// 1808 
// 1809   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
??CrossCallReturnLabel_63:
        JNZ     ??MT_ZdoRemoveRegisteredCB_0
// 1810   {
// 1811     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x65
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1812   }
// 1813 }
??MT_ZdoRemoveRegisteredCB_0:
        LJMP    ??Subroutine64_0 & 0xFFFF
          CFI EndBlock cfiBlock350

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond351 Using cfiCommon0
          CFI Function MT_ZdoRegisterForZDOMsg
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond352 Using cfiCommon0
          CFI (cfiCond352) Function MT_ZdoRemoveRegisteredCB
          CFI (cfiCond352) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond352) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond352) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond352) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond352) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond352) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond352) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond352) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond352) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond352) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond352) CFA_SP SP+0
          CFI (cfiCond352) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker353 Using cfiCommon1
          CFI (cfiPicker353) NoFunction
          CFI (cfiPicker353) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_107:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        ; Setup parameters for call to function ZDO_RemoveRegisteredCB
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_120:
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        MOV     DPTR,#MT_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond351
          CFI EndBlock cfiCond352
          CFI EndBlock cfiPicker353
// 1814 
// 1815 #endif /* MT_ZDO_FUNC */
// 1816 
// 1817 
// 1818 /***************************************************************************************************
// 1819  * Callback handling function
// 1820  ***************************************************************************************************/
// 1821 
// 1822 #if defined (MT_ZDO_CB_FUNC)
// 1823 
// 1824 /***************************************************************************************************
// 1825  * @fn      MT_ZdoStateChangeCB
// 1826  *
// 1827  * @brief   Handle state change OSAL message from ZDO.
// 1828  *
// 1829  * @param   pMsg  - Message data
// 1830  *
// 1831  * @return  void
// 1832  */
// 1833 void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
// 1834 {
// 1835   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1836                                        MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
// 1837 }
// 1838 
// 1839 /***************************************************************************************************
// 1840  * @fn     MT_ZdoDirectCB()
// 1841  *
// 1842  * @brief  ZDO direct callback.  Build an MT message directly from the
// 1843  *         over-the-air ZDO message.
// 1844  *
// 1845  * @param  pData - Incoming AF frame.
// 1846  *
// 1847  * @return  none
// 1848  ***************************************************************************************************/
// 1849 void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 1850 {
// 1851   uint8 len, *pBuf;
// 1852   uint16 origClusterId;
// 1853 
// 1854   // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
// 1855   origClusterId = pData->clusterId;
// 1856 
// 1857   // Is the message an exception or not a response?
// 1858   if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
// 1859   {
// 1860     return;  // Handled somewhere else or not needed.
// 1861   }
// 1862 
// 1863   /* ZDO data starts after one-byte sequence number and the msg buffer length includes
// 1864    * two bytes for srcAddr.
// 1865    */
// 1866   len = pData->cmd.DataLength - 1 + sizeof(uint16);
// 1867 
// 1868   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 1869   {
// 1870     uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
// 1871 
// 1872     pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
// 1873     pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
// 1874 
// 1875     /* copy ZDO data, skipping one-byte sequence number */
// 1876     osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
// 1877 
// 1878     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 1879     osal_mem_free(pBuf);
// 1880   }
// 1881 }
// 1882 
// 1883 /***************************************************************************************************
// 1884  * @fn     MT_ZdoHandleExceptions()
// 1885  *
// 1886  * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
// 1887  *
// 1888  * @param  pData - Incoming AF frame.
// 1889  *
// 1890  * @return  TRUE if handled by this function, FALSE if not
// 1891  ***************************************************************************************************/
// 1892 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 1893 {
// 1894   uint8 ret = TRUE;
// 1895   ZDO_NwkIEEEAddrResp_t *nwkRsp;
// 1896   ZDO_DeviceAnnce_t devAnnce;
// 1897   uint8 doDefault = FALSE;
// 1898 
// 1899   switch ( inMsg->clusterID )
// 1900   {
// 1901     case NWK_addr_rsp:
// 1902     case IEEE_addr_rsp:
// 1903       if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
// 1904       {
// 1905         if ( nwkRsp->status == ZDO_SUCCESS )
// 1906         {
// 1907           MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
// 1908         }
// 1909         osal_mem_free( nwkRsp );
// 1910       }
// 1911       break;
// 1912 
// 1913     case Device_annce:
// 1914       ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
// 1915       MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
// 1916       break;
// 1917 
// 1918     case Simple_Desc_rsp:
// 1919       if ( pData->cmd.DataLength > 5 )
// 1920       {
// 1921         ret = FALSE;
// 1922       }
// 1923       else
// 1924       {
// 1925         doDefault = TRUE;
// 1926       }
// 1927       break;
// 1928 
// 1929     default:
// 1930       ret = FALSE;
// 1931       break;
// 1932   }
// 1933 
// 1934   if ( doDefault )
// 1935   {
// 1936     ret = FALSE;
// 1937     pData->clusterId = MtZdoDef_rsp;
// 1938     pData->cmd.DataLength = 2;
// 1939   }
// 1940 
// 1941   return ( ret );
// 1942 }
// 1943 
// 1944 /***************************************************************************************************
// 1945  * @fn      MT_ZdoAddrRspCB
// 1946  *
// 1947  * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
// 1948  *
// 1949  * @param   pMsg  - Message data
// 1950  *
// 1951  * @return  void
// 1952  */
// 1953 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
// 1954 {
// 1955   uint8   listLen, len, *pBuf;
// 1956 
// 1957   /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
// 1958 
// 1959   /* get length, sanity check length */
// 1960   listLen = pMsg->numAssocDevs;
// 1961 
// 1962   /* calculate msg length */
// 1963   len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
// 1964 
// 1965   /* get buffer */
// 1966   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 1967   {
// 1968     uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
// 1969     uint8 *pTmp = pBuf;
// 1970 
// 1971     *pTmp++ = pMsg->status;
// 1972 
// 1973     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 1974     pTmp += Z_EXTADDR_LEN;
// 1975 
// 1976     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 1977     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 1978 
// 1979     *pTmp++ = pMsg->startIndex;
// 1980     *pTmp++ = listLen;
// 1981 
// 1982     MT_Word2Buf(pTmp, pMsg->devList, listLen);
// 1983 
// 1984     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 1985     osal_mem_free(pBuf);
// 1986   }
// 1987 }
// 1988 
// 1989 /***************************************************************************************************
// 1990  * @fn      MT_ZdoEndDevAnnceCB
// 1991  *
// 1992  * @brief   Handle end device announce OSAL message from ZDO.
// 1993  *
// 1994  * @param   pMsg  - Message data
// 1995  *
// 1996  * @return  void
// 1997  */
// 1998 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
// 1999 {
// 2000   uint8 *pBuf;
// 2001 
// 2002   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
// 2003   {
// 2004     uint8 *pTmp = pBuf;
// 2005 
// 2006     *pTmp++ = LO_UINT16(srcAddr);
// 2007     *pTmp++ = HI_UINT16(srcAddr);
// 2008 
// 2009     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 2010     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 2011 
// 2012     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 2013     pTmp += Z_EXTADDR_LEN;
// 2014 
// 2015     *pTmp = pMsg->capabilities;
// 2016 
// 2017     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2018                                          MT_ZDO_END_DEVICE_ANNCE_IND,
// 2019                                          MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
// 2020     osal_mem_free(pBuf);
// 2021   }
// 2022 }
// 2023 
// 2024 /***************************************************************************************************
// 2025  * @fn      MT_ZdoSrcRtgCB
// 2026  *
// 2027  * @brief   Handle Src Route from ZDO.
// 2028  *
// 2029  * @param   pStr  - pointer to the data structure for the src route
// 2030  *
// 2031  * @return  void*
// 2032  */
// 2033 void* MT_ZdoSrcRtgCB( void *pStr )
// 2034 {
// 2035   uint8 len, *pBuf;
// 2036   zdoSrcRtg_t *pSrcRtg = pStr;
// 2037 
// 2038   // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
// 2039   len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
// 2040 
// 2041   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2042   {
// 2043     uint8 idx, *pTmp = pBuf;
// 2044     uint16 *pRelay;
// 2045 
// 2046     // Packet payload
// 2047     *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
// 2048     *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
// 2049     *pTmp++ = pSrcRtg->relayCnt;
// 2050 
// 2051     // Relay List
// 2052     if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
// 2053     {
// 2054       for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
// 2055       {
// 2056         *pTmp++ = LO_UINT16(*pRelay);
// 2057         *pTmp++ = HI_UINT16(*pRelay);
// 2058         pRelay++;
// 2059       }
// 2060     }
// 2061     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2062                                          MT_ZDO_SRC_RTG_IND, len, pBuf);
// 2063     osal_mem_free(pBuf);
// 2064   }
// 2065 
// 2066   return NULL;
// 2067 }
// 2068 
// 2069 /***************************************************************************************************
// 2070  * @fn          MT_ZdoConcentratorIndCB
// 2071  *
// 2072  * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
// 2073  *
// 2074  * @param       pStr - pointer to a parameter and a structure of parameters
// 2075  *
// 2076  * @return      NULL
// 2077  ***************************************************************************************************/
// 2078 static void *MT_ZdoConcentratorIndCB(void *pStr)
// 2079 {
// 2080   uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
// 2081   zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
// 2082 
// 2083   *pTmp++ = LO_UINT16(pInd->nwkAddr);
// 2084   *pTmp++ = HI_UINT16(pInd->nwkAddr);
// 2085   pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
// 2086   *pTmp = pInd->pktCost;
// 2087 
// 2088   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2089                                     MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
// 2090   return NULL;
// 2091 }
// 2092 
// 2093 /***************************************************************************************************
// 2094  * @fn          MT_ZdoLeaveInd
// 2095  *
// 2096  * @brief       Handle the ZDO Leave Indication callback from the ZDO.
// 2097  *
// 2098  * @param       vPtr - Pointer to the received Leave Indication message.
// 2099  *
// 2100  * @return      NULL
// 2101  ***************************************************************************************************/
// 2102 static void *MT_ZdoLeaveInd(void *vPtr)
// 2103 {
// 2104   NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
// 2105   uint8 buf[sizeof(NLME_LeaveInd_t)];
// 2106 
// 2107   buf[0] = LO_UINT16(pInd->srcAddr);
// 2108   buf[1] = HI_UINT16(pInd->srcAddr);
// 2109   (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
// 2110   buf[2+Z_EXTADDR_LEN] = pInd->request;
// 2111   buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
// 2112   buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
// 2113 
// 2114   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2115                                        MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
// 2116   return NULL;
// 2117 }
// 2118 #endif // MT_ZDO_CB_FUNC
// 2119 
// 2120 /***************************************************************************************************
// 2121  * @fn      MT_ZdoSendMsgCB
// 2122  *
// 2123  * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
// 2124  *
// 2125  * @param   pMsg  - Message data
// 2126  *
// 2127  * @return  void
// 2128  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2129 void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
MT_ZdoSendMsgCB:
          CFI Block cfiBlock354 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
        CODE
// 2130 {
        FUNCALL MT_ZdoSendMsgCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 2131   uint8 len = pMsg->asduLen + 9;
        MOV     A,R2
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine80_0 & 0xFFFF
??CrossCallReturnLabel_139:
        ADD     A,#0x9
        MOV     ?V0 + 2,A
// 2132   uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
// 2133 
// 2134   if (pBuf != NULL)
        MOV     A,R6
        ORL     A,R7
        JZ      ??MT_ZdoSendMsgCB_0
// 2135   {
// 2136     uint8 *pTmp = pBuf;
// 2137 
// 2138     // Assuming exclusive use of network short addresses.
// 2139     *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,?V0 + 1
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV     R2,DPL
        LCALL   ??Subroutine82_0 & 0xFFFF
// 2140     *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
// 2141     *pTmp++ = pMsg->wasBroadcast;
??CrossCallReturnLabel_150:
        ADD     A,#0xb
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_144:
        LCALL   ??Subroutine83_0 & 0xFFFF
// 2142     *pTmp++ = LO_UINT16(pMsg->clusterID);
??CrossCallReturnLabel_151:
        ADD     A,#0xc
        LCALL   ?Subroutine8 & 0xFFFF
// 2143     *pTmp++ = HI_UINT16(pMsg->clusterID);
// 2144     *pTmp++ = pMsg->SecurityUse;
??CrossCallReturnLabel_148:
        ADD     A,#0xe
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_145:
        LCALL   ??Subroutine83_0 & 0xFFFF
// 2145     *pTmp++ = pMsg->TransSeq;
??CrossCallReturnLabel_152:
        ADD     A,#0xf
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_146:
        LCALL   ??Subroutine83_0 & 0xFFFF
// 2146     // Skipping asduLen since it can be deduced from the RPC packet length.
// 2147     *pTmp++ = LO_UINT16(pMsg->macDestAddr);
??CrossCallReturnLabel_153:
        ADD     A,#0x11
        LCALL   ?Subroutine8 & 0xFFFF
// 2148     *pTmp++ = HI_UINT16(pMsg->macDestAddr);
// 2149     (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
??CrossCallReturnLabel_149:
        ADD     A,#0x13
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_140:
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,?V0 + 0
        ADD     A,#0x10
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_141:
        MOV     R4,A
        MOV     R5,#0x0
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 2150 
// 2151     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2152                                          MT_ZDO_MSG_CB_INCOMING, len, pBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R3,?V0 + 2
        MOV     R2,#-0x1
        MOV     R1,#0x45
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 2153 
// 2154     osal_mem_free(pBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
// 2155   }
// 2156 }
??MT_ZdoSendMsgCB_0:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock354

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond355 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
          CFI Conditional ??CrossCallReturnLabel_140
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond356 Using cfiCommon0
          CFI (cfiCond356) Function MT_ZdoSendMsgCB
          CFI (cfiCond356) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond356) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond356) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond356) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond356) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond356) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond356) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond356) CFA_SP SP+0
          CFI (cfiCond356) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker357 Using cfiCommon1
          CFI (cfiPicker357) NoFunction
          CFI (cfiPicker357) Picker
        MOV     DPL,A
        MOV     A,?V0 + 1
          CFI EndBlock cfiCond355
          CFI EndBlock cfiCond356
          CFI EndBlock cfiPicker357
        REQUIRE ??Subroutine80_0
        ; // Fall through to label ??Subroutine80_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine80_0:
          CFI Block cfiCond358 Using cfiCommon0
          CFI Function MT_ZdoJoinReq
          CFI Conditional ??CrossCallReturnLabel_137
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond359 Using cfiCommon0
          CFI (cfiCond359) Function MT_ZdoJoinReq
          CFI (cfiCond359) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond359) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond359) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond359) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond359) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond359) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond359) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond359) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond359) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond359) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond359) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond359) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond359) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond359) CFA_SP SP+0
          CFI (cfiCond359) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond360 Using cfiCommon0
          CFI (cfiCond360) Function MT_ZdoSendMsgCB
          CFI (cfiCond360) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond360) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond360) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond360) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond360) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond360) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond360) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond360) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond360) CFA_SP SP+0
          CFI (cfiCond360) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond361 Using cfiCommon0
          CFI (cfiCond361) Function MT_ZdoSendMsgCB
          CFI (cfiCond361) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond361) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond361) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond361) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond361) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond361) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond361) CFA_SP SP+0
          CFI (cfiCond361) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond362 Using cfiCommon0
          CFI (cfiCond362) Function MT_ZdoSendMsgCB
          CFI (cfiCond362) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond362) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond362) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond362) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond362) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond362) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond362) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond362) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond362) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond362) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond362) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond362) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond362) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond362) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond362) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond362) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond362) CFA_SP SP+0
          CFI (cfiCond362) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker363 Using cfiCommon1
          CFI (cfiPicker363) NoFunction
          CFI (cfiPicker363) Picker
        LCALL   ??Subroutine81_0 & 0xFFFF
??CrossCallReturnLabel_147:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond358
          CFI EndBlock cfiCond359
          CFI EndBlock cfiCond360
          CFI EndBlock cfiCond361
          CFI EndBlock cfiCond362
          CFI EndBlock cfiPicker363

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine54:
          CFI Block cfiCond364 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
          CFI Conditional ??CrossCallReturnLabel_144
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond365 Using cfiCommon0
          CFI (cfiCond365) Function MT_ZdoSendMsgCB
          CFI (cfiCond365) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond365) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond365) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond365) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond365) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond365) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond365) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond365) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond365) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond365) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond365) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond365) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond365) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond365) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond365) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond365) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond365) CFA_SP SP+0
          CFI (cfiCond365) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond366 Using cfiCommon0
          CFI (cfiCond366) Function MT_ZdoSendMsgCB
          CFI (cfiCond366) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond366) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond366) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond366) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond366) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond366) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond366) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond366) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond366) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond366) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond366) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond366) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond366) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond366) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond366) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond366) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond366) CFA_SP SP+0
          CFI (cfiCond366) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker367 Using cfiCommon1
          CFI (cfiPicker367) NoFunction
          CFI (cfiPicker367) Picker
        MOV     DPL,A
        MOV     A,?V0 + 1
          CFI EndBlock cfiCond364
          CFI EndBlock cfiCond365
          CFI EndBlock cfiCond366
          CFI EndBlock cfiPicker367
        REQUIRE ??Subroutine81_0
        ; // Fall through to label ??Subroutine81_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine81_0:
          CFI Block cfiCond368 Using cfiCommon0
          CFI Function MT_ZdoJoinReq
          CFI Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond369 Using cfiCommon0
          CFI (cfiCond369) Function MT_ZdoJoinReq
          CFI (cfiCond369) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_56
          CFI (cfiCond369) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond369) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond369) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond369) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond369) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond369) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond369) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond369) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond369) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond369) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond369) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond369) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond369) CFA_SP SP+0
          CFI (cfiCond369) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond370 Using cfiCommon0
          CFI (cfiCond370) Function MT_ZdoBeaconIndCB
          CFI (cfiCond370) Conditional ??CrossCallReturnLabel_142, ??CrossCallReturnLabel_133
          CFI (cfiCond370) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond370) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond370) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond370) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond370) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond370) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond370) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond370) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond370) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond370) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond370) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond370) CFA_SP SP+0
          CFI (cfiCond370) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond371 Using cfiCommon0
          CFI (cfiCond371) Function MT_ZdoBeaconIndCB
          CFI (cfiCond371) Conditional ??CrossCallReturnLabel_142, ??CrossCallReturnLabel_134
          CFI (cfiCond371) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond371) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond371) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond371) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond371) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond371) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond371) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond371) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond371) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond371) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond371) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond371) CFA_SP SP+0
          CFI (cfiCond371) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond372 Using cfiCommon0
          CFI (cfiCond372) Function MT_ZdoSendMsgCB
          CFI (cfiCond372) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_140
          CFI (cfiCond372) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond372) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond372) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond372) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond372) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond372) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond372) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond372) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond372) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond372) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond372) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond372) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond372) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond372) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond372) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond372) CFA_SP SP+0
          CFI (cfiCond372) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond373 Using cfiCommon0
          CFI (cfiCond373) Function MT_ZdoSendMsgCB
          CFI (cfiCond373) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_141
          CFI (cfiCond373) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond373) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond373) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond373) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond373) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond373) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond373) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond373) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond373) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond373) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond373) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond373) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond373) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond373) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond373) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond373) CFA_SP SP+0
          CFI (cfiCond373) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond374 Using cfiCommon0
          CFI (cfiCond374) Function MT_ZdoJoinReq
          CFI (cfiCond374) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_137
          CFI (cfiCond374) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond374) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond374) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond374) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond374) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond374) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond374) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond374) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond374) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond374) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond374) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond374) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond374) CFA_SP SP+0
          CFI (cfiCond374) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond375 Using cfiCommon0
          CFI (cfiCond375) Function MT_ZdoJoinReq
          CFI (cfiCond375) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_138
          CFI (cfiCond375) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond375) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond375) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond375) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond375) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond375) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond375) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond375) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond375) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond375) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond375) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond375) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond375) CFA_SP SP+0
          CFI (cfiCond375) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond376 Using cfiCommon0
          CFI (cfiCond376) Function MT_ZdoSendMsgCB
          CFI (cfiCond376) Conditional ??CrossCallReturnLabel_147, ??CrossCallReturnLabel_139
          CFI (cfiCond376) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond376) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond376) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond376) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond376) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond376) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond376) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond376) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond376) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond376) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond376) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond376) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond376) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond376) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond376) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond376) CFA_SP SP+0
          CFI (cfiCond376) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond377 Using cfiCommon0
          CFI (cfiCond377) Function MT_ZdoSendMsgCB
          CFI (cfiCond377) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond377) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond377) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond377) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond377) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond377) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond377) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond377) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond377) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond377) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond377) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond377) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond377) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond377) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond377) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond377) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond377) CFA_SP SP+0
          CFI (cfiCond377) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond378 Using cfiCommon0
          CFI (cfiCond378) Function MT_ZdoSendMsgCB
          CFI (cfiCond378) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond378) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond378) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond378) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond378) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond378) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond378) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond378) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond378) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond378) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond378) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond378) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond378) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond378) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond378) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond378) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond378) CFA_SP SP+0
          CFI (cfiCond378) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond379 Using cfiCommon0
          CFI (cfiCond379) Function MT_ZdoSendMsgCB
          CFI (cfiCond379) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond379) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond379) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond379) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond379) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond379) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond379) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond379) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond379) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond379) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond379) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond379) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond379) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond379) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond379) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond379) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond379) CFA_SP SP+0
          CFI (cfiCond379) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker380 Using cfiCommon1
          CFI (cfiPicker380) NoFunction
          CFI (cfiPicker380) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond368
          CFI EndBlock cfiCond369
          CFI EndBlock cfiCond370
          CFI EndBlock cfiCond371
          CFI EndBlock cfiCond372
          CFI EndBlock cfiCond373
          CFI EndBlock cfiCond374
          CFI EndBlock cfiCond375
          CFI EndBlock cfiCond376
          CFI EndBlock cfiCond377
          CFI EndBlock cfiCond378
          CFI EndBlock cfiCond379
          CFI EndBlock cfiPicker380

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond381 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond382 Using cfiCommon0
          CFI (cfiCond382) Function MT_ZdoSendMsgCB
          CFI (cfiCond382) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond382) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond382) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond382) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond382) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond382) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond382) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond382) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond382) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond382) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond382) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond382) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond382) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond382) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond382) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond382) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond382) CFA_SP SP+0
          CFI (cfiCond382) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker383 Using cfiCommon1
          CFI (cfiPicker383) NoFunction
          CFI (cfiPicker383) Picker
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_80:
        RET
          CFI EndBlock cfiCond381
          CFI EndBlock cfiCond382
          CFI EndBlock cfiPicker383

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
          CFI Block cfiCond384 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond385 Using cfiCommon0
          CFI (cfiCond385) Function MT_ZdoSendMsgCB
          CFI (cfiCond385) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_52
          CFI (cfiCond385) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond385) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond385) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond385) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond385) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond385) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond385) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond385) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond385) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond385) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond385) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond385) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond385) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond385) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond385) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond385) CFA_SP SP+0
          CFI (cfiCond385) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond386 Using cfiCommon0
          CFI (cfiCond386) Function MT_ZdoSendMsgCB
          CFI (cfiCond386) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_148
          CFI (cfiCond386) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond386) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond386) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond386) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond386) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond386) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond386) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond386) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond386) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond386) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond386) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond386) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond386) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond386) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond386) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond386) CFA_SP SP+0
          CFI (cfiCond386) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond387 Using cfiCommon0
          CFI (cfiCond387) Function MT_ZdoSendMsgCB
          CFI (cfiCond387) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_149
          CFI (cfiCond387) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond387) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond387) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond387) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond387) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond387) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond387) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond387) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond387) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond387) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond387) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond387) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond387) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond387) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond387) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond387) CFA_SP SP+0
          CFI (cfiCond387) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker388 Using cfiCommon1
          CFI (cfiPicker388) NoFunction
          CFI (cfiPicker388) Picker
        LCALL   ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        RET
          CFI EndBlock cfiCond384
          CFI EndBlock cfiCond385
          CFI EndBlock cfiCond386
          CFI EndBlock cfiCond387
          CFI EndBlock cfiPicker388

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine60:
          CFI Block cfiCond389 Using cfiCommon0
          CFI Function MT_ZdoJoinCnfCB
          CFI Conditional ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond390 Using cfiCommon0
          CFI (cfiCond390) Function MT_ZdoBeaconIndCB
          CFI (cfiCond390) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_51
          CFI (cfiCond390) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond390) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond390) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond390) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond390) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond390) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond390) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond390) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond390) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond390) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond390) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond390) CFA_SP SP+0
          CFI (cfiCond390) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond391 Using cfiCommon0
          CFI (cfiCond391) Function MT_ZdoSendMsgCB
          CFI (cfiCond391) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_52
          CFI (cfiCond391) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond391) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond391) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond391) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond391) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond391) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond391) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond391) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond391) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond391) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond391) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond391) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond391) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond391) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond391) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond391) CFA_SP SP+0
          CFI (cfiCond391) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond392 Using cfiCommon0
          CFI (cfiCond392) Function MT_ZdoSendMsgCB
          CFI (cfiCond392) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_148
          CFI (cfiCond392) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond392) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond392) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond392) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond392) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond392) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond392) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond392) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond392) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond392) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond392) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond392) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond392) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond392) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond392) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond392) CFA_SP SP+0
          CFI (cfiCond392) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond393 Using cfiCommon0
          CFI (cfiCond393) Function MT_ZdoSendMsgCB
          CFI (cfiCond393) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_149
          CFI (cfiCond393) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond393) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond393) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond393) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond393) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond393) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond393) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond393) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond393) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond393) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond393) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond393) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond393) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond393) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond393) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond393) CFA_SP SP+0
          CFI (cfiCond393) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker394 Using cfiCommon1
          CFI (cfiPicker394) NoFunction
          CFI (cfiPicker394) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond389
          CFI EndBlock cfiCond390
          CFI EndBlock cfiCond391
          CFI EndBlock cfiCond392
          CFI EndBlock cfiCond393
          CFI EndBlock cfiPicker394

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond395 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
          CFI Conditional ??CrossCallReturnLabel_148
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond396 Using cfiCommon0
          CFI (cfiCond396) Function MT_ZdoSendMsgCB
          CFI (cfiCond396) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond396) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond396) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond396) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond396) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond396) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond396) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond396) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond396) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond396) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond396) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond396) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond396) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond396) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond396) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond396) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond396) CFA_SP SP+0
          CFI (cfiCond396) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker397 Using cfiCommon1
          CFI (cfiPicker397) NoFunction
          CFI (cfiPicker397) Picker
        MOV     R0,A
        MOV     A,?V0 + 1
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_79:
        INC     R2
          CFI EndBlock cfiCond395
          CFI EndBlock cfiCond396
          CFI EndBlock cfiPicker397
        REQUIRE ??Subroutine82_0
        ; // Fall through to label ??Subroutine82_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine82_0:
          CFI Block cfiCond398 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
          CFI Conditional ??CrossCallReturnLabel_150
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond399 Using cfiCommon0
          CFI (cfiCond399) Function MT_ZdoSendMsgCB
          CFI (cfiCond399) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond399) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond399) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond399) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond399) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond399) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond399) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond399) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond399) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond399) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond399) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond399) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond399) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond399) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond399) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond399) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond399) CFA_SP SP+0
          CFI (cfiCond399) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond400 Using cfiCommon0
          CFI (cfiCond400) Function MT_ZdoSendMsgCB
          CFI (cfiCond400) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond400) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond400) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond400) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond400) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond400) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond400) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond400) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond400) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond400) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond400) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond400) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond400) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond400) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond400) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond400) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond400) CFA_SP SP+0
          CFI (cfiCond400) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker401 Using cfiCommon1
          CFI (cfiPicker401) NoFunction
          CFI (cfiPicker401) Picker
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
          CFI EndBlock cfiCond398
          CFI EndBlock cfiCond399
          CFI EndBlock cfiCond400
          CFI EndBlock cfiPicker401
        REQUIRE ??Subroutine83_0
        ; // Fall through to label ??Subroutine83_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine83_0:
          CFI Block cfiCond402 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
          CFI Conditional ??CrossCallReturnLabel_151
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond403 Using cfiCommon0
          CFI (cfiCond403) Function MT_ZdoSendMsgCB
          CFI (cfiCond403) Conditional ??CrossCallReturnLabel_152
          CFI (cfiCond403) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond403) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond403) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond403) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond403) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond403) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond403) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond403) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond403) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond403) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond403) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond403) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond403) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond403) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond403) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond403) CFA_SP SP+0
          CFI (cfiCond403) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond404 Using cfiCommon0
          CFI (cfiCond404) Function MT_ZdoSendMsgCB
          CFI (cfiCond404) Conditional ??CrossCallReturnLabel_153
          CFI (cfiCond404) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond404) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond404) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond404) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond404) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond404) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond404) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond404) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond404) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond404) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond404) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond404) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond404) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond404) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond404) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond404) CFA_SP SP+0
          CFI (cfiCond404) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond405 Using cfiCommon0
          CFI (cfiCond405) Function MT_ZdoSendMsgCB
          CFI (cfiCond405) Conditional ??CrossCallReturnLabel_150
          CFI (cfiCond405) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond405) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond405) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond405) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond405) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond405) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond405) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond405) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond405) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond405) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond405) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond405) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond405) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond405) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond405) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond405) CFA_SP SP+0
          CFI (cfiCond405) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond406 Using cfiCommon0
          CFI (cfiCond406) Function MT_ZdoSendMsgCB
          CFI (cfiCond406) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond406) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond406) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond406) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond406) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond406) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond406) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond406) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond406) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond406) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond406) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond406) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond406) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond406) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond406) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond406) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond406) CFA_SP SP+0
          CFI (cfiCond406) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond407 Using cfiCommon0
          CFI (cfiCond407) Function MT_ZdoSendMsgCB
          CFI (cfiCond407) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond407) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond407) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond407) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond407) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond407) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond407) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond407) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond407) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond407) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond407) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond407) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond407) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond407) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond407) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond407) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond407) CFA_SP SP+0
          CFI (cfiCond407) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker408 Using cfiCommon1
          CFI (cfiPicker408) NoFunction
          CFI (cfiPicker408) Picker
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_155:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0 + 0
        RET
          CFI EndBlock cfiCond402
          CFI EndBlock cfiCond403
          CFI EndBlock cfiCond404
          CFI EndBlock cfiCond405
          CFI EndBlock cfiCond406
          CFI EndBlock cfiCond407
          CFI EndBlock cfiPicker408

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond409 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_133
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond410 Using cfiCommon0
          CFI (cfiCond410) Function MT_ZdoBeaconIndCB
          CFI (cfiCond410) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_134
          CFI (cfiCond410) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond410) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond410) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond410) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond410) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond410) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond410) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond410) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond410) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond410) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond410) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond410) CFA_SP SP+0
          CFI (cfiCond410) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond411 Using cfiCommon0
          CFI (cfiCond411) Function MT_ZdoBeaconIndCB
          CFI (cfiCond411) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_135
          CFI (cfiCond411) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond411) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond411) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond411) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond411) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond411) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond411) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond411) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond411) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond411) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond411) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond411) CFA_SP SP+0
          CFI (cfiCond411) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond412 Using cfiCommon0
          CFI (cfiCond412) Function MT_ZdoBeaconIndCB
          CFI (cfiCond412) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_136
          CFI (cfiCond412) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond412) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond412) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond412) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond412) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond412) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond412) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond412) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond412) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond412) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond412) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond412) CFA_SP SP+0
          CFI (cfiCond412) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond413 Using cfiCommon0
          CFI (cfiCond413) Function MT_ZdoSendMsgCB
          CFI (cfiCond413) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_148
          CFI (cfiCond413) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond413) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond413) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond413) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond413) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond413) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond413) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond413) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond413) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond413) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond413) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond413) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond413) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond413) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond413) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond413) CFA_SP SP+0
          CFI (cfiCond413) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond414 Using cfiCommon0
          CFI (cfiCond414) Function MT_ZdoSendMsgCB
          CFI (cfiCond414) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_149
          CFI (cfiCond414) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond414) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond414) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond414) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond414) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond414) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond414) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond414) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond414) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond414) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond414) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond414) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond414) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond414) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond414) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond414) CFA_SP SP+0
          CFI (cfiCond414) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond415 Using cfiCommon0
          CFI (cfiCond415) Function MT_ZdoSendMsgCB
          CFI (cfiCond415) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_150
          CFI (cfiCond415) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond415) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond415) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond415) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond415) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond415) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond415) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond415) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond415) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond415) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond415) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond415) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond415) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond415) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond415) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond415) CFA_SP SP+0
          CFI (cfiCond415) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond416 Using cfiCommon0
          CFI (cfiCond416) Function MT_ZdoSendMsgCB
          CFI (cfiCond416) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_151
          CFI (cfiCond416) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond416) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond416) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond416) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond416) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond416) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond416) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond416) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond416) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond416) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond416) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond416) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond416) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond416) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond416) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond416) CFA_SP SP+0
          CFI (cfiCond416) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond417 Using cfiCommon0
          CFI (cfiCond417) Function MT_ZdoSendMsgCB
          CFI (cfiCond417) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_152
          CFI (cfiCond417) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond417) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond417) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond417) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond417) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond417) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond417) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond417) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond417) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond417) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond417) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond417) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond417) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond417) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond417) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond417) CFA_SP SP+0
          CFI (cfiCond417) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond418 Using cfiCommon0
          CFI (cfiCond418) Function MT_ZdoSendMsgCB
          CFI (cfiCond418) Conditional ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_153
          CFI (cfiCond418) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond418) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond418) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond418) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond418) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond418) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond418) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond418) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond418) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond418) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond418) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond418) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond418) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond418) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond418) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond418) CFA_SP SP+0
          CFI (cfiCond418) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker419 Using cfiCommon1
          CFI (cfiPicker419) NoFunction
          CFI (cfiPicker419) Picker
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_157:
        RET
          CFI EndBlock cfiCond409
          CFI EndBlock cfiCond410
          CFI EndBlock cfiCond411
          CFI EndBlock cfiCond412
          CFI EndBlock cfiCond413
          CFI EndBlock cfiCond414
          CFI EndBlock cfiCond415
          CFI EndBlock cfiCond416
          CFI EndBlock cfiCond417
          CFI EndBlock cfiCond418
          CFI EndBlock cfiPicker419

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine61:
          CFI Block cfiCond420 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond421 Using cfiCommon0
          CFI (cfiCond421) Function MT_ZdoBeaconIndCB
          CFI (cfiCond421) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_26
          CFI (cfiCond421) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond421) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond421) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond421) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond421) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond421) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond421) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond421) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond421) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond421) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond421) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond421) CFA_SP SP+0
          CFI (cfiCond421) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond422 Using cfiCommon0
          CFI (cfiCond422) Function MT_ZdoBeaconIndCB
          CFI (cfiCond422) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_23
          CFI (cfiCond422) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond422) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond422) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond422) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond422) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond422) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond422) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond422) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond422) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond422) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond422) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond422) CFA_SP SP+0
          CFI (cfiCond422) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond423 Using cfiCommon0
          CFI (cfiCond423) Function MT_ZdoBeaconIndCB
          CFI (cfiCond423) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_24
          CFI (cfiCond423) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond423) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond423) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond423) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond423) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond423) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond423) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond423) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond423) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond423) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond423) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond423) CFA_SP SP+0
          CFI (cfiCond423) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond424 Using cfiCommon0
          CFI (cfiCond424) Function MT_ZdoBeaconIndCB
          CFI (cfiCond424) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_21
          CFI (cfiCond424) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond424) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond424) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond424) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond424) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond424) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond424) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond424) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond424) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond424) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond424) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond424) CFA_SP SP+0
          CFI (cfiCond424) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond425 Using cfiCommon0
          CFI (cfiCond425) Function MT_ZdoBeaconIndCB
          CFI (cfiCond425) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_22
          CFI (cfiCond425) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond425) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond425) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond425) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond425) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond425) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond425) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond425) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond425) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond425) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond425) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond425) CFA_SP SP+0
          CFI (cfiCond425) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond426 Using cfiCommon0
          CFI (cfiCond426) Function MT_ZdoBeaconIndCB
          CFI (cfiCond426) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_15
          CFI (cfiCond426) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond426) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond426) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond426) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond426) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond426) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond426) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond426) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond426) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond426) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond426) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond426) CFA_SP SP+0
          CFI (cfiCond426) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond427 Using cfiCommon0
          CFI (cfiCond427) Function MT_ZdoBeaconIndCB
          CFI (cfiCond427) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_86, ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_16
          CFI (cfiCond427) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond427) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond427) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond427) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond427) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond427) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond427) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond427) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond427) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond427) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond427) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond427) CFA_SP SP+0
          CFI (cfiCond427) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond428 Using cfiCommon0
          CFI (cfiCond428) Function MT_ZdoBeaconIndCB
          CFI (cfiCond428) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_133
          CFI (cfiCond428) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond428) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond428) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond428) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond428) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond428) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond428) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond428) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond428) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond428) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond428) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond428) CFA_SP SP+0
          CFI (cfiCond428) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond429 Using cfiCommon0
          CFI (cfiCond429) Function MT_ZdoBeaconIndCB
          CFI (cfiCond429) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_134
          CFI (cfiCond429) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond429) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond429) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond429) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond429) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond429) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond429) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond429) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond429) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond429) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond429) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond429) CFA_SP SP+0
          CFI (cfiCond429) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond430 Using cfiCommon0
          CFI (cfiCond430) Function MT_ZdoBeaconIndCB
          CFI (cfiCond430) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_135
          CFI (cfiCond430) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond430) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond430) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond430) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond430) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond430) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond430) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond430) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond430) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond430) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond430) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond430) CFA_SP SP+0
          CFI (cfiCond430) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond431 Using cfiCommon0
          CFI (cfiCond431) Function MT_ZdoBeaconIndCB
          CFI (cfiCond431) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_136
          CFI (cfiCond431) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond431) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond431) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond431) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond431) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond431) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond431) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond431) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond431) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond431) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond431) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond431) CFA_SP SP+0
          CFI (cfiCond431) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond432 Using cfiCommon0
          CFI (cfiCond432) Function MT_ZdoSendMsgCB
          CFI (cfiCond432) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_148
          CFI (cfiCond432) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond432) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond432) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond432) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond432) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond432) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond432) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond432) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond432) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond432) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond432) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond432) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond432) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond432) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond432) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond432) CFA_SP SP+0
          CFI (cfiCond432) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond433 Using cfiCommon0
          CFI (cfiCond433) Function MT_ZdoSendMsgCB
          CFI (cfiCond433) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_149
          CFI (cfiCond433) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond433) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond433) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond433) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond433) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond433) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond433) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond433) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond433) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond433) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond433) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond433) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond433) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond433) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond433) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond433) CFA_SP SP+0
          CFI (cfiCond433) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond434 Using cfiCommon0
          CFI (cfiCond434) Function MT_ZdoSendMsgCB
          CFI (cfiCond434) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_150
          CFI (cfiCond434) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond434) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond434) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond434) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond434) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond434) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond434) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond434) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond434) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond434) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond434) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond434) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond434) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond434) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond434) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond434) CFA_SP SP+0
          CFI (cfiCond434) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond435 Using cfiCommon0
          CFI (cfiCond435) Function MT_ZdoSendMsgCB
          CFI (cfiCond435) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_151
          CFI (cfiCond435) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond435) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond435) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond435) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond435) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond435) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond435) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond435) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond435) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond435) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond435) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond435) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond435) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond435) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond435) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond435) CFA_SP SP+0
          CFI (cfiCond435) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond436 Using cfiCommon0
          CFI (cfiCond436) Function MT_ZdoSendMsgCB
          CFI (cfiCond436) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_152
          CFI (cfiCond436) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond436) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond436) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond436) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond436) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond436) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond436) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond436) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond436) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond436) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond436) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond436) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond436) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond436) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond436) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond436) CFA_SP SP+0
          CFI (cfiCond436) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond437 Using cfiCommon0
          CFI (cfiCond437) Function MT_ZdoSendMsgCB
          CFI (cfiCond437) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_155, ??CrossCallReturnLabel_153
          CFI (cfiCond437) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond437) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond437) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond437) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond437) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond437) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond437) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond437) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond437) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond437) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond437) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond437) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond437) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond437) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond437) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond437) CFA_SP SP+0
          CFI (cfiCond437) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker438 Using cfiCommon1
          CFI (cfiPicker438) NoFunction
          CFI (cfiPicker438) Picker
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
        RET
          CFI EndBlock cfiCond420
          CFI EndBlock cfiCond421
          CFI EndBlock cfiCond422
          CFI EndBlock cfiCond423
          CFI EndBlock cfiCond424
          CFI EndBlock cfiCond425
          CFI EndBlock cfiCond426
          CFI EndBlock cfiCond427
          CFI EndBlock cfiCond428
          CFI EndBlock cfiCond429
          CFI EndBlock cfiCond430
          CFI EndBlock cfiCond431
          CFI EndBlock cfiCond432
          CFI EndBlock cfiCond433
          CFI EndBlock cfiCond434
          CFI EndBlock cfiCond435
          CFI EndBlock cfiCond436
          CFI EndBlock cfiCond437
          CFI EndBlock cfiPicker438

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoInit?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoCommandProcessing?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoNWKAddressRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNWKAddressRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoIEEEAddrRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoIEEEAddrRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoNodeDescRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNodeDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoPowerDescRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoPowerDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoSimpleDescRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoSimpleDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoActiveEpRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoActiveEpRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoMatchDescRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoMatchDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoComplexDescRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoComplexDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoUserDescRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoUserDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoEndDevAnnce?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoEndDevAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoUserDescSet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoUserDescSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoServiceDiscRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoServiceDiscRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoEndDevBindRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoEndDevBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoBindRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoUnbindRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoUnbindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoStartupFromApp?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoStartupFromApp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoNetworkDiscoveryReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNetworkDiscoveryReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoJoinReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoJoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoNwkDiscoveryCnfCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNwkDiscoveryCnfCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoBeaconIndCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoBeaconIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoJoinCnfCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoJoinCnfCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoRegisterForZDOMsg?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoRegisterForZDOMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoRemoveRegisteredCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoRemoveRegisteredCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_ZdoSendMsgCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoSendMsgCB

        END
// 2157 
// 2158 #endif   /*ZDO Command Processing in MT*/
// 2159 /***************************************************************************************************
// 2160 ***************************************************************************************************/
// 
// 3 270 bytes in segment BANKED_CODE
//   156 bytes in segment BANK_RELAYS
//     6 bytes in segment XDATA_Z
// 
// 3 426 bytes of CODE  memory
//     6 bytes of XDATA memory
//
//Errors: none
//Warnings: none
