///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            07/Dec/2016  15:59:35 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Components\osal\common\OSAL_Clock.c       /
//    Command line       =  -f E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530D /
//                          B\..\..\..\Tools\CC2530DB\f8wEndev.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f E:\Lib\micro-electromechan /
//                          ical\ ±—”\ZStack-CC2530-2.5.1a\Projects\zstack\Sa /
//                          mples\02π‚’’\CC2530DB\..\..\..\Tools\CC2530DB\f8w /
//                          Config.cfg (-DZIGBEEPRO -DSECURE=0                /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00100000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\Lib\micro-electromechan /
//                          ical\ ±—”\ZStack-CC2530-2.5.1a\Components\osal\co /
//                          mmon\OSAL_Clock.c -D NWK_AUTO_POLL -D ZTOOL_P1    /
//                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC          /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\E /
//                          ndDeviceEB\List\ -lA E:\Lib\micro-electromechanic /
//                          al\ ±—”\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\02π‚’’\CC2530DB\EndDeviceEB\List\             /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\E /
//                          ndDeviceEB\Obj\ -e --no_code_motion --debug       /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\  /
//                          -I E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530D /
//                          B\..\Source\ -I E:\Lib\micro-electromechanical\ ± /
//                          —”\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          2π‚’’\CC2530DB\..\..\..\ZMain\TI2530DB\ -I        /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\hal\include\ -I          /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\hal\target\CC2530EB\ -I  /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\mac\include\ -I          /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\mac\high_level\ -I       /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\mac\low_level\srf04\ -I  /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\mac\low_level\srf04\sing /
//                          le_chip\ -I E:\Lib\micro-electromechanical\ ±—”\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\02π‚’ /
//                          ’\CC2530DB\..\..\..\..\..\Components\mt\ -I       /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\osal\include\ -I         /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\services\saddr\ -I       /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\services\sdata\ -I       /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\af\ -I             /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\nwk\ -I            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sapi\ -I           /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sec\ -I            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sys\ -I            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\zdo\ -I            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\zmac\ -I                 /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\zmac\f8w\ -Ohz           /
//                          --require_prototypes                              /
//    List file          =  E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\E /
//                          ndDeviceEB\List\OSAL_Clock.s51                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME OSAL_Clock

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?L_SHL
        EXTERN ?L_SUB_X
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_SHR
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        FUNCTION ??monthLength?relay,0203H
        PUBLIC ??osalTimeUpdate?relay
        FUNCTION ??osalTimeUpdate?relay,0203H
        PUBLIC ??osal_ConvertUTCSecs?relay
        FUNCTION ??osal_ConvertUTCSecs?relay,0203H
        PUBLIC ??osal_ConvertUTCTime?relay
        FUNCTION ??osal_ConvertUTCTime?relay,0203H
        PUBLIC ??osal_getClock?relay
        FUNCTION ??osal_getClock?relay,0203H
        PUBLIC ??osal_setClock?relay
        FUNCTION ??osal_setClock?relay,0203H
        PUBLIC OSAL_timeSeconds
        PUBWEAK _A_IEN0
        PUBWEAK __Constant_15180
        PUBWEAK __Constant_3c
        PUBWEAK __Constant_e10
        FUNCTION monthLength,0203H
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC osalTimeUpdate
        FUNCTION osalTimeUpdate,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC osal_ConvertUTCSecs
        FUNCTION osal_ConvertUTCSecs,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC osal_ConvertUTCTime
        FUNCTION osal_ConvertUTCTime,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC osal_getClock
        FUNCTION osal_getClock,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_setClock
        FUNCTION osal_setClock,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
macMcuPrecisionCount SYMBOL "macMcuPrecisionCount"
??macMcuPrecisionCount?relay SYMBOL "?relay", macMcuPrecisionCount
osalTimerUpdate     SYMBOL "osalTimerUpdate"
??osalTimerUpdate?relay SYMBOL "?relay", osalTimerUpdate
osalTimeUpdate      SYMBOL "osalTimeUpdate"
??osalTimeUpdate?relay SYMBOL "?relay", osalTimeUpdate
osal_ConvertUTCSecs SYMBOL "osal_ConvertUTCSecs"
??osal_ConvertUTCSecs?relay SYMBOL "?relay", osal_ConvertUTCSecs
osal_ConvertUTCTime SYMBOL "osal_ConvertUTCTime"
??osal_ConvertUTCTime?relay SYMBOL "?relay", osal_ConvertUTCTime
osal_getClock       SYMBOL "osal_getClock"
??osal_getClock?relay SYMBOL "?relay", osal_getClock
osal_setClock       SYMBOL "osal_setClock"
??osal_setClock?relay SYMBOL "?relay", osal_setClock

        EXTERN ??macMcuPrecisionCount?relay
        FUNCTION ??macMcuPrecisionCount?relay,00H
        EXTERN ??osalTimerUpdate?relay
        FUNCTION ??osalTimerUpdate?relay,00H
        EXTERN macMcuPrecisionCount
        FUNCTION macMcuPrecisionCount,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalMcuDivide31By16To16
        FUNCTION osalMcuDivide31By16To16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalTimerUpdate
        FUNCTION osalTimerUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530-2.5.1a\Components\osal\common\OSAL_Clock.c
//    1 /******************************************************************************
//    2   Filename:       OSAL_Clock.c
//    3   Revised:        $Date: 2012-03-02 15:52:01 -0800 (Fri, 02 Mar 2012) $
//    4   Revision:       $Revision: 29608 $
//    5 
//    6   Description:    OSAL Clock definition and manipulation functions.
//    7 
//    8   Copyright 2008-2012 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 ******************************************************************************/
//   38 
//   39 /*********************************************************************
//   40  * INCLUDES
//   41  */
//   42 
//   43 #include "comdef.h"
//   44 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1
//   45 #include "OSAL.h"
//   46 #include "OSAL_Clock.h"
//   47 
//   48 /*********************************************************************
//   49  * MACROS
//   50  */
//   51 
//   52 #define	YearLength(yr)	((uint16)(IsLeapYear(yr) ? 366 : 365))
//   53 
//   54 /*********************************************************************
//   55  * CONSTANTS
//   56  */
//   57 
//   58 #define	BEGYEAR  2000     //  UTC started at 00:00:00 January 1, 2000
//   59 
//   60 #define	DAY      86400UL  // 24 hours * 60 minutes * 60 seconds
//   61 
//   62 /*********************************************************************
//   63  * TYPEDEFS
//   64  */
//   65 
//   66 /*********************************************************************
//   67  * GLOBAL VARIABLES
//   68  */
//   69 
//   70 /*********************************************************************
//   71  * EXTERNAL VARIABLES
//   72  */
//   73 
//   74 /*********************************************************************
//   75  * EXTERNAL FUNCTIONS
//   76  */
//   77 extern uint32 macMcuPrecisionCount(void);
//   78 
//   79 #if (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533)
//   80 
//   81   /*  This function is used to divide a 31 bit dividend by a 16 bit
//   82    *  divisor and return a packed 16 bit quotient and 16 bit
//   83    *  remainder.
//   84    *
//   85    *  Note: This routine takes ~25.6us @32MHz. With C overhead, the
//   86    *        time is ~32us.
//   87    *
//   88    *  dividend - 31 bit dividend.
//   89    *  divisor - 16 bit divisor.
//   90    *
//   91    *  return - MSW divisor; LSW quotient
//   92    */
//   93   extern __near_func uint32 osalMcuDivide31By16To16( uint32 dividend, uint16 divisor );
//   94 
//   95   #define CONVERT_320US_TO_MS_ELAPSED_REMAINDER( x, y, z ) st( \ 
//   96                                                                \ 
//   97     /* The 16 bit quotient is in MSW and */                    \ 
//   98     /* the 16 bit remainder is in LSW. */                      \ 
//   99     x = osalMcuDivide31By16To16( x, 25 );                      \ 
//  100                                                                \ 
//  101     /* Add quotient to y */                                    \ 
//  102     y += (x >> 16);                                            \ 
//  103                                                                \ 
//  104     /* Copy remainder to z */                                  \ 
//  105     z = (uint16)(x & 0x0FFFF);                                 \ 
//  106   )
//  107 
//  108 #else /* (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533) */
//  109 
//  110   #define CONVERT_320US_TO_MS_ELAPSED_REMAINDER( x, y, z ) st( \ 
//  111     y += x / 25;                                               \ 
//  112     z = x % 25;                                                \ 
//  113   )
//  114 
//  115 #endif /* (defined HAL_MCU_CC2430) || (defined HAL_MCU_CC2530) || (defined HAL_MCU_CC2533) */
//  116 
//  117 /*********************************************************************
//  118  * LOCAL VARIABLES
//  119  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  120 static uint32 previousMacTimerTick = 0;
previousMacTimerTick:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  121 static uint16 remUsTicks = 0;
remUsTicks:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  122 static uint16 timeMSec = 0;
timeMSec:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  123 
//  124 // number of seconds since 0 hrs, 0 minutes, 0 seconds, on the
//  125 // 1st of January 2000 UTC

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  126 UTCTime OSAL_timeSeconds = 0;
OSAL_timeSeconds:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  127 
//  128 /*********************************************************************
//  129  * LOCAL FUNCTION PROTOTYPES
//  130  */
//  131 static uint8 monthLength( uint8 lpyr, uint8 mon );
//  132 
//  133 static void osalClockUpdate( uint16 elapsedMSec );
//  134 
//  135 /*********************************************************************
//  136  * FUNCTIONS
//  137  *********************************************************************/
//  138 
//  139 /*********************************************************************
//  140  * @fn      osalTimeUpdate
//  141  *
//  142  * @brief   Uses the free running rollover count of the MAC backoff timer;
//  143  *          this timer runs freely with a constant 320 usec interval.  The
//  144  *          count of 320-usec ticks is converted to msecs and used to update
//  145  *          the OSAL clock and Timers by invoking osalClockUpdate() and
//  146  *          osalTimerUpdate().  This function is intended to be invoked
//  147  *          from the background, not interrupt level.
//  148  *
//  149  * @param   None.
//  150  *
//  151  * @return  None.
//  152  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  153 void osalTimeUpdate( void )
osalTimeUpdate:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function osalTimeUpdate
        CODE
//  154 {
        FUNCALL osalTimeUpdate, macMcuPrecisionCount
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalTimeUpdate, osalMcuDivide31By16To16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osalTimeUpdate, osalTimerUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  155   halIntState_t intState;
//  156   uint32 tmp;
//  157   uint32 ticks320us;
//  158   uint16 elapsedMSec = 0;
//  159 
//  160   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     A,0xa8
        MOV     R6,A
        CLR     0xa8.7
//  161   // Get the free-running count of 320us timer ticks
//  162   tmp = macMcuPrecisionCount();
        ; Setup parameters for call to function macMcuPrecisionCount
        LCALL   ??macMcuPrecisionCount?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  163   HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R6
        MOV     C,0xE0 /* A   */.7
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  164   
//  165   if ( tmp != previousMacTimerTick )
        MOV     DPTR,#previousMacTimerTick
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JNZ     $+5
        LJMP    ??osalTimeUpdate_0 & 0xFFFF
//  166   {
//  167     // Calculate the elapsed ticks of the free-running timer.
//  168     ticks320us = (tmp - previousMacTimerTick) & 0xffffffffu;
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     DPTR,#previousMacTimerTick
        MOV     R0,#?V0 + 4
        LCALL   ?L_SUB_X
//  169 
//  170     // Store the MAC Timer tick count for the next time through this function.
//  171     previousMacTimerTick = tmp;
        MOV     DPTR,#previousMacTimerTick
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  172     
//  173     // update converted number with remaining ticks from loop and the
//  174     // accumulated remainder from loop
//  175     tmp = (ticks320us * 8) + remUsTicks;
//  176 
//  177     // Convert the 320 us ticks into milliseconds and a remainder
//  178     CONVERT_320US_TO_MS_ELAPSED_REMAINDER( tmp, elapsedMSec, remUsTicks );
        ; Setup parameters for call to function osalMcuDivide31By16To16
        MOV     ?V0 + 0,#0x19
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,#0x3
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     DPTR,#remUsTicks
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_ADD
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   osalMcuDivide31By16To16 & 0xFFFF
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPTR,#remUsTicks
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  179 
//  180     // Update OSAL Clock and Timers
//  181     if ( elapsedMSec )
        MOV     A,R4
        ORL     A,R5
        JZ      ??osalTimeUpdate_0
//  182     {
//  183       osalClockUpdate( elapsedMSec );
        MOV     DPTR,#timeMSec
        MOVX    A,@DPTR
        ADD     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOVX    @DPTR,A
        MOV     DPTR,#timeMSec
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x18
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x3
        JC      ??osalTimeUpdate_1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     DPTR,#OSAL_timeSeconds
        MOV     R0,#?V0 + 0
        LCALL   ?L_ADD_TO_X
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?US_DIV_MOD
        MOV     DPTR,#timeMSec
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  184       osalTimerUpdate( elapsedMSec );
??osalTimeUpdate_1:
        ; Setup parameters for call to function osalTimerUpdate
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        LCALL   ??osalTimerUpdate?relay
//  185     }
//  186   }
//  187 }
??osalTimeUpdate_0:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
        REQUIRE _A_IEN0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function osalTimeUpdate
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function osalTimeUpdate
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+0
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        MOV     DPTR,#timeMSec
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#-0x18
        MOV     R3,#0x3
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3
//  188 
//  189 /*********************************************************************
//  190  * @fn      osalClockUpdate
//  191  *
//  192  * @brief   Updates the OSAL Clock time with elapsed milliseconds.
//  193  *
//  194  * @param   elapsedMSec - elapsed milliseconds
//  195  *
//  196  * @return  none
//  197  */
//  198 static void osalClockUpdate( uint16 elapsedMSec )
//  199 {
//  200   // Add elapsed milliseconds to the saved millisecond portion of time
//  201   timeMSec += elapsedMSec;
//  202 
//  203   // Roll up milliseconds to the number of seconds
//  204   if ( timeMSec >= 1000 )
//  205   {
//  206     OSAL_timeSeconds += timeMSec / 1000;
//  207     timeMSec = timeMSec % 1000;
//  208   }
//  209 }
//  210 
//  211 /*********************************************************************
//  212  * @fn      osal_setClock
//  213  *
//  214  * @brief   Set the new time.  This will only set the seconds portion
//  215  *          of time and doesn't change the factional second counter.
//  216  *
//  217  * @param   newTime - number of seconds since 0 hrs, 0 minutes,
//  218  *                    0 seconds, on the 1st of January 2000 UTC
//  219  *
//  220  * @return  none
//  221  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  222 void osal_setClock( UTCTime newTime )
osal_setClock:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function osal_setClock
        CODE
//  223 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  224   OSAL_timeSeconds = newTime;
        MOV     DPTR,#OSAL_timeSeconds
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  225 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  226 
//  227 /*********************************************************************
//  228  * @fn      osal_getClock
//  229  *
//  230  * @brief   Gets the current time.  This will only return the seconds
//  231  *          portion of time and doesn't include the factional second
//  232  *          counter.
//  233  *
//  234  * @param   none
//  235  *
//  236  * @return  number of seconds since 0 hrs, 0 minutes, 0 seconds,
//  237  *          on the 1st of January 2000 UTC
//  238  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  239 UTCTime osal_getClock( void )
osal_getClock:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function osal_getClock
        CODE
//  240 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  241   return ( OSAL_timeSeconds );
        MOV     DPTR,#OSAL_timeSeconds
        LCALL   ?XLOAD_R2345
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock5
//  242 }
//  243 
//  244 /*********************************************************************
//  245  * @fn      osal_ConvertUTCTime
//  246  *
//  247  * @brief   Converts UTCTime to UTCTimeStruct
//  248  *
//  249  * @param   tm - pointer to breakdown struct
//  250  *
//  251  * @param   secTime - number of seconds since 0 hrs, 0 minutes,
//  252  *          0 seconds, on the 1st of January 2000 UTC
//  253  *
//  254  * @return  none
//  255  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  256 void osal_ConvertUTCTime( UTCTimeStruct *tm, UTCTime secTime )
osal_ConvertUTCTime:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function osal_ConvertUTCTime
        CODE
//  257 {
        FUNCALL osal_ConvertUTCTime, monthLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_ConvertUTCTime, monthLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
//  258   // calculate the time less than a day - hours, minutes, seconds
//  259   {
//  260     uint32 day = secTime % DAY;
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     DPTR,#__Constant_15180
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?UL_DIV_MOD
//  261     tm->seconds = day % 60UL;
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
        MOV     ?V0 + 2,?V0 + 10
        MOV     ?V0 + 3,?V0 + 11
        MOV     DPTR,#__Constant_3c
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 12
        LCALL   ?UL_DIV_MOD
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 12
        MOVX    @DPTR,A
//  262     tm->minutes = (day % 3600UL) / 60UL;
        MOV     ?V0 + 12,?V0 + 8
        MOV     ?V0 + 13,?V0 + 9
        MOV     ?V0 + 14,?V0 + 10
        MOV     ?V0 + 15,?V0 + 11
        MOV     DPTR,#__Constant_e10
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 12
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_3c
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 12
        LCALL   ?UL_DIV_MOD
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  263     tm->hour = day / 3600UL;
        MOV     DPTR,#__Constant_e10
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 8
        MOVX    @DPTR,A
//  264   }
//  265 
//  266   // Fill in the calendar - day, month, year
//  267   {
//  268     uint16 numDays = secTime / DAY;
        MOV     DPTR,#__Constant_15180
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//  269     tm->year = BEGYEAR;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        SJMP    ??osal_ConvertUTCTime_0
//  270     while ( numDays >= YearLength( tm->year ) )
//  271     {
//  272       numDays -= YearLength( tm->year );
??osal_ConvertUTCTime_1:
        MOV     R0,#0x6d
??osal_ConvertUTCTime_2:
        MOV     A,?V0 + 2
        SUBB    A,R0
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        SUBB    A,#0x1
        MOV     ?V0 + 3,A
//  273       tm->year++;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
??osal_ConvertUTCTime_0:
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??osal_ConvertUTCTime_3
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??osal_ConvertUTCTime_4
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x3
        JNZ     ??osal_ConvertUTCTime_4
??osal_ConvertUTCTime_3:
        MOV     R0,#0x6e
        SJMP    ??osal_ConvertUTCTime_5
??osal_ConvertUTCTime_4:
        MOV     R0,#0x6d
??osal_ConvertUTCTime_5:
        MOV     A,?V0 + 2
        SUBB    A,R0
        MOV     A,?V0 + 3
        SUBB    A,#0x1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JC      ??osal_ConvertUTCTime_6
        LCALL   ??Subroutine5_0 & 0xFFFF
//  274     }
??CrossCallReturnLabel_11:
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??osal_ConvertUTCTime_7
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??osal_ConvertUTCTime_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x3
        JZ      $+5
        LJMP    ??osal_ConvertUTCTime_1 & 0xFFFF
??osal_ConvertUTCTime_7:
        MOV     R0,#0x6e
        LJMP    ??osal_ConvertUTCTime_2 & 0xFFFF
//  275 
//  276     tm->month = 0;
??osal_ConvertUTCTime_6:
        CLR     A
        SJMP    ??osal_ConvertUTCTime_8
//  277     while ( numDays >= monthLength( IsLeapYear( tm->year ), tm->month ) )
//  278     {
//  279       numDays -= monthLength( IsLeapYear( tm->year ), tm->month );
??osal_ConvertUTCTime_9:
        MOV     R1,#0x0
??osal_ConvertUTCTime_10:
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function monthLength
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ??monthLength?relay
        MOV     A,R1
        MOV     R0,A
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,R0
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        SUBB    A,#0x0
        MOV     ?V0 + 3,A
//  280       tm->month++;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        INC     A
??osal_ConvertUTCTime_8:
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??osal_ConvertUTCTime_11
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??osal_ConvertUTCTime_12
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x3
        JNZ     ??osal_ConvertUTCTime_12
??osal_ConvertUTCTime_11:
        MOV     R1,#0x1
        SJMP    ??osal_ConvertUTCTime_13
??osal_ConvertUTCTime_12:
        MOV     R1,#0x0
??osal_ConvertUTCTime_13:
        ; Setup parameters for call to function monthLength
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ??monthLength?relay
        MOV     A,R1
        MOV     R0,A
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,R0
        MOV     A,?V0 + 3
        SUBB    A,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JC      ??osal_ConvertUTCTime_14
        LCALL   ??Subroutine4_0 & 0xFFFF
//  281     }
??CrossCallReturnLabel_12:
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??osal_ConvertUTCTime_15
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??osal_ConvertUTCTime_9 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x3
        JZ      $+5
        LJMP    ??osal_ConvertUTCTime_9 & 0xFFFF
??osal_ConvertUTCTime_15:
        MOV     R1,#0x1
        LJMP    ??osal_ConvertUTCTime_10 & 0xFFFF
//  282 
//  283     tm->day = numDays;
??osal_ConvertUTCTime_14:
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  284   }
//  285 }
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function osal_ConvertUTCTime
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function osal_ConvertUTCTime
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+0
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function osal_ConvertUTCTime
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function osal_ConvertUTCTime
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+0
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function osal_ConvertUTCTime
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+0
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        INC     DPTR
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function osal_ConvertUTCTime
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function osal_ConvertUTCTime
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+0
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function osal_ConvertUTCTime
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+0
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function osal_ConvertUTCTime
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+0
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#-0x70
        MOV     R3,#0x1
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
//  286 
//  287 /*********************************************************************
//  288  * @fn      monthLength
//  289  *
//  290  * @param   lpyr - 1 for leap year, 0 if not
//  291  *
//  292  * @param   mon - 0 - 11 (jan - dec)
//  293  *
//  294  * @return  number of days in specified month
//  295  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  296 static uint8 monthLength( uint8 lpyr, uint8 mon )
monthLength:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function monthLength
        CODE
//  297 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  298   uint8 days = 31;
        MOV     R1,#0x1f
//  299 
//  300 	if ( mon == 1 ) // feb
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??monthLength_0
//  301   {
//  302 		days = ( 28 + lpyr );
        MOV     A,#0x1c
        ADD     A,R0
        MOV     R1,A
        SJMP    ??monthLength_1
//  303   }
//  304   else
//  305   {
//  306     if ( mon > 6 ) // aug-dec
??monthLength_0:
        MOV     A,R2
        CLR     C
        SUBB    A,#0x7
        JC      ??monthLength_2
//  307     {
//  308       mon--;
        DEC     R2
//  309     }
//  310 
//  311     if ( mon & 1 )
??monthLength_2:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??monthLength_1
//  312     {
//  313       days = 30;
        DEC     R1
//  314     }
//  315   }
//  316 
//  317 	return ( days );
??monthLength_1:
        LJMP    ?BRET
          CFI EndBlock cfiBlock19
//  318 }
//  319 
//  320 /*********************************************************************
//  321  * @fn      osal_ConvertUTCSecs
//  322  *
//  323  * @brief   Converts a UTCTimeStruct to UTCTime
//  324  *
//  325  * @param   tm - pointer to provided struct
//  326  *
//  327  * @return  number of seconds since 00:00:00 on 01/01/2000 (UTC)
//  328  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  329 UTCTime osal_ConvertUTCSecs( UTCTimeStruct *tm )
osal_ConvertUTCSecs:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function osal_ConvertUTCSecs
        CODE
//  330 {
        FUNCALL osal_ConvertUTCSecs, monthLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  331   uint32 seconds;
//  332 
//  333   /* Seconds for the partial day */
//  334   seconds = (((tm->hour * 60UL) + tm->minutes) * 60UL) + tm->seconds;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     DPTR,#__Constant_3c
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?L_ADD
        MOV     DPTR,#__Constant_3c
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?L_ADD
//  335 
//  336   /* Account for previous complete days */
//  337   {
//  338     /* Start with complete days in current month */
//  339     uint16 days = tm->day;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
//  340 
//  341     /* Next, complete months in current year */
//  342     {
//  343       int8 month = tm->month;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        SJMP    ??osal_ConvertUTCSecs_0
//  344       while ( --month >= 0 )
//  345       {
//  346         days += monthLength( IsLeapYear( tm->year ), month );
??osal_ConvertUTCSecs_1:
        MOV     R1,#0x0
??osal_ConvertUTCSecs_2:
        ; Setup parameters for call to function monthLength
        MOV     R2,?V0 + 2
        LCALL   ??monthLength?relay
        MOV     A,R1
        MOV     R0,A
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
??osal_ConvertUTCSecs_0:
        MOV     A,#-0x1
        ADD     A,?V0 + 2
        MOV     ?V0 + 2,A
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JC      ??osal_ConvertUTCSecs_3
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#-0x70
        MOV     R3,#0x1
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 9,R3
        MOV     A,R2
        ORL     A,?V0 + 9
        JZ      ??osal_ConvertUTCSecs_4
        LCALL   ?Subroutine0 & 0xFFFF
//  347       }
//  348     }
??CrossCallReturnLabel_4:
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 9,R3
        MOV     A,R2
        ORL     A,?V0 + 9
        JZ      ??osal_ConvertUTCSecs_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x3
        JNZ     ??osal_ConvertUTCSecs_1
??osal_ConvertUTCSecs_4:
        MOV     R1,#0x1
        SJMP    ??osal_ConvertUTCSecs_2
//  349 
//  350     /* Next, complete years before current year */
//  351     {
//  352       uint16 year = tm->year;
??osal_ConvertUTCSecs_3:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        SJMP    ??osal_ConvertUTCSecs_5
//  353       while ( --year >= BEGYEAR )
//  354       {
//  355         days += YearLength( year );
??osal_ConvertUTCSecs_6:
        MOV     R0,#0x6d
??osal_ConvertUTCSecs_7:
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x1
        MOV     ?V0 + 1,A
??osal_ConvertUTCSecs_5:
        MOV     A,R4
        ADD     A,#-0x1
        DEC     R4
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R5,A
        CLR     C
        MOV     A,R4
        SUBB    A,#-0x30
        MOV     A,R5
        SUBB    A,#0x7
        JC      ??osal_ConvertUTCSecs_8
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#-0x70
        MOV     R3,#0x1
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??osal_ConvertUTCSecs_9
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??osal_ConvertUTCSecs_6
        MOV     A,R4
        ANL     A,#0x3
        JNZ     ??osal_ConvertUTCSecs_6
??osal_ConvertUTCSecs_9:
        MOV     R0,#0x6e
        SJMP    ??osal_ConvertUTCSecs_7
//  356       }
//  357     }
//  358 
//  359     /* Add total seconds before partial day */
//  360     seconds += (days * DAY);
//  361   }
//  362 
//  363   return ( seconds );
??osal_ConvertUTCSecs_8:
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     DPTR,#__Constant_15180
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?L_MUL
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_ADD
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock20
//  364 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function osal_ConvertUTCSecs
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function osal_ConvertUTCSecs
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+0
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function osal_ConvertUTCTime
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function osal_ConvertUTCTime
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+0
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function osal_ConvertUTCTime
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+0
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function osal_ConvertUTCTime
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+0
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function osal_ConvertUTCSecs
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+0
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_15180:
        DD 86400

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3c:
        DD 60

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_e10:
        DD 3600

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osalTimeUpdate?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osalTimeUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_setClock?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_setClock

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_getClock?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_getClock

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_ConvertUTCTime?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_ConvertUTCTime

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??monthLength?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    monthLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??osal_ConvertUTCSecs?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_ConvertUTCSecs

        END
// 
// 1 169 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//    12 bytes in segment XDATA_ROM_C
//    12 bytes in segment XDATA_Z
// 
// 1 205 bytes of CODE  memory
//     0 bytes of CONST memory (+ 12 bytes shared)
//     0 bytes of DATA  memory (+  1 byte  shared)
//    12 bytes of XDATA memory
//
//Errors: none
//Warnings: none
