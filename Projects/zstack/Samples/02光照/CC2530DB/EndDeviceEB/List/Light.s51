///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            07/Dec/2016  16:00:31 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\Source\Lig /
//                          ht.c                                              /
//    Command line       =  -f E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530D /
//                          B\..\..\..\Tools\CC2530DB\f8wEndev.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f E:\Lib\micro-electromechan /
//                          ical\ ±—”\ZStack-CC2530-2.5.1a\Projects\zstack\Sa /
//                          mples\02π‚’’\CC2530DB\..\..\..\Tools\CC2530DB\f8w /
//                          Config.cfg (-DZIGBEEPRO -DSECURE=0                /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00100000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\Lib\micro-electromechan /
//                          ical\ ±—”\ZStack-CC2530-2.5.1a\Projects\zstack\Sa /
//                          mples\02π‚’’\Source\Light.c -D NWK_AUTO_POLL -D   /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D             /
//                          xPOWER_SAVING -lC E:\Lib\micro-electromechanical\ /
//                           ±—”\ZStack-CC2530-2.5.1a\Projects\zstack\Samples /
//                          \02π‚’’\CC2530DB\EndDeviceEB\List\ -lA            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\E /
//                          ndDeviceEB\List\ --diag_suppress Pe001,Pa010 -o   /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\E /
//                          ndDeviceEB\Obj\ -e --no_code_motion --debug       /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\  /
//                          -I E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530D /
//                          B\..\Source\ -I E:\Lib\micro-electromechanical\ ± /
//                          —”\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          2π‚’’\CC2530DB\..\..\..\ZMain\TI2530DB\ -I        /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\hal\include\ -I          /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\hal\target\CC2530EB\ -I  /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\mac\include\ -I          /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\mac\high_level\ -I       /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\mac\low_level\srf04\ -I  /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\mac\low_level\srf04\sing /
//                          le_chip\ -I E:\Lib\micro-electromechanical\ ±—”\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\02π‚’ /
//                          ’\CC2530DB\..\..\..\..\..\Components\mt\ -I       /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\osal\include\ -I         /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\services\saddr\ -I       /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\services\sdata\ -I       /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\af\ -I             /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\nwk\ -I            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sapi\ -I           /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sec\ -I            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sys\ -I            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\zdo\ -I            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\zmac\ -I                 /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\zmac\f8w\ -Ohz           /
//                          --require_prototypes                              /
//    List file          =  E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\E /
//                          ndDeviceEB\List\Light.s51                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Light

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_TO_FLT
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Light_Init?relay
        FUNCTION ??Light_Init?relay,0203H
        PUBLIC ??Light_ProcessEvent?relay
        FUNCTION ??Light_ProcessEvent?relay,0203H
        PUBLIC ??Light_SendTheMessage?relay
        FUNCTION ??Light_SendTheMessage?relay,0203H
        PUBLIC ??TempHumApp_SerialSend?relay
        FUNCTION ??TempHumApp_SerialSend?relay,0203H
        FUNCTION ??rxCB?relay,0203H
        PUBLIC Light_ClusterList
        PUBLIC Light_Init
        FUNCTION Light_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC Light_NwkState
        PUBLIC Light_ProcessEvent
        FUNCTION Light_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Light_SendTheMessage
        FUNCTION Light_SendTheMessage,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 41, STACK
        PUBLIC Light_SimpleDesc
        PUBLIC Light_TaskID
        PUBLIC Light_TransID
        PUBLIC Light_epDesc
        PUBLIC TempDATA
        PUBLIC TempHumApp_SerialSend
        FUNCTION TempHumApp_SerialSend,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 41, STACK
        PUBWEAK _A_P1
        PUBWEAK __Constant_3fc00000
        PUBLIC fLight
        FUNCTION rxCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
HalUARTOpen         SYMBOL "HalUARTOpen"
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
Init_BH1750         SYMBOL "Init_BH1750"
??Init_BH1750?relay SYMBOL "?relay", Init_BH1750
MT_UartInit         SYMBOL "MT_UartInit"
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
Multiple_Read       SYMBOL "Multiple_Read"
??Multiple_Read?relay SYMBOL "?relay", Multiple_Read
Single_Write_BH1750 SYMBOL "Single_Write_BH1750"
??Single_Write_BH1750?relay SYMBOL "?relay", Single_Write_BH1750
afRegister          SYMBOL "afRegister"
??afRegister?relay  SYMBOL "?relay", afRegister
delay_nms           SYMBOL "delay_nms"
??delay_nms?relay   SYMBOL "?relay", delay_nms
memcpy              SYMBOL "memcpy"
??memcpy?relay      SYMBOL "?relay", memcpy
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_set_event      SYMBOL "osal_set_event"
??osal_set_event?relay SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
osal_strlen         SYMBOL "osal_strlen"
??osal_strlen?relay SYMBOL "?relay", osal_strlen
Light_Init          SYMBOL "Light_Init"
??Light_Init?relay  SYMBOL "?relay", Light_Init
Light_ProcessEvent  SYMBOL "Light_ProcessEvent"
??Light_ProcessEvent?relay SYMBOL "?relay", Light_ProcessEvent
Light_SendTheMessage SYMBOL "Light_SendTheMessage"
??Light_SendTheMessage?relay SYMBOL "?relay", Light_SendTheMessage
TempHumApp_SerialSend SYMBOL "TempHumApp_SerialSend"
??TempHumApp_SerialSend?relay SYMBOL "?relay", TempHumApp_SerialSend

        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??Init_BH1750?relay
        FUNCTION ??Init_BH1750?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??Multiple_Read?relay
        FUNCTION ??Multiple_Read?relay,00H
        EXTERN ??Single_Write_BH1750?relay
        FUNCTION ??Single_Write_BH1750?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??delay_nms?relay
        FUNCTION ??delay_nms?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN BUF
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Init_BH1750
        FUNCTION Init_BH1750,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Multiple_Read
        FUNCTION Multiple_Read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Single_Write_BH1750
        FUNCTION Single_Write_BH1750,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN delay_nms
        FUNCTION delay_nms,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN dis_data
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\02π‚’’\Source\Light.c
//    1 #include "OSAL.h"
//    2 #include "AF.h"
//    3 #include "ZDApp.h"
//    4 #include "ZDObject.h"
//    5 #include "ZDProfile.h"
//    6 #include <string.h>
//    7 //#include "Common.h"
//    8 #include "DebugTrace.h"
//    9 #include "Light.h"
//   10 #include "MT.h"
//   11 
//   12 #if !defined( WIN32 )
//   13   #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1
//   14 #endif
//   15 
//   16 /* HAL */
//   17 #include "hal_lcd.h"
//   18 #include "hal_led.h"
//   19 #include "hal_key.h"
//   20 #include "hal_uart.h"
//   21 #include "mt_uart.h"
//   22 
//   23 #include "BH1750.h"
//   24 #define SEND_DATA_EVENT 0x01

        RSEG XDATA_I:XDATA:NOROOT(0)
//   25 float fLight = 123;
fLight:
        DATA32
        DS 4
        REQUIRE `?<Initializer for fLight>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   26 const cId_t Light_ClusterList[Light_MAX_CLUSTERS] =
Light_ClusterList:
        DW 7
//   27 {
//   28   Light_CLUSTERID
//   29 };
//   30 
//   31 
//   32 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   33 const SimpleDescriptionFormat_t Light_SimpleDesc =
Light_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 0
        DATA16
        DW 0H
        DATA8
        DB 1
        DATA16
        DW Light_ClusterList
//   34 {
//   35   Light_ENDPOINT,              //  int Endpoint;
//   36   Light_PROFID,                //  uint16 AppProfId[2];
//   37   Light_DEVICEID,              //  uint16 AppDeviceId[2];
//   38   Light_DEVICE_VERSION,        //  int   AppDevVer:4;
//   39   Light_FLAGS,                 //  int   AppFlags:4;
//   40   
//   41   
//   42   0,          //  byte  AppNumInClusters;
//   43   (cId_t *)NULL,  //  byte *pAppInClusterList;
//   44   Light_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   45   (cId_t *)Light_ClusterList   //  byte *pAppInClusterList;
//   46 };
//   47 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   48 unsigned char TempDATA;
TempDATA:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   49 endPointDesc_t Light_epDesc;
Light_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   50 byte Light_TaskID;
Light_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   51 byte Light_TransID;
Light_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   52 devStates_t Light_NwkState;
Light_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   53 void Light_MessageMSGCB(afIncomingMSGPacket_t *MSGpkt);
//   54 void Light_SendTheMessage(void);
//   55 
//   56 static void rxCB(uint8 port,uint8 event);
//   57 void TempHumApp_SerialSend(unsigned char* ser_str);
//   58 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   59 void Light_Init( byte task_id )
Light_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function Light_Init
        CODE
//   60 {
        FUNCALL Light_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
        MOV     R6,A
//   61   //halUARTCfg_t uartConfig;//¥Æø⁄
//   62     
//   63   Light_TaskID = task_id;
        MOV     DPTR,#Light_TaskID
        MOVX    @DPTR,A
//   64   Light_NwkState=DEV_INIT;
        MOV     DPTR,#Light_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//   65   Light_TransID = 0;
        MOV     DPTR,#Light_TransID
        CLR     A
        MOVX    @DPTR,A
//   66 
//   67   
//   68   Light_epDesc.endPoint = Light_ENDPOINT;
        MOV     DPTR,#Light_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//   69   Light_epDesc.task_id = &Light_TaskID;
        INC     DPTR
        MOV     A,#Light_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Light_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//   70   Light_epDesc.simpleDesc
//   71             = (SimpleDescriptionFormat_t *)&Light_SimpleDesc;
        INC     DPTR
        MOV     A,#Light_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Light_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//   72   
//   73   Light_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   74   afRegister( &Light_epDesc ); 
        ; Setup parameters for call to function afRegister
        MOV     R2,#Light_epDesc & 0xff
        MOV     R3,#(Light_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//   75   
//   76    //uart◊¢≤·
//   77   MT_UartRegisterTaskID(task_id);
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//   78   //¥Æø⁄≥ı ºªØ
//   79    MT_UartInit();
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//   80   halUARTCfg_t uartConfig;
//   81   uartConfig.configured = TRUE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//   82   uartConfig.baudRate = HAL_UART_BR_9600;
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//   83   uartConfig.flowControl = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//   84   uartConfig.callBackFunc = rxCB;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??rxCB?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxCB?relay >> 8) & 0xff
        LCALL   ?Subroutine1 & 0xFFFF
//   85   HalUARTOpen(0,&uartConfig);
??CrossCallReturnLabel_0:
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//   86 
//   87 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   88 static void rxCB(uint8 port,uint8 event)
rxCB:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function rxCB
        CODE
//   89 {
        FUNCALL rxCB, HalUARTRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, TempHumApp_SerialSend
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//   90   //HalUARTWrite(0,"I get",5);
//   91   unsigned  char Uartbuf[10];
//   92   unsigned char len;
//   93   len=HalUARTRead(0,Uartbuf,10);
//   94   //HalUARTWrite(0,""+len,1);
//   95   if(len)
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
        JZ      ??rxCB_0
//   96   {
//   97     //HalUARTWrite(0,"I get",5);
//   98     //HalUARTWrite(0,Uartbuf,len);
//   99     TempHumApp_SerialSend(Uartbuf);
        ; Setup parameters for call to function TempHumApp_SerialSend
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??TempHumApp_SerialSend?relay
//  100     len=0;
//  101   }
//  102 
//  103 }
??rxCB_0:
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  104 UINT16 Light_ProcessEvent( byte task_id, UINT16 events )
Light_ProcessEvent:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function Light_ProcessEvent
        CODE
//  105 {
        FUNCALL Light_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, Init_BH1750
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, Single_Write_BH1750
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, Single_Write_BH1750
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, delay_nms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, Multiple_Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, Light_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  106   afIncomingMSGPacket_t *MSGpkt;
//  107 
//  108   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??Light_ProcessEvent_0
//  109   {
//  110     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Light_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??Light_ProcessEvent_1
//  111     while ( MSGpkt )
//  112     {
//  113       switch ( MSGpkt->hdr.event )
??Light_ProcessEvent_2:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,#0xd1
        JNZ     ??Light_ProcessEvent_3
//  114       {
//  115        
//  116           case ZDO_STATE_CHANGE:
//  117             Light_NwkState = (devStates_t)(MSGpkt->hdr.status);
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#Light_NwkState
        MOVX    @DPTR,A
//  118             if(Light_NwkState==DEV_END_DEVICE)
        XRL     A,#0x6
        JNZ     ??Light_ProcessEvent_3
//  119             {
//  120               P1_0=~P1_0;
        MOV     C,0x90.0
        SETB    B.0
        MOV     C,0x90.0
        JNB     B.0,??Light_ProcessEvent_4
        CPL     C
??Light_ProcessEvent_4:
        MOV     0x90.0,C
//  121               osal_set_event(Light_TaskID,SEND_DATA_EVENT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Light_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  122             }
//  123             break;
//  124             
//  125           default:
//  126             break;
//  127       }
//  128       osal_msg_deallocate( (uint8 *)MSGpkt );
??Light_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  129       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Light_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??Light_ProcessEvent_1:
        MOV     DPTR,#Light_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  130     }
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??Light_ProcessEvent_2
//  131     // return unprocessed events
//  132     return (events ^ SYS_EVENT_MSG);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??Light_ProcessEvent_5
//  133   }
//  134   if(events&SEND_DATA_EVENT)
??Light_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??Light_ProcessEvent_6
//  135   {
//  136     Init_BH1750();       //≥ı ºªØBH1750
        ; Setup parameters for call to function Init_BH1750
        LCALL   ??Init_BH1750?relay
//  137     Single_Write_BH1750(0x02);   // power on
        ; Setup parameters for call to function Single_Write_BH1750
        MOV     R1,#0x2
        LCALL   ??Single_Write_BH1750?relay
//  138     Single_Write_BH1750(0x10);   // H- resolution mode
        ; Setup parameters for call to function Single_Write_BH1750
        MOV     R1,#0x10
        LCALL   ??Single_Write_BH1750?relay
//  139 
//  140     delay_nms(180);              //—” ±180ms
        ; Setup parameters for call to function delay_nms
        MOV     R2,#-0x4c
        MOV     R3,#0x0
        LCALL   ??delay_nms?relay
//  141     Multiple_Read();       //¡¨–¯∂¡≥ˆ ˝æ›£¨¥Ê¥¢‘⁄BUF÷–
        ; Setup parameters for call to function Multiple_Read
        LCALL   ??Multiple_Read?relay
//  142 
//  143     dis_data=BUF[0];
//  144     dis_data=(dis_data<<8)+BUF[1];//∫œ≥… ˝æ›£¨º¥π‚’’ ˝æ›
        MOV     DPTR,#BUF
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        ADD     A,R2
        MOV     DPTR,#dis_data
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  145 
//  146     fLight = (float)dis_data/1.5;
        MOV     DPTR,#dis_data
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_3fc00000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#fLight
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  147     Light_SendTheMessage();
        ; Setup parameters for call to function Light_SendTheMessage
        LCALL   ??Light_SendTheMessage?relay
//  148     osal_start_timerEx(Light_TaskID,SEND_DATA_EVENT,3000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x48
        MOV     R5,#0xb
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#Light_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  149     return(events^SEND_DATA_EVENT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
??Light_ProcessEvent_5:
        MOV     R3,A
        SJMP    ??Light_ProcessEvent_7
//  150   }
//  151   return 0;
??Light_ProcessEvent_6:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Light_ProcessEvent_7:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
        REQUIRE _A_P1
//  152 }
//  153 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  154 void Light_SendTheMessage(void)
Light_SendTheMessage:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function Light_SendTheMessage
        CODE
//  155 { 
        FUNCALL Light_SendTheMessage, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Light_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  156   unsigned char theMessageData[10]="EndDevice";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "EndDevice">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "EndDevice">` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  157 
//  158   afAddrType_t my_DstAddr;
//  159 
//  160   my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  161   my_DstAddr.endPoint=Light_ENDPOINT;
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  162   my_DstAddr.addr.shortAddr=0x0000; 
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  163 
//  164   fLight = 123;
        MOV     DPTR,#fLight
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0xa
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x42
        LCALL   ?Subroutine1 & 0xFFFF
//  165   theMessageData[0]='0'+(int)fLight/100;
??CrossCallReturnLabel_1:
        MOV     A,#0x31
        MOVX    @DPTR,A
//  166   theMessageData[1]='0'+((int)fLight-(int)fLight/100*100)/10;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x32
        MOVX    @DPTR,A
//  167   theMessageData[2]='0'+(int)fLight%10;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x33
        MOVX    @DPTR,A
//  168 
//  169   AF_DataRequest(&my_DstAddr
//  170   ,&Light_epDesc
//  171   ,Light_CLUSTERID
//  172   ,osal_strlen("EndDevice")+1
//  173   ,theMessageData
//  174   ,&Light_TransID
//  175   ,AF_DISCV_ROUTE
//  176   ,AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,#Light_TransID & 0xff
        MOV     ?V0 + 1,#(Light_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "EndDevice">_1` & 0xff
        MOV     R3,#(`?<Constant "EndDevice">_1` >> 8) & 0xff
        LCALL   ??osal_strlen?relay
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 0,#0x7
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R1,#0x20
        MOV     R4,#Light_epDesc & 0xff
        MOV     R5,#(Light_epDesc >> 8) & 0xff
        MOV     A,#0x13
          CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  177 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 41)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,#0x16
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function Light_Init
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function Light_SendTheMessage
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+0
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function TempHumApp_SerialSend
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+0
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  178 void TempHumApp_SerialSend(unsigned char* ser_str)
TempHumApp_SerialSend:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function TempHumApp_SerialSend
        CODE
//  179 {
        FUNCALL TempHumApp_SerialSend, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TempHumApp_SerialSend, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL TempHumApp_SerialSend, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  180   afAddrType_t my_DstAddr;
//  181   unsigned char theMessageData[10]="EndDevice";
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "EndDevice">_2` >> 8) & 0xff
        MOV     DPL,#`?<Constant "EndDevice">_2` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  182   
//  183  my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  184   my_DstAddr.endPoint=Light_ENDPOINT;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        LCALL   ?Subroutine1 & 0xFFFF
//  185   my_DstAddr.addr.shortAddr=0x0000; 
??CrossCallReturnLabel_2:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  186 
//  187   memcpy(theMessageData,ser_str,10);
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0xa
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
//  188   
//  189 
//  190   AF_DataRequest(&my_DstAddr
//  191   ,&Light_epDesc
//  192   ,Light_CLUSTERID
//  193   ,osal_strlen("EndDevice")+1
//  194   ,theMessageData
//  195   ,&Light_TransID
//  196   ,AF_DISCV_ROUTE
//  197   ,AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,#Light_TransID & 0xff
        MOV     ?V0 + 1,#(Light_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "EndDevice">_1` & 0xff
        MOV     R3,#(`?<Constant "EndDevice">_1` >> 8) & 0xff
        LCALL   ??osal_strlen?relay
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     ?V0 + 0,#0x7
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R1,#0x20
        MOV     R4,#Light_epDesc & 0xff
        MOV     R5,#(Light_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock9
//  198 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function Light_SendTheMessage
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function TempHumApp_SerialSend
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+0
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV     A,R2
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for fLight>`:
        DATA32
        DD 42F60000H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Light_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Light_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    rxCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Light_ProcessEvent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Light_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Light_SendTheMessage?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Light_SendTheMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??TempHumApp_SerialSend?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    TempHumApp_SerialSend

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EndDevice">`:
        DB "EndDevice"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EndDevice">_1`:
        DB "EndDevice"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "EndDevice">_2`:
        DB "EndDevice"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3fc00000:
        DD 3FC00000H

        END
//  199 
//  200 
// 
// 750 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//   1 byte  in segment SFR_AN
//   4 bytes in segment XDATA_I
//   4 bytes in segment XDATA_ID
//  48 bytes in segment XDATA_ROM_C
//  10 bytes in segment XDATA_Z
// 
// 784 bytes of CODE  memory
//  44 bytes of CONST memory (+ 4 bytes shared)
//   0 bytes of DATA  memory (+ 1 byte  shared)
//  14 bytes of XDATA memory
//
//Errors: none
//Warnings: none
