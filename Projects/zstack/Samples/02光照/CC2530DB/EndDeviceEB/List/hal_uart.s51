///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            07/Dec/2016  15:59:43 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Components\hal\target\CC2530EB\hal_uart.c /
//    Command line       =  -f E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530D /
//                          B\..\..\..\Tools\CC2530DB\f8wEndev.cfg            /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f E:\Lib\micro-electromechan /
//                          ical\ ±—”\ZStack-CC2530-2.5.1a\Projects\zstack\Sa /
//                          mples\02π‚’’\CC2530DB\..\..\..\Tools\CC2530DB\f8w /
//                          Config.cfg (-DZIGBEEPRO -DSECURE=0                /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00100000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\Lib\micro-electromechan /
//                          ical\ ±—”\ZStack-CC2530-2.5.1a\Components\hal\tar /
//                          get\CC2530EB\hal_uart.c -D NWK_AUTO_POLL -D       /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D             /
//                          xPOWER_SAVING -lC E:\Lib\micro-electromechanical\ /
//                           ±—”\ZStack-CC2530-2.5.1a\Projects\zstack\Samples /
//                          \02π‚’’\CC2530DB\EndDeviceEB\List\ -lA            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\E /
//                          ndDeviceEB\List\ --diag_suppress Pe001,Pa010 -o   /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\E /
//                          ndDeviceEB\Obj\ -e --no_code_motion --debug       /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\  /
//                          -I E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530D /
//                          B\..\Source\ -I E:\Lib\micro-electromechanical\ ± /
//                          —”\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\0 /
//                          2π‚’’\CC2530DB\..\..\..\ZMain\TI2530DB\ -I        /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\hal\include\ -I          /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\hal\target\CC2530EB\ -I  /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\mac\include\ -I          /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\mac\high_level\ -I       /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\mac\low_level\srf04\ -I  /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\mac\low_level\srf04\sing /
//                          le_chip\ -I E:\Lib\micro-electromechanical\ ±—”\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\02π‚’ /
//                          ’\CC2530DB\..\..\..\..\..\Components\mt\ -I       /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\osal\include\ -I         /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\services\saddr\ -I       /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\services\sdata\ -I       /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\af\ -I             /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\nwk\ -I            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sapi\ -I           /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sec\ -I            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\sys\ -I            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\stack\zdo\ -I            /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\zmac\ -I                 /
//                          E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\. /
//                          .\..\..\..\..\Components\zmac\f8w\ -Ohz           /
//                          --require_prototypes                              /
//    List file          =  E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530 /
//                          -2.5.1a\Projects\zstack\Samples\02π‚’’\CC2530DB\E /
//                          ndDeviceEB\List\hal_uart.s51                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_uart

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??HalUARTInit?relay
        FUNCTION ??HalUARTInit?relay,0203H
        PUBLIC ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,0203H
        PUBLIC ??HalUARTPoll?relay
        FUNCTION ??HalUARTPoll?relay,0203H
        FUNCTION ??HalUARTPollISR?relay,0203H
        PUBLIC ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,0203H
        PUBLIC ??HalUARTReadISR?relay
        FUNCTION ??HalUARTReadISR?relay,0203H
        PUBLIC ??HalUARTResume?relay
        FUNCTION ??HalUARTResume?relay,0203H
        PUBLIC ??HalUARTSuspend?relay
        FUNCTION ??HalUARTSuspend?relay,0203H
        PUBLIC ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,0203H
        PUBLIC ??HalUARTWriteISR?relay
        FUNCTION ??HalUARTWriteISR?relay,0203H
        PUBLIC ??Hal_UART_RxBufLen?relay
        FUNCTION ??Hal_UART_RxBufLen?relay,0203H
        PUBWEAK `??halUart0RxIsr??INTVEC 19`
        PUBWEAK `??halUart0TxIsr??INTVEC 59`
        PUBWEAK ADCCFG
        PUBLIC HalUARTInit
        FUNCTION HalUARTInit,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalUARTOpen
        FUNCTION HalUARTOpen,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalUARTPoll
        FUNCTION HalUARTPoll,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION HalUARTPollISR,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalUARTRead
        FUNCTION HalUARTRead,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalUARTReadISR
        FUNCTION HalUARTReadISR,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalUARTResume
        FUNCTION HalUARTResume,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalUARTSuspend
        FUNCTION HalUARTSuspend,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalUARTWrite
        FUNCTION HalUARTWrite,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalUARTWriteISR
        FUNCTION HalUARTWriteISR,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK IEN2
        PUBWEAK P0SEL
        PUBWEAK P2DIR
        PUBWEAK PERCFG
        PUBWEAK ST0
        PUBWEAK U0BAUD
        PUBWEAK U0CSR
        PUBWEAK U0DBUF
        PUBWEAK U0GCR
        PUBWEAK U0UCR
        PUBWEAK _A_IEN0
        PUBWEAK _A_IRCON2
        PUBLIC halUart0RxIsr
        FUNCTION halUart0RxIsr,0233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 7, STACK
        PUBLIC halUart0TxIsr
        FUNCTION halUart0TxIsr,0233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 7, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalUARTInit         SYMBOL "HalUARTInit"
??HalUARTInit?relay SYMBOL "?relay", HalUARTInit
HalUARTOpen         SYMBOL "HalUARTOpen"
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
HalUARTPoll         SYMBOL "HalUARTPoll"
??HalUARTPoll?relay SYMBOL "?relay", HalUARTPoll
HalUARTRead         SYMBOL "HalUARTRead"
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
HalUARTReadISR      SYMBOL "HalUARTReadISR"
??HalUARTReadISR?relay SYMBOL "?relay", HalUARTReadISR
HalUARTResume       SYMBOL "HalUARTResume"
??HalUARTResume?relay SYMBOL "?relay", HalUARTResume
HalUARTSuspend      SYMBOL "HalUARTSuspend"
??HalUARTSuspend?relay SYMBOL "?relay", HalUARTSuspend
HalUARTWrite        SYMBOL "HalUARTWrite"
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
HalUARTWriteISR     SYMBOL "HalUARTWriteISR"
??HalUARTWriteISR?relay SYMBOL "?relay", HalUARTWriteISR
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
??Hal_UART_RxBufLen?relay SYMBOL "?relay", Hal_UART_RxBufLen
halUart0RxIsr       SYMBOL "halUart0RxIsr"
`??halUart0RxIsr??INTVEC 19` SYMBOL "??INTVEC 19", halUart0RxIsr
halUart0TxIsr       SYMBOL "halUart0TxIsr"
`??halUart0TxIsr??INTVEC 59` SYMBOL "??INTVEC 59", halUart0TxIsr

// E:\Lib\micro-electromechanical\ ±—”\ZStack-CC2530-2.5.1a\Components\hal\target\CC2530EB\hal_uart.c
//    1 /**************************************************************************************************
//    2   Filename:       _hal_uart.c
//    3   Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
//    4   Revision:       $Revision: 20142 $
//    5 
//    6   Description: This file contains the interface to the H/W UART driver.
//    7 
//    8 
//    9   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "hal_board_cfg.h"

        ASEGN SFR_AN:DATA:NOROOT,086H
// unsigned char volatile __sfr U0CSR
U0CSR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,095H
// unsigned char volatile __sfr ST0
ST0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c1H
// unsigned char volatile __sfr U0DBUF
U0DBUF:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c2H
// unsigned char volatile __sfr U0BAUD
U0BAUD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c4H
// unsigned char volatile __sfr U0UCR
U0UCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c5H
// unsigned char volatile __sfr U0GCR
U0GCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   45 #include "hal_defs.h"
//   46 #include "hal_types.h"
//   47 #include "hal_uart.h"
//   48 
//   49 /*********************************************************************
//   50  * MACROS
//   51  */
//   52 
//   53 /*********************************************************************
//   54  * TYPEDEFS
//   55  */
//   56 
//   57 /*********************************************************************
//   58  * CONSTANTS
//   59  */
//   60 
//   61 /*********************************************************************
//   62  * GLOBAL VARIABLES
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * GLOBAL FUNCTIONS
//   67  */
//   68 
//   69 /*********************************************************************
//   70  * LOCAL VARIABLES
//   71  */
//   72 
//   73 /*********************************************************************
//   74  * LOCAL FUNCTIONS
//   75  */
//   76 
//   77 #if HAL_UART_DMA
//   78 #include "_hal_uart_dma.c"
//   79 #endif
//   80 #if HAL_UART_ISR
//   81 #include "_hal_uart_isr.c"

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static uartISRCfg_t isrCfg
isrCfg:
        DS 265
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant uint16 HalUARTReadISR(unsigned char *, uint16)
HalUARTReadISR:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function HalUARTReadISR
        CODE
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??HalUARTReadISR_0
??HalUARTReadISR_1:
        MOV     A,#isrCfg & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#(isrCfg >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        MOV     DPTR,#isrCfg + 128
        MOVX    A,@DPTR
        INC     A
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        CLR     C
        SUBB    A,#-0x80
        JC      ??HalUARTReadISR_2
        MOV     DPTR,#isrCfg + 128
        CLR     A
        MOVX    @DPTR,A
??HalUARTReadISR_2:
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??HalUARTReadISR_0:
        MOV     DPTR,#isrCfg + 128
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R6
        JZ      ??HalUARTReadISR_3
        CLR     C
        MOV     A,R0
        SUBB    A,R4
        MOV     A,R1
        SUBB    A,R5
        JC      ??HalUARTReadISR_1
??HalUARTReadISR_3:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant uint16 HalUARTWriteISR(unsigned char *, uint16)
HalUARTWriteISR:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function HalUARTWriteISR
        CODE
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     DPTR,#isrCfg + 260
        LCALL   ??Subroutine5_0 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     DPTR,#isrCfg + 260
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,R0
        JNC     ??HalUARTWriteISR_0
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??HalUARTWriteISR_1
??HalUARTWriteISR_2:
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??HalUARTWriteISR_3
??HalUARTWriteISR_0:
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x7f
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,R4
        MOV     A,R1
        SUBB    A,R5
        JNC     ??HalUARTWriteISR_2
??HalUARTWriteISR_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??HalUARTWriteISR_4
??HalUARTWriteISR_5:
        MOVX    A,@DPTR
        INC     A
??HalUARTWriteISR_6:
        MOVX    @DPTR,A
        ORL     0x9a,#0x4
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??HalUARTWriteISR_3:
        CLR     C
        MOV     A,R0
        SUBB    A,R4
        MOV     A,R1
        SUBB    A,R5
        JNC     ??HalUARTWriteISR_7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#isrCfg + 261
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,#(isrCfg + 132) & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#((isrCfg + 132) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     DPTR,#isrCfg + 262
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#isrCfg + 261
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x7f
        JC      ??HalUARTWriteISR_5
        CLR     A
        SJMP    ??HalUARTWriteISR_6
??HalUARTWriteISR_7:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
??HalUARTWriteISR_4:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock1
        REQUIRE IEN2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function HalUARTReadISR
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function HalUARTWriteISR
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+0
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:CODE:NOROOT(0)
// static __banked_func __xdata_reentrant void HalUARTPollISR(void)
HalUARTPollISR:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function HalUARTPollISR
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#isrCfg + 263
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??HalUARTPollISR_0 & 0xFFFF
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        JC      ??HalUARTPollISR_1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#isrCfg + 128
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R0
        CLR     C
        SUBB    A,R2
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        SJMP    ??HalUARTPollISR_2
??HalUARTPollISR_1:
        MOV     A,#-0x80
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R0
        ADD     A,R2
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
??HalUARTPollISR_2:
        MOV     R1,A
        MOV     R2,#0x0
        MOV     DPTR,#isrCfg + 130
        MOVX    A,@DPTR
        JZ      ??HalUARTPollISR_3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,0x95
        CLR     C
        SUBB    A,R3
        MOV     R3,A
        MOV     DPTR,#isrCfg + 130
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R3
        CLR     C
        SUBB    A,R4
        JNC     ??HalUARTPollISR_4
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R3
        SJMP    ??HalUARTPollISR_5
??HalUARTPollISR_4:
        CLR     A
??HalUARTPollISR_5:
        MOVX    @DPTR,A
??HalUARTPollISR_3:
        MOV     A,0x95
        INC     DPTR
        MOVX    @DPTR,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x7f
        MOV     A,R1
        SUBB    A,#0x0
        JNC     ??HalUARTPollISR_6
        CLR     C
        MOV     A,R0
        SUBB    A,#0x40
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??HalUARTPollISR_7
        INC     R2
??HalUARTPollISR_6:
        INC     R2
        SJMP    ??HalUARTPollISR_8
??HalUARTPollISR_7:
        MOV     A,R0
        ORL     A,R1
        JZ      ??HalUARTPollISR_8
        MOV     DPTR,#isrCfg + 130
        MOVX    A,@DPTR
        JNZ     ??HalUARTPollISR_8
        MOV     R2,#0x4
??HalUARTPollISR_8:
        MOV     DPTR,#isrCfg + 262
        MOVX    A,@DPTR
        JZ      ??HalUARTPollISR_9
        CLR     A
        MOVX    @DPTR,A
        MOV     A,R2
        SETB    0xE0 /* A   */.4
        MOV     R2,A
??HalUARTPollISR_9:
        MOV     A,R2
        JZ      ??HalUARTPollISR_0
        ; Setup parameters for indirect call
        MOV     R1,#0x0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
??HalUARTPollISR_0:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock5
        REQUIRE ST0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function HalUARTPollISR
          CFI Conditional ??CrossCallReturnLabel_3
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function Hal_UART_RxBufLen
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond7) CFA_SP SP+-5
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOV     DPTR,#isrCfg + 128
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function HalUARTWriteISR
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function HalUARTPollISR
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond10) CFA_SP SP+-5
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function Hal_UART_RxBufLen
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond11) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond11) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond11) CFA_SP SP+-5
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant __interrupt void halUart0RxIsr(void)
halUart0RxIsr:
          CFI Block cfiBlock13 Using cfiCommon1
          CFI Function halUart0RxIsr
        CODE
        PUSH    A
          CFI A Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    PSW
          CFI PSW Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        MOV     A,R0
          CFI R0 A
        PUSH    A
          CFI R0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        MOV     A,R1
          CFI R1 A
        PUSH    A
          CFI R1 Frame(CFA_SP, 6)
          CFI CFA_SP SP+-6
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 7)
          CFI CFA_SP SP+-7
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 8)
          CFI CFA_SP SP+-8
        ; Saved register size: 6
        ; Auto size: 0
        MOV     A,0xc1
        PUSH    A
          CFI CFA_SP SP+-9
        MOV     DPTR,#isrCfg + 129
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#isrCfg & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(isrCfg >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+-8
        MOVX    @DPTR,A
        MOV     DPTR,#isrCfg + 128
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??halUart0RxIsr_0
        MOV     A,0x95
        MOV     DPTR,#isrCfg + 131
        MOVX    @DPTR,A
??halUart0RxIsr_0:
        MOV     DPTR,#isrCfg + 129
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#-0x80
        JC      ??halUart0RxIsr_1
        CLR     A
        MOVX    @DPTR,A
??halUart0RxIsr_1:
        INC     DPTR
        MOV     A,#-0x3a
        MOVX    @DPTR,A
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-7
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-6
        POP     A
          CFI R1 A
          CFI CFA_SP SP+-5
        MOV     R1,A
          CFI EndBlock cfiBlock13
        REQUIRE ?Subroutine2
        REQUIRE U0DBUF
        REQUIRE ST0
        ; // Fall through to label ?Subroutine2

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock14 Using cfiCommon1
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI A Frame(CFA_SP, 3)
          CFI PSW Frame(CFA_SP, 4)
          CFI R0 Frame(CFA_SP, 5)
        POP     A
          CFI CFA_SP SP+-4
          CFI R0 A
        MOV     R0,A
          CFI R0 SameValue
        POP     PSW
          CFI CFA_SP SP+-3
          CFI PSW SameValue
        POP     A
          CFI CFA_SP SP+-2
          CFI A SameValue
        RETI
          CFI EndBlock cfiBlock14

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant __interrupt void halUart0TxIsr(void)
halUart0TxIsr:
          CFI Block cfiBlock15 Using cfiCommon1
          CFI Function halUart0TxIsr
        CODE
        PUSH    A
          CFI A Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    PSW
          CFI PSW Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        MOV     A,R0
          CFI R0 A
        PUSH    A
          CFI R0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        PUSH    ?V0 + 0
          CFI V0 Frame(CFA_SP, 6)
          CFI CFA_SP SP+-6
        PUSH    ?V0 + 1
          CFI V1 Frame(CFA_SP, 7)
          CFI CFA_SP SP+-7
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 8)
          CFI CFA_SP SP+-8
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 9)
          CFI CFA_SP SP+-9
        ; Saved register size: 7
        ; Auto size: 0
        MOV     DPTR,#isrCfg + 260
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??halUart0TxIsr_0
        ANL     0x9a,#0xfb
        INC     DPTR
        MOV     A,#0x1
        SJMP    ??halUart0TxIsr_1
??halUart0TxIsr_0:
        CLR     0xe8.1
        MOV     DPTR,#isrCfg + 260
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,#0x1
        ADD     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     A,#(isrCfg + 132) & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#((isrCfg + 132) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     0xc1,A
        MOV     DPTR,#isrCfg + 260
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x80
        JC      ??halUart0TxIsr_2
        CLR     A
??halUart0TxIsr_1:
        MOVX    @DPTR,A
??halUart0TxIsr_2:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-8
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-7
        POP     ?V0 + 1
          CFI V1 SameValue
          CFI CFA_SP SP+-6
        POP     ?V0 + 0
          CFI V0 SameValue
          CFI CFA_SP SP+-5
        SJMP    ?Subroutine2
          CFI EndBlock cfiBlock15
        REQUIRE IEN2
        REQUIRE _A_IRCON2
        REQUIRE U0DBUF
//   82 #endif
//   83 #if HAL_UART_USB
//   84 #include "_hal_uart_usb.c"
//   85 #endif
//   86 
//   87 /******************************************************************************
//   88  * @fn      HalUARTInit
//   89  *
//   90  * @brief   Initialize the UART
//   91  *
//   92  * @param   none
//   93  *
//   94  * @return  none
//   95  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   96 void HalUARTInit(void)
HalUARTInit:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function HalUARTInit
        CODE
//   97 {
        ; Saved register size: 0
        ; Auto size: 0
//   98 #if HAL_UART_DMA
//   99   HalUARTInitDMA();
//  100 #endif
//  101 #if HAL_UART_ISR
//  102   HalUARTInitISR();
        ANL     0xff,#0x3f
        MOV     0xff,0xff
        ANL     0xf1,#0xfe
        ORL     0xf3,#0xc
        ANL     0xf2,#0xf3
        MOV     0x86,#-0x80
        MOV     0xc4,#-0x80
//  103 #endif
//  104 #if HAL_UART_USB
//  105   HalUARTInitUSB();
//  106 #endif
//  107 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock16
        REQUIRE P2DIR
        REQUIRE PERCFG
        REQUIRE P0SEL
        REQUIRE ADCCFG
        REQUIRE U0CSR
        REQUIRE U0UCR
//  108 
//  109 /******************************************************************************
//  110  * @fn      HalUARTOpen
//  111  *
//  112  * @brief   Open a port according tp the configuration specified by parameter.
//  113  *
//  114  * @param   port   - UART port
//  115  *          config - contains configuration information
//  116  *
//  117  * @return  Status of the function call
//  118  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  119 uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
HalUARTOpen:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function HalUARTOpen
        CODE
//  120 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
//  121   (void)port;
//  122   (void)config;
//  123 
//  124 #if (HAL_UART_DMA == 1)
//  125   if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
//  126 #endif
//  127 #if (HAL_UART_DMA == 2)
//  128   if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
//  129 #endif
//  130 #if (HAL_UART_ISR == 1)
//  131   if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
        JNZ     ??HalUARTOpen_0
        MOV     A,R2
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#isrCfg + 263
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??HalUARTOpen_1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x4
        JZ      ??HalUARTOpen_1
        MOV     0xc2,#0x3b
        SJMP    ??HalUARTOpen_2
??HalUARTOpen_1:
        MOV     0xc2,#-0x28
??HalUARTOpen_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??HalUARTOpen_3
        DEC     A
        JZ      ??HalUARTOpen_4
        DEC     A
        JZ      ??HalUARTOpen_5
        DEC     A
        JNZ     ??HalUARTOpen_6
??HalUARTOpen_5:
        MOV     0xc5,#0xa
        SJMP    ??HalUARTOpen_7
??HalUARTOpen_4:
        MOV     0xc5,#0x9
        SJMP    ??HalUARTOpen_7
??HalUARTOpen_3:
        MOV     0xc5,#0x8
        SJMP    ??HalUARTOpen_7
??HalUARTOpen_6:
        MOV     0xc5,#0xb
??HalUARTOpen_7:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??HalUARTOpen_8
        MOV     0xc4,#0x42
        ORL     0xf3,#0x30
        SJMP    ??HalUARTOpen_9
??HalUARTOpen_8:
        MOV     0xc4,#0x2
??HalUARTOpen_9:
        ORL     0x86,#0x40
        SETB    0xa8.2
        SETB    0xe8.1
//  132 #endif
//  133 #if (HAL_UART_ISR == 2)
//  134   if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
//  135 #endif
//  136 #if (HAL_UART_USB)
//  137   HalUARTOpenUSB(config);
//  138 #endif
//  139   
//  140   return HAL_UART_SUCCESS;
??HalUARTOpen_0:
        MOV     R1,#0x0
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock17
        REQUIRE U0BAUD
        REQUIRE U0GCR
        REQUIRE U0UCR
        REQUIRE P0SEL
        REQUIRE U0CSR
        REQUIRE _A_IEN0
        REQUIRE _A_IRCON2
//  141 }
//  142 
//  143 /*****************************************************************************
//  144  * @fn      HalUARTRead
//  145  *
//  146  * @brief   Read a buffer from the UART
//  147  *
//  148  * @param   port - USART module designation
//  149  *          buf  - valid data buffer at least 'len' bytes in size
//  150  *          len  - max length number of bytes to copy to 'buf'
//  151  *
//  152  * @return  length of buffer that was read
//  153  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  154 uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
HalUARTRead:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function HalUARTRead
        CODE
//  155 {
        FUNCALL HalUARTRead, HalUARTReadISR
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  156   (void)port;
//  157   (void)buf;
//  158   (void)len;
//  159 
//  160 #if (HAL_UART_DMA == 1)
//  161   if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
//  162 #endif
//  163 #if (HAL_UART_DMA == 2)
//  164   if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
//  165 #endif
//  166 #if (HAL_UART_ISR == 1)
//  167   if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
        JNZ     ??HalUARTRead_0
        ; Setup parameters for call to function HalUARTReadISR
        LCALL   ??HalUARTReadISR?relay
        SJMP    ??HalUARTRead_1
//  168 #endif
//  169 #if (HAL_UART_ISR == 2)
//  170   if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
//  171 #endif
//  172 
//  173 #if HAL_UART_USB
//  174   return HalUARTRx(buf, len);
//  175 #else
//  176   return 0;
??HalUARTRead_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
          CFI EndBlock cfiBlock18
??HalUARTRead_1:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  177 #endif
//  178 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock19
//  179 
//  180 /******************************************************************************
//  181  * @fn      HalUARTWrite
//  182  *
//  183  * @brief   Write a buffer to the UART.
//  184  *
//  185  * @param   port - UART port
//  186  *          buf  - pointer to the buffer that will be written, not freed
//  187  *          len  - length of
//  188  *
//  189  * @return  length of the buffer that was sent
//  190  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  191 uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
HalUARTWrite:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function HalUARTWrite
        CODE
//  192 {
        FUNCALL HalUARTWrite, HalUARTWriteISR
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  193   (void)port;
//  194   (void)buf;
//  195   (void)len;
//  196 
//  197 #if (HAL_UART_DMA == 1)
//  198   if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
//  199 #endif
//  200 #if (HAL_UART_DMA == 2)
//  201   if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
//  202 #endif
//  203 #if (HAL_UART_ISR == 1)
//  204   if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
        JNZ     ??HalUARTWrite_0
        ; Setup parameters for call to function HalUARTWriteISR
        LCALL   ??HalUARTWriteISR?relay
        SJMP    ??HalUARTWrite_1
//  205 #endif
//  206 #if (HAL_UART_ISR == 2)
//  207   if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
//  208 #endif
//  209 
//  210 #if HAL_UART_USB
//  211   HalUARTTx(buf, len);
//  212   return len;
//  213 #else
//  214   return 0;
??HalUARTWrite_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??HalUARTWrite_1:
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock20
//  215 #endif
//  216 }
//  217 
//  218 /******************************************************************************
//  219  * @fn      HalUARTSuspend
//  220  *
//  221  * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
//  222  *
//  223  * @param   None
//  224  *
//  225  * @return  None
//  226  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  227 void HalUARTSuspend( void )
HalUARTSuspend:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function HalUARTSuspend
        CODE
//  228 {
        ; Saved register size: 0
        ; Auto size: 0
//  229 #if HAL_UART_DMA
//  230   HalUARTSuspendDMA();
//  231 #endif
//  232 #if HAL_UART_ISR
//  233   HalUARTSuspendISR();
        ANL     0x86,#0xbf
//  234 #endif
//  235 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock21
        REQUIRE U0CSR
//  236 
//  237 /******************************************************************************
//  238  * @fn      HalUARTResume
//  239  *
//  240  * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
//  241  *
//  242  * @param   None
//  243  *
//  244  * @return  None
//  245  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  246 void HalUARTResume( void )
HalUARTResume:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function HalUARTResume
        CODE
//  247 {
        ; Saved register size: 0
        ; Auto size: 0
//  248 #if HAL_UART_DMA
//  249   HalUARTResumeDMA();
//  250 #endif
//  251 #if HAL_UART_ISR
//  252   HalUARTResumeISR();
        ORL     0xc4,#0x80
        ORL     0x86,#0x40
//  253 #endif
//  254 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock22
        REQUIRE U0UCR
        REQUIRE U0CSR
//  255 
//  256 /***************************************************************************************************
//  257  * @fn      HalUARTPoll
//  258  *
//  259  * @brief   Poll the UART.
//  260  *
//  261  * @param   none
//  262  *
//  263  * @return  none
//  264  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  265 void HalUARTPoll(void)
HalUARTPoll:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function HalUARTPoll
        CODE
//  266 {
        FUNCALL HalUARTPoll, HalUARTPollISR
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  267 #if HAL_UART_DMA
//  268   HalUARTPollDMA();
//  269 #endif
//  270 #if HAL_UART_ISR
//  271   HalUARTPollISR();
        ; Setup parameters for call to function HalUARTPollISR
        LCALL   ??HalUARTPollISR?relay
          CFI EndBlock cfiBlock23
//  272 #endif
//  273 #if HAL_UART_USB
//  274   HalUARTPollUSB();
//  275 #endif
//  276 }
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock24
//  277 
//  278 /**************************************************************************************************
//  279  * @fn      Hal_UART_RxBufLen()
//  280  *
//  281  * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
//  282  *
//  283  * @param   port - UART port
//  284  *
//  285  * @return  length of current Rx Buffer
//  286  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  287 uint16 Hal_UART_RxBufLen( uint8 port )
Hal_UART_RxBufLen:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function Hal_UART_RxBufLen
        CODE
//  288 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  289   (void)port;
//  290 
//  291 #if (HAL_UART_DMA == 1)
//  292   if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
//  293 #endif
//  294 #if (HAL_UART_DMA == 2)
//  295   if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
//  296 #endif
//  297 #if (HAL_UART_ISR == 1)
//  298   if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
        MOV     A,R1
        JNZ     ??Hal_UART_RxBufLen_0
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        JC      ??Hal_UART_RxBufLen_1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#isrCfg + 128
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R2
        CLR     C
        SUBB    A,R4
        MOV     R2,A
        SUBB    A,0xE0 /* A   */
        SJMP    ??Hal_UART_RxBufLen_2
??Hal_UART_RxBufLen_1:
        MOV     DPTR,#isrCfg + 128
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#-0x80
        CLR     C
        SUBB    A,R2
        MOV     R2,A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R2
        ADD     A,R4
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
??Hal_UART_RxBufLen_2:
        MOV     R3,A
        SJMP    ??Hal_UART_RxBufLen_3
//  299 #endif
//  300 #if (HAL_UART_ISR == 2)
//  301   if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
//  302 #endif
//  303 #if HAL_UART_USB
//  304   return HalUARTRxAvailUSB();
//  305 #else
//  306   return 0;
??Hal_UART_RxBufLen_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Hal_UART_RxBufLen_3:
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock25
//  307 #endif
//  308 }

        COMMON INTVEC:CODE:ROOT(0)
        ORG 19
`??halUart0RxIsr??INTVEC 19`:
        LJMP       (halUart0RxIsr)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 59
`??halUart0TxIsr??INTVEC 59`:
        LJMP       (halUart0TxIsr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTReadISR?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTReadISR

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTWriteISR?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTWriteISR

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTPollISR?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTPollISR

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTInit?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTOpen?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTOpen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTRead?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTWrite?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTSuspend?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTSuspend

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTResume?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTResume

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTPoll?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalUARTPoll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Hal_UART_RxBufLen?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Hal_UART_RxBufLen

        END
//  309 
//  310 /******************************************************************************
//  311 ******************************************************************************/
// 
// 680 bytes in segment BANKED_CODE
//  66 bytes in segment BANK_RELAYS
//   6 bytes in segment INTVEC
// 167 bytes in segment NEAR_CODE
//  13 bytes in segment SFR_AN
// 265 bytes in segment XDATA_Z
// 
// 913 bytes of CODE  memory (+  6 bytes shared)
//   0 bytes of DATA  memory (+ 13 bytes shared)
// 265 bytes of XDATA memory
//
//Errors: none
//Warnings: none
