###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             09/Dec/2016  16:54:36 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Components\stack\nwk\BindingTable.c         #
#    Command line       =  -f "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾ (2)\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev #
#                          .cfg" (-DCPU32MHZ -DROOT=__near_func               #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f "E:\Lib\micro-electromechan #
#                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp - ¸±±¾ (2)\CC2530DB\..\..\..\Tools #
#                          \CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0   #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00100000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 E:\Lib\micro-electromechani #
#                          cal\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Components\stack\nwk #
#                          \BindingTable.c -D NWK_AUTO_POLL -D ZTOOL_P1 -D    #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC           #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\EndDeviceEB\List\" -lA                #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\EndDeviceEB\List\" --diag_suppress    #
#                          Pe001,Pa010 -o "E:\Lib\micro-electromechanical\Ê±Ñ #
#                          Ó\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gen #
#                          ericApp - ¸±±¾ (2)\CC2530DB\EndDeviceEB\Obj\" -e   #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾ (2)\CC2530DB\" -I "E:\Lib\micro-electromechan #
#                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp - ¸±±¾ (2)\CC2530DB\..\Source\"    #
#                          -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾ (2)\CC2530DB\..\..\..\ZMain\TI2530DB\" -I     #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\hal\include #
#                          \" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack- #
#                          CC2530-2.5.1a\Projects\zstack\Samples\GenericApp   #
#                          - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Components\hal\ #
#                          target\CC2530EB\" -I "E:\Lib\micro-electromechanic #
#                          al\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sampl #
#                          es\GenericApp - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\C #
#                          omponents\mac\include\" -I                         #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\mac\high_le #
#                          vel\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZSta #
#                          ck-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp #
#                          p - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Components\ma #
#                          c\low_level\srf04\" -I "E:\Lib\micro-electromechan #
#                          ical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Sam #
#                          ples\GenericApp - ¸±±¾ (2)\CC2530DB\..\..\..\..\.. #
#                          \Components\mac\low_level\srf04\single_chip\" -I   #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\mt\" -I     #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\osal\includ #
#                          e\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack #
#                          -CC2530-2.5.1a\Projects\zstack\Samples\GenericApp  #
#                          - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Components\serv #
#                          ices\saddr\" -I "E:\Lib\micro-electromechanical\Ê± #
#                          ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Ge #
#                          nericApp - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Compon #
#                          ents\services\sdata\" -I                           #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\stack\af\"  #
#                          -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2 #
#                          530-2.5.1a\Projects\zstack\Samples\GenericApp -    #
#                          ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Components\stack\ #
#                          nwk\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZSta #
#                          ck-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp #
#                          p - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Components\st #
#                          ack\sapi\" -I "E:\Lib\micro-electromechanical\Ê±ÑÓ #
#                          \ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gene #
#                          ricApp - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Componen #
#                          ts\stack\sec\" -I "E:\Lib\micro-electromechanical\ #
#                          Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\Comp #
#                          onents\stack\sys\" -I "E:\Lib\micro-electromechani #
#                          cal\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\GenericApp - ¸±±¾ (2)\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\zdo\" -I                          #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\zmac\" -I   #
#                          "E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530 #
#                          -2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾  #
#                          (2)\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"  #
#                          -Ohz --require_prototypes                          #
#    List file          =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾   #
#                          (2)\CC2530DB\EndDeviceEB\List\BindingTable.lst     #
#    Object file        =  E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\GenericApp - ¸±±¾   #
#                          (2)\CC2530DB\EndDeviceEB\Obj\BindingTable.r51      #
#                                                                             #
#                                                                             #
###############################################################################

E:\Lib\micro-electromechanical\Ê±ÑÓ\ZStack-CC2530-2.5.1a\Components\stack\nwk\BindingTable.c
      1          /**************************************************************************************************
      2            Filename:       BindingTable.c
      3            Revised:        $Date: 2012-03-28 15:40:50 -0700 (Wed, 28 Mar 2012) $
      4            Revision:       $Revision: 29930 $
      5          
      6            Description:    Device binding table functions.
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "nwk_globals.h"
     47          #include "AddrMgr.h"
     48          #include "BindingTable.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          #define NV_BIND_EMPTY   0xFF
     58          #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
     59          #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
     60          
     61          /*********************************************************************
     62           * TYPEDEFS
     63           */
     64          typedef struct
     65          {
     66            uint8        srcEP;
     67            uint16       srcIndex;
     68            uint16       dstIndex;
     69            uint8        dstEP;
     70            uint8        dstAddrMode;
     71            uint8        clusterIDs;
     72            uint16*      clusterIDList;
     73          } bindFields_t;
     74          
     75          /*********************************************************************
     76           * GLOBAL VARIABLES
     77           */
     78          
     79          /*********************************************************************
     80           * LOCAL FUNCTIONS
     81           */
     82          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
     83                              AddrMgrEntry_t *entryNew );
     84          BindingEntry_t *bindFindEmpty( void );
     85          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
     86          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
     87          void bindAddrMgrLocalLoad( void );
     88          uint16 bindAddrIndexGet( zAddrType_t* addr );
     89          
     90          /*********************************************************************
     91           * LOCAL VARIABLES
     92           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          static uint8 bindAddrMgrLocalLoaded = FALSE;
   \                     bindAddrMgrLocalLoaded:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     94          
     95          /*********************************************************************
     96           * Function Pointers
     97           */
     98          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
   \                     pbindAddEntry:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    100                                            zAddrType_t *dstAddr, byte dstEpInt,
    101                                            byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
   \                     pbindNumOfEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
   \                     pbindRemoveDev:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          byte (*pBindInitNV)( void ) = (void*)NULL;
   \                     pBindInitNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          void (*pBindSetDefaultNV)( void ) = (void*)NULL;
   \                     pBindSetDefaultNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
   \                     pBindRestoreFromNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          void (*pBindWriteNV)( void ) = (void*)NULL;
   \                     pBindWriteNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    108          
    109          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    110          /*********************************************************************
    111           * @fn      BindAddrMgrCB()
    112           *
    113           * @brief   Address Manager Callback function
    114           *
    115           * @param   update -
    116           * @param   entry -
    117           *
    118           * @return  pointer to
    119           */
    120          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
    121                              AddrMgrEntry_t *entryOld )
    122          {
    123            // Check for either deleted items or changed Extended (Duplicate) addresses
    124          }
    125          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
    126          
    127          /*********************************************************************
    128           * @fn      InitBindingTable()
    129           *
    130           * @brief
    131           *
    132           *   This function is used to initialise the binding table
    133           *
    134           * @param   none
    135           *
    136           * @return  none
    137           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    138          void InitBindingTable( void )
   \                     InitBindingTable:
    139          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    140            osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
   \   000005                ; Setup parameters for call to function osal_memset
   \   000005   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000008   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00000B   EC           MOV     A,R4
   \   00000C   85..F0       MOV     B,?V0 + 0
   \   00000F   A4           MUL     AB
   \   000010   CC           XCH     A,R4
   \   000011   A8F0         MOV     R0,B
   \   000013   85..F0       MOV     B,?V0 + 1
   \   000016   A4           MUL     AB
   \   000017   28           ADD     A,R0
   \   000018   F8           MOV     R0,A
   \   000019   85..F0       MOV     B,?V0 + 0
   \   00001C   ED           MOV     A,R5
   \   00001D   A4           MUL     AB
   \   00001E   28           ADD     A,R0
   \   00001F   FD           MOV     R5,A
   \   000020   79FF         MOV     R1,#-0x1
   \   000022   7A..         MOV     R2,#BindingTable & 0xff
   \   000024   7B..         MOV     R3,#(BindingTable >> 8) & 0xff
   \   000026   12....       LCALL   ??osal_memset?relay
    141          
    142            pbindAddEntry = bindAddEntry;
   \   000029   90....       MOV     DPTR,#pbindAddEntry
   \   00002C   74..         MOV     A,#??bindAddEntry?relay & 0xff
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   74..         MOV     A,#(??bindAddEntry?relay >> 8) & 0xff
   \   000032   F0           MOVX    @DPTR,A
    143            pbindNumOfEntries = bindNumOfEntries;
   \   000033   90....       MOV     DPTR,#pbindNumOfEntries
   \   000036   74..         MOV     A,#??bindNumOfEntries?relay & 0xff
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   74..         MOV     A,#(??bindNumOfEntries?relay >> 8) & 0xff
   \   00003C   F0           MOVX    @DPTR,A
    144            pbindRemoveDev = bindRemoveDev;
   \   00003D   90....       MOV     DPTR,#pbindRemoveDev
   \   000040   74..         MOV     A,#??bindRemoveDev?relay & 0xff
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   74..         MOV     A,#(??bindRemoveDev?relay >> 8) & 0xff
   \   000046   F0           MOVX    @DPTR,A
    145            pBindInitNV = BindInitNV;
   \   000047   90....       MOV     DPTR,#pBindInitNV
   \   00004A   74..         MOV     A,#??BindInitNV?relay & 0xff
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   74..         MOV     A,#(??BindInitNV?relay >> 8) & 0xff
   \   000050   F0           MOVX    @DPTR,A
    146            pBindSetDefaultNV = BindSetDefaultNV;
   \   000051   90....       MOV     DPTR,#pBindSetDefaultNV
   \   000054   74..         MOV     A,#??BindSetDefaultNV?relay & 0xff
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   74..         MOV     A,#(??BindSetDefaultNV?relay >> 8) & 0xff
   \   00005A   F0           MOVX    @DPTR,A
    147            pBindRestoreFromNV = BindRestoreFromNV;
   \   00005B   90....       MOV     DPTR,#pBindRestoreFromNV
   \   00005E   74..         MOV     A,#??BindRestoreFromNV?relay & 0xff
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   74..         MOV     A,#(??BindRestoreFromNV?relay >> 8) & 0xff
   \   000064   F0           MOVX    @DPTR,A
    148            pBindWriteNV = BindWriteNV;
   \   000065   90....       MOV     DPTR,#pBindWriteNV
   \   000068   74..         MOV     A,#??BindWriteNV?relay & 0xff
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   74..         MOV     A,#(??BindWriteNV?relay >> 8) & 0xff
   \   00006E   F0           MOVX    @DPTR,A
    149          
    150            bindAddrMgrLocalLoaded = FALSE;
   \   00006F   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   000072   E4           CLR     A
   \   000073   F0           MOVX    @DPTR,A
    151          
    152          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    153            // Register with the address manager
    154            AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
    155          #endif
    156          }
   \   000074   80..         SJMP    ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000003                REQUIRE ??Subroutine36_0
   \   000003                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   E4           CLR     A
   \   000001   93           MOVC    A,@A+DPTR
   \   000002   FC           MOV     R4,A
   \   000003   7401         MOV     A,#0x1
   \   000005   93           MOVC    A,@A+DPTR
   \   000006   FD           MOV     R5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000003   E4           CLR     A
   \   000004   93           MOVC    A,@A+DPTR
   \   000005   F5..         MOV     ?V0 + 0,A
   \   000007   7401         MOV     A,#0x1
   \   000009   93           MOVC    A,@A+DPTR
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   22           RET
    157          
    158          /*********************************************************************
    159           * @fn      bindFindEmpty()
    160           *
    161           * @brief   This function returns a pointer to an empty binding slot
    162           *
    163           * @param   none
    164           *
    165           * @return  pointer to binding table entry, NULL if not added
    166           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    167          BindingEntry_t *bindFindEmpty( void )
   \                     bindFindEmpty:
    168          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    169            uint16 x;
    170          
    171            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000004   7800         MOV     R0,#0x0
   \   000006   7900         MOV     R1,#0x0
   \   000008   8003         SJMP    ??CrossCallReturnLabel_19
   \                     ??bindFindEmpty_0:
   \   00000A   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00000D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000010   501D         JNC     ??bindFindEmpty_1
    172            {
    173              // It's empty if the index is "Not Found"
    174              if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
   \   000012   E8           MOV     A,R0
   \   000013   FA           MOV     R2,A
   \   000014   E9           MOV     A,R1
   \   000015   FB           MOV     R3,A
   \   000016   EA           MOV     A,R2
   \   000017   75F00E       MOV     B,#0xe
   \   00001A   A4           MUL     AB
   \   00001B   FA           MOV     R2,A
   \   00001C   ACF0         MOV     R4,B
   \   00001E   75F00E       MOV     B,#0xe
   \   000021   EB           MOV     A,R3
   \   000022   A4           MUL     AB
   \   000023   2C           ADD     A,R4
   \   000024   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000027   F4           CPL     A
   \   000028   70E0         JNZ     ??bindFindEmpty_0
    175              {
    176                return ( &BindingTable[x] );
   \   00002A   12....       LCALL   ?Subroutine15 & 0xFFFF
    177              }
    178            }
   \                     ??CrossCallReturnLabel_60:
   \   00002D   8004         SJMP    ??bindFindEmpty_2
    179          
    180            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindEmpty_1:
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \                     ??bindFindEmpty_2:
   \   000033   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    181          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   FB           MOV     R3,A
   \   000001   74..         MOV     A,#BindingTable & 0xff
   \   000003   2A           ADD     A,R2
   \   000004   F582         MOV     DPL,A
   \   000006   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000008   3B           ADDC    A,R3
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E8           MOV     A,R0
   \   000001   2401         ADD     A,#0x1
   \   000003   08           INC     R0
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E8           MOV     A,R0
   \   000001   75F00E       MOV     B,#0xe
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   AAF0         MOV     R2,B
   \   000008                REQUIRE ??Subroutine37_0
   \   000008                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   FA           MOV     R2,A
   \   000004   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000006   39           ADDC    A,R1
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000003   E4           CLR     A
   \   000004   93           MOVC    A,@A+DPTR
   \   000005   FA           MOV     R2,A
   \   000006   7401         MOV     A,#0x1
   \   000008   93           MOVC    A,@A+DPTR
   \   000009   FB           MOV     R3,A
   \   00000A   C3           CLR     C
   \   00000B   E8           MOV     A,R0
   \   00000C   9A           SUBB    A,R2
   \   00000D   E9           MOV     A,R1
   \   00000E   9B           SUBB    A,R3
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   75F00E       MOV     B,#0xe
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine42_0
   \   000004                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   A4           MUL     AB
   \   000001   2A           ADD     A,R2
   \   000002   F9           MOV     R1,A
   \   000003   74..         MOV     A,#BindingTable & 0xff
   \   000005   28           ADD     A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    182          
    183          /*********************************************************************
    184           * @fn      bindNumOfEntries()
    185           *
    186           * @brief   This function returns the number of binding table entries.
    187           *          The return for this is the number of clusters in the
    188           *          table NOT the number of entries.
    189           *
    190           * @param   none
    191           *
    192           * @return  number of entries
    193           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    194          uint16 bindNumOfEntries( void )
   \                     bindNumOfEntries:
    195          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    196            uint16 x;
    197            uint16 found;
    198          
    199            for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   7800         MOV     R0,#0x0
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   8048         SJMP    ??CrossCallReturnLabel_20
    200            {
    201              // It's empty if the index is "Not Found"
    202              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \                     ??bindNumOfEntries_0:
   \   00000F   E8           MOV     A,R0
   \   000010   FC           MOV     R4,A
   \   000011   E9           MOV     A,R1
   \   000012   FD           MOV     R5,A
   \   000013   EC           MOV     A,R4
   \   000014   75F00E       MOV     B,#0xe
   \   000017   A4           MUL     AB
   \   000018   FC           MOV     R4,A
   \   000019   AEF0         MOV     R6,B
   \   00001B   75F00E       MOV     B,#0xe
   \   00001E   ED           MOV     A,R5
   \   00001F   A4           MUL     AB
   \   000020   2E           ADD     A,R6
   \   000021   FD           MOV     R5,A
   \   000022   74..         MOV     A,#BindingTable & 0xff
   \   000024   2C           ADD     A,R4
   \   000025   F582         MOV     DPL,A
   \   000027   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000029   3D           ADDC    A,R5
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F4           CPL     A
   \   00002E   6024         JZ      ??bindNumOfEntries_1
    203              {
    204                found += BindingTable[x].numClusterIds;
   \   000030   E8           MOV     A,R0
   \   000031   FC           MOV     R4,A
   \   000032   E9           MOV     A,R1
   \   000033   FD           MOV     R5,A
   \   000034   EC           MOV     A,R4
   \   000035   75F00E       MOV     B,#0xe
   \   000038   A4           MUL     AB
   \   000039   FC           MOV     R4,A
   \   00003A   75F00E       MOV     B,#0xe
   \   00003D   ED           MOV     A,R5
   \   00003E   A4           MUL     AB
   \   00003F   2E           ADD     A,R6
   \   000040   FD           MOV     R5,A
   \   000041   74..         MOV     A,#(BindingTable + 5) & 0xff
   \   000043   2C           ADD     A,R4
   \   000044   F582         MOV     DPL,A
   \   000046   74..         MOV     A,#((BindingTable + 5) >> 8) & 0xff
   \   000048   3D           ADDC    A,R5
   \   000049   F583         MOV     DPH,A
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FC           MOV     R4,A
   \   00004D   EA           MOV     A,R2
   \   00004E   2C           ADD     A,R4
   \   00004F   FA           MOV     R2,A
   \   000050   EB           MOV     A,R3
   \   000051   3400         ADDC    A,#0x0
   \   000053   FB           MOV     R3,A
    205              }
    206            }
   \                     ??bindNumOfEntries_1:
   \   000054   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000057   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00005A   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00005D   C3           CLR     C
   \   00005E   E8           MOV     A,R0
   \   00005F   9C           SUBB    A,R4
   \   000060   E9           MOV     A,R1
   \   000061   9D           SUBB    A,R5
   \   000062   40AB         JC      ??bindNumOfEntries_0
    207          
    208            return ( found );
   \   000064   02....       LJMP    ?Subroutine2 & 0xFFFF
    209          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    210          
    211          /*********************************************************************
    212           * @fn      bindCapacity()
    213           *
    214           * @brief   This function returns the number of binding entries
    215           *          possible and used.
    216           *
    217           * @param   maxEntries - pointer to a place to put the max entries
    218           * @param   usedEntries - pointer to a place to put the number
    219           *               of used entries
    220           *
    221           * @return  none
    222           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    223          void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
   \                     bindCapacity:
    224          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    225            uint16 x;
    226            uint16 used;
    227          
    228            for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   \   00000B   7800         MOV     R0,#0x0
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   800B         SJMP    ??CrossCallReturnLabel_21
    229            {
    230              // It's empty if the index is "Not Found"
    231              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \                     ??bindCapacity_0:
   \   000011   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000014   6003         JZ      ??CrossCallReturnLabel_26
    232              {
    233                used++;
   \   000016   12....       LCALL   ?Subroutine21 & 0xFFFF
    234              }
    235            }
   \                     ??CrossCallReturnLabel_26:
   \   000019   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00001C   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00001F   40F0         JC      ??bindCapacity_0
    236          
    237            *maxEntries = gNWK_MAX_BINDING_ENTRIES;
   \   000021   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E8           MOV     A,R0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E9           MOV     A,R1
   \   00002C   F0           MOVX    @DPTR,A
    238            *usedEntries = used;
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   E5..         MOV     A,?V0 + 0
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   E5..         MOV     A,?V0 + 1
   \   000037   F0           MOVX    @DPTR,A
    239          }
   \   000038                REQUIRE ?Subroutine3
   \   000038                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   E4           CLR     A
   \   000001   93           MOVC    A,@A+DPTR
   \   000002   F8           MOV     R0,A
   \   000003   7401         MOV     A,#0x1
   \   000005   93           MOVC    A,@A+DPTR
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2401         ADD     A,#0x1
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E8           MOV     A,R0
   \   000001   FE           MOV     R6,A
   \   000002   E9           MOV     A,R1
   \   000003   FF           MOV     R7,A
   \   000004   EE           MOV     A,R6
   \   000005   75F00E       MOV     B,#0xe
   \   000008   A4           MUL     AB
   \   000009   FE           MOV     R6,A
   \   00000A   85F0..       MOV     ?V0 + 2,B
   \   00000D   75F00E       MOV     B,#0xe
   \   000010   EF           MOV     A,R7
   \   000011   A4           MUL     AB
   \   000012   25..         ADD     A,?V0 + 2
   \   000014   FF           MOV     R7,A
   \   000015   74..         MOV     A,#BindingTable & 0xff
   \   000017   2E           ADD     A,R6
   \   000018   F582         MOV     DPL,A
   \   00001A   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00001C   3F           ADDC    A,R7
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F4           CPL     A
   \   000021   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000003   E4           CLR     A
   \   000004   93           MOVC    A,@A+DPTR
   \   000005   FE           MOV     R6,A
   \   000006   7401         MOV     A,#0x1
   \   000008   93           MOVC    A,@A+DPTR
   \   000009   FF           MOV     R7,A
   \   00000A   C3           CLR     C
   \   00000B   E8           MOV     A,R0
   \   00000C   9E           SUBB    A,R6
   \   00000D   E9           MOV     A,R1
   \   00000E   9F           SUBB    A,R7
   \   00000F   22           RET
    240          
    241          /*********************************************************************
    242           * @fn      bindAddEntry()
    243           *
    244           * @brief   This function is used to Add an entry to the binding table
    245           *
    246           * @param       srcAddr - source Address
    247           * @param       srcEpInt - source endpoint
    248           * @param       dstAddr - destination Address
    249           * @param       dstEpInt - destination endpoint
    250           * @param       numClusterIds - number of cluster Ids in the list
    251           * @param       clusterIds - pointer to the Object ID list
    252           *
    253           * @return  pointer to binding table entry, NULL if not added
    254           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    255          BindingEntry_t *bindAddEntry( byte srcEpInt,
   \                     bindAddEntry:
    256                                        zAddrType_t *dstAddr, byte dstEpInt,
    257                                        byte numClusterIds, uint16 *clusterIds )
    258          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 7,R1
   \   000007   8A..         MOV     ?V0 + 2,R2
   \   000009   8B..         MOV     ?V0 + 3,R3
   \   00000B   8C..         MOV     ?V0 + 9,R4
   \   00000D   8D..         MOV     ?V0 + 0,R5
    259            uint8           index;
    260            BindingEntry_t* entry;
    261            bindFields_t    fields;
    262          
    263            // initialize results
    264            entry = NULL;
   \   00000F   7E00         MOV     R6,#0x0
   \   000011   7F00         MOV     R7,#0x0
    265          
    266            // make sure local addresses have been loaded
    267            bindAddrMgrLocalLoad();
   \   000013                ; Setup parameters for call to function bindAddrMgrLocalLoad
   \   000013   12....       LCALL   ??bindAddrMgrLocalLoad?relay
    268          
    269            // setup fields
    270            fields.dstIndex = bindAddrIndexGet( dstAddr );
   \   000016                ; Setup parameters for call to function bindAddrIndexGet
   \   000016   AA..         MOV     R2,?V0 + 2
   \   000018   AB..         MOV     R3,?V0 + 3
   \   00001A   12....       LCALL   ??bindAddrIndexGet?relay
   \   00001D   8A..         MOV     ?V0 + 4,R2
   \   00001F   8B..         MOV     ?V0 + 5,R3
    271            fields.srcEP    = srcEpInt;
    272          
    273            if ( dstAddr->addrMode == AddrGroup )
   \   000021   85..82       MOV     DPL,?V0 + 2
   \   000024   85..83       MOV     DPH,?V0 + 3
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6401         XRL     A,#0x1
   \   000032   7007         JNZ     ??bindAddEntry_0
    274            {
    275              fields.dstAddrMode = DSTGROUPMODE_GROUP;
   \   000034   75..01       MOV     ?V0 + 8,#0x1
    276              fields.dstEP       = 0;
   \   000037   8E..         MOV     ?V0 + 1,R6
   \   000039   8005         SJMP    ??bindAddEntry_1
    277            }
    278            else
    279            {
    280              fields.dstAddrMode = DSTGROUPMODE_ADDR;
   \                     ??bindAddEntry_0:
   \   00003B   8E..         MOV     ?V0 + 8,R6
    281              fields.dstEP       = dstEpInt;
   \   00003D   85....       MOV     ?V0 + 1,?V0 + 9
    282            }
    283          
    284            if ( fields.dstIndex != INVALID_NODE_ADDR  )
   \                     ??bindAddEntry_1:
   \   000040   74FE         MOV     A,#-0x2
   \   000042   65..         XRL     A,?V0 + 4
   \   000044   7004         JNZ     ??bindAddEntry_2
   \   000046   74FF         MOV     A,#-0x1
   \   000048   65..         XRL     A,?V0 + 5
   \                     ??bindAddEntry_2:
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
    285            {
    286              for ( index = 0; index < gNWK_MAX_BINDING_ENTRIES; index++ )
   \   00004F   8E..         MOV     ?V0 + 6,R6
   \   000051   7414         MOV     A,#0x14
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F5..         MOV     ?V0 + 2,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F5..         MOV     ?V0 + 3,A
   \   00005D   8002         SJMP    ??bindAddEntry_4
   \                     ??bindAddEntry_5:
   \   00005F   05..         INC     ?V0 + 6
   \                     ??bindAddEntry_4:
   \   000061   85....       MOV     ?V0 + 10,?V0 + 6
   \   000064   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000067   C3           CLR     C
   \   000068   E5..         MOV     A,?V0 + 10
   \   00006A   98           SUBB    A,R0
   \   00006B   E4           CLR     A
   \   00006C   99           SUBB    A,R1
   \   00006D   5062         JNC     ??bindAddEntry_6
    287              {
    288                if ( ( fields.srcEP       == BindingTable[index].srcEP        ) &&
    289                     ( fields.dstAddrMode == BindingTable[index].dstGroupMode ) &&
    290                     ( fields.dstIndex    == BindingTable[index].dstIdx       ) &&
    291                     ( fields.dstEP       == BindingTable[index].dstEP        )    )
   \   00006F   E5..         MOV     A,?V0 + 6
   \   000071   75F00E       MOV     B,#0xe
   \   000074   A4           MUL     AB
   \   000075   F8           MOV     R0,A
   \   000076   A9F0         MOV     R1,B
   \   000078   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00007B   65..         XRL     A,?V0 + 7
   \   00007D   70E0         JNZ     ??bindAddEntry_5
   \   00007F   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000082   65..         XRL     A,?V0 + 8
   \   000084   70D9         JNZ     ??bindAddEntry_5
   \   000086   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000089   65..         XRL     A,?V0 + 4
   \   00008B   7004         JNZ     ??bindAddEntry_7
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   65..         XRL     A,?V0 + 5
   \                     ??bindAddEntry_7:
   \   000091   70CC         JNZ     ??bindAddEntry_5
   \   000093   74..         MOV     A,#(BindingTable + 4) & 0xff
   \   000095   28           ADD     A,R0
   \   000096   F582         MOV     DPL,A
   \   000098   74..         MOV     A,#((BindingTable + 4) >> 8) & 0xff
   \   00009A   39           ADDC    A,R1
   \   00009B   F583         MOV     DPH,A
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   65..         XRL     A,?V0 + 1
   \   0000A0   70BD         JNZ     ??bindAddEntry_5
    292                {
    293                  entry = &BindingTable[index];
   \   0000A2   74..         MOV     A,#BindingTable & 0xff
   \   0000A4   28           ADD     A,R0
   \   0000A5   FE           MOV     R6,A
   \   0000A6   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   0000A8   39           ADDC    A,R1
   \   0000A9   FF           MOV     R7,A
    294          
    295                  // break from loop
    296                  break;
    297                }
    298              }
    299          
    300              if ( entry != NULL )
    301              {
    302                // Loop through the cluster IDs
    303                for ( index = 0; index < numClusterIds; index++ )
   \   0000AA   75..00       MOV     ?V0 + 6,#0x0
   \                     ??bindAddEntry_8:
   \   0000AD   E5..         MOV     A,?V0 + 6
   \   0000AF   C3           CLR     C
   \   0000B0   95..         SUBB    A,?V0 + 0
   \   0000B2   4003         JC      $+5
   \   0000B4   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
    304                {
    305                  // Found - is the cluster already defined?
    306                  if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
   \   0000B7                ; Setup parameters for call to function bindIsClusterIDinList
   \   0000B7   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000BA   12....       LCALL   ??bindIsClusterIDinList?relay
   \   0000BD   E9           MOV     A,R1
   \   0000BE   700D         JNZ     ??bindAddEntry_9
    307                  {
    308                    // Nope, add this cluster
    309                    if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
   \   0000C0                ; Setup parameters for call to function bindAddClusterIdToList
   \   0000C0   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000C3   12....       LCALL   ??bindAddClusterIdToList?relay
   \   0000C6   E9           MOV     A,R1
   \   0000C7   7004         JNZ     ??bindAddEntry_9
    310                    {
    311                      // Indicate error if cluster list was full
    312                      entry = NULL;
   \   0000C9   7E00         MOV     R6,#0x0
   \   0000CB   7F00         MOV     R7,#0x0
    313                    }
    314                  }
    315                }
   \                     ??bindAddEntry_9:
   \   0000CD   05..         INC     ?V0 + 6
   \   0000CF   80DC         SJMP    ??bindAddEntry_8
    316              }
    317              else
    318              {
    319                // Find an empty slot
    320                entry = bindFindEmpty();
   \                     ??bindAddEntry_6:
   \   0000D1                ; Setup parameters for call to function bindFindEmpty
   \   0000D1   12....       LCALL   ??bindFindEmpty?relay
   \   0000D4   8A..         MOV     ?V0 + 10,R2
   \   0000D6   8B..         MOV     ?V0 + 11,R3
   \   0000D8   AE..         MOV     R6,?V0 + 10
   \   0000DA   AF..         MOV     R7,?V0 + 11
    321          
    322                // Check against the maximum number allowed
    323                if ( entry != NULL )
   \   0000DC   EE           MOV     A,R6
   \   0000DD   4F           ORL     A,R7
   \   0000DE   6063         JZ      ??bindAddEntry_3
    324                {
    325                  // Add new entry
    326                  entry->srcEP         = fields.srcEP;
   \   0000E0   8E82         MOV     DPL,R6
   \   0000E2   8F83         MOV     DPH,R7
   \   0000E4   E5..         MOV     A,?V0 + 7
   \   0000E6   F0           MOVX    @DPTR,A
    327                  entry->dstGroupMode  = fields.dstAddrMode;
   \   0000E7   A3           INC     DPTR
   \   0000E8   E5..         MOV     A,?V0 + 8
   \   0000EA   F0           MOVX    @DPTR,A
    328                  entry->dstIdx        = fields.dstIndex;
   \   0000EB   8E82         MOV     DPL,R6
   \   0000ED   8F83         MOV     DPH,R7
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   E5..         MOV     A,?V0 + 4
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   E5..         MOV     A,?V0 + 5
   \   0000F7   F0           MOVX    @DPTR,A
    329                  entry->dstEP         = fields.dstEP;
   \   0000F8   8E82         MOV     DPL,R6
   \   0000FA   8F83         MOV     DPH,R7
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   E5..         MOV     A,?V0 + 1
   \   000102   F0           MOVX    @DPTR,A
    330          
    331                  if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
   \   000103   90....       MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   000106   E4           CLR     A
   \   000107   93           MOVC    A,@A+DPTR
   \   000108   C3           CLR     C
   \   000109   95..         SUBB    A,?V0 + 0
   \   00010B   5004         JNC     ??bindAddEntry_10
    332                  {
    333                    numClusterIds = gMAX_BINDING_CLUSTER_IDS;
   \   00010D   E4           CLR     A
   \   00010E   93           MOVC    A,@A+DPTR
   \   00010F   F5..         MOV     ?V0 + 0,A
    334                  }
    335          
    336                  entry->numClusterIds = numClusterIds;
   \                     ??bindAddEntry_10:
   \   000111   8E82         MOV     DPL,R6
   \   000113   8F83         MOV     DPH,R7
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   E5..         MOV     A,?V0 + 0
   \   00011C   F0           MOVX    @DPTR,A
    337          
    338                  osal_memcpy( entry->clusterIdList,
    339                               clusterIds,
    340                               numClusterIds * sizeof(uint16) );
   \   00011D                ; Setup parameters for call to function osal_memcpy
   \   00011D   85....       MOV     ?V0 + 4,?V0 + 2
   \   000120   85....       MOV     ?V0 + 5,?V0 + 3
   \   000123   75..00       MOV     ?V0 + 6,#0x0
   \   000126   78..         MOV     R0,#?V0 + 4
   \   000128   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00012B   E5..         MOV     A,?V0 + 0
   \   00012D   C3           CLR     C
   \   00012E   33           RLC     A
   \   00012F   FC           MOV     R4,A
   \   000130   E4           CLR     A
   \   000131   33           RLC     A
   \   000132   FD           MOV     R5,A
   \   000133   EE           MOV     A,R6
   \   000134   2406         ADD     A,#0x6
   \   000136   FA           MOV     R2,A
   \   000137   EF           MOV     A,R7
   \   000138   3400         ADDC    A,#0x0
   \   00013A   FB           MOV     R3,A
   \   00013B   12....       LCALL   ??osal_memcpy?relay
   \   00013E   7403         MOV     A,#0x3
   \   000140   12....       LCALL   ?DEALLOC_XSTACK8
    341                }
    342              }
    343            }
    344          
    345            return entry;
   \                     ??bindAddEntry_3:
   \   000143   EE           MOV     A,R6
   \   000144   FA           MOV     R2,A
   \   000145   EF           MOV     A,R7
   \   000146   FB           MOV     R3,A
   \   000147   7F0C         MOV     R7,#0xc
   \   000149   02....       LJMP    ?BANKED_LEAVE_XDATA
    346          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000003                REQUIRE ??Subroutine35_0
   \   000003                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E5..         MOV     A,?V0 + 6
   \   000002   C3           CLR     C
   \   000003   33           RLC     A
   \   000004   F8           MOV     R0,A
   \   000005   E4           CLR     A
   \   000006   33           RLC     A
   \   000007   F9           MOV     R1,A
   \   000008   E5..         MOV     A,?V0 + 2
   \   00000A   28           ADD     A,R0
   \   00000B   F582         MOV     DPL,A
   \   00000D   E5..         MOV     A,?V0 + 3
   \   00000F   39           ADDC    A,R1
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FC           MOV     R4,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FD           MOV     R5,A
   \   000017   EE           MOV     A,R6
   \   000018   FA           MOV     R2,A
   \   000019   EF           MOV     A,R7
   \   00001A   FB           MOV     R3,A
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   74..         MOV     A,#BindingTable & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET
    347          
    348          /*********************************************************************
    349           * @fn      bindRemoveEntry
    350           *
    351           * @brief   Removes a binding table entry.
    352           *
    353           * @param   pBind - pointer to binding table entry to delete
    354           *
    355           * @return  TRUE if Removed, FALSE if not
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          byte bindRemoveEntry( BindingEntry_t *pBind )
   \                     bindRemoveEntry:
    358          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    359            osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
   \   000004                ; Setup parameters for call to function osal_memset
   \   000004   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000007   79FF         MOV     R1,#-0x1
   \   000009   12....       LCALL   ??osal_memset?relay
    360            return ( TRUE );
   \   00000C   7901         MOV     R1,#0x1
   \   00000E   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    361          }
    362          
    363          /*********************************************************************
    364           * @fn      bindIsClusterIDinList()
    365           *
    366           * @brief   Is the clusterID in the clusterID list?
    367           *
    368           * @param   enter - binding table entry
    369           * @param   clusterId  - Cluster ID to look for
    370           *
    371           * @return  TRUE if found, FALSE if not found
    372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    373          byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindIsClusterIDinList:
    374          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    375            uint8 x;
    376          
    377            if ( entry != NULL )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6037         JZ      ??bindIsClusterIDinList_0
    378            {
    379              for ( x = 0; x < entry->numClusterIds; x++ )
   \   000009   7E00         MOV     R6,#0x0
   \   00000B   8001         SJMP    ??bindIsClusterIDinList_1
   \                     ??bindIsClusterIDinList_2:
   \   00000D   0E           INC     R6
   \                     ??bindIsClusterIDinList_1:
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   EE           MOV     A,R6
   \   00001A   C3           CLR     C
   \   00001B   98           SUBB    A,R0
   \   00001C   5022         JNC     ??bindIsClusterIDinList_0
    380              {
    381                if ( entry->clusterIdList[x] == clusterId )
   \   00001E   EE           MOV     A,R6
   \   00001F   C3           CLR     C
   \   000020   33           RLC     A
   \   000021   F8           MOV     R0,A
   \   000022   E4           CLR     A
   \   000023   33           RLC     A
   \   000024   F9           MOV     R1,A
   \   000025   EA           MOV     A,R2
   \   000026   28           ADD     A,R0
   \   000027   F582         MOV     DPL,A
   \   000029   EB           MOV     A,R3
   \   00002A   39           ADDC    A,R1
   \   00002B   F583         MOV     DPH,A
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6C           XRL     A,R4
   \   000035   7003         JNZ     ??bindIsClusterIDinList_3
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6D           XRL     A,R5
   \                     ??bindIsClusterIDinList_3:
   \   00003A   70D1         JNZ     ??bindIsClusterIDinList_2
    382                {
    383                  return ( TRUE );
   \   00003C   7901         MOV     R1,#0x1
   \   00003E   8002         SJMP    ??bindIsClusterIDinList_4
    384                }
    385              }
    386            }
    387          
    388            return ( FALSE );
   \                     ??bindIsClusterIDinList_0:
   \   000040   7900         MOV     R1,#0x0
   \                     ??bindIsClusterIDinList_4:
   \   000042   02....       LJMP    ?Subroutine2 & 0xFFFF
    389          }
    390          
    391          /*********************************************************************
    392           * @fn      bindRemoveClusterIdFromList()
    393           *
    394           * @brief   Removes a ClusterID from a list of ClusterIDs.
    395           *
    396           * @param   enter - binding table entry
    397           * @param   clusterId  - Cluster ID to look for
    398           *
    399           * @return  TRUE if there are at least 1 clusterID left, FALSE if none
    400           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindRemoveClusterIdFromList:
    402          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    403            byte x;
    404            uint16 *listPtr;
    405            byte numIds;
    406          
    407            if ( entry )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   607A         JZ      ??bindRemoveClusterIdFromList_0
    408            {
    409              if ( entry->numClusterIds > 0 )
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   606E         JZ      ??bindRemoveClusterIdFromList_0
    410              {
    411                listPtr = entry->clusterIdList;
   \   000015   EA           MOV     A,R2
   \   000016   2406         ADD     A,#0x6
   \   000018   F8           MOV     R0,A
   \   000019   EB           MOV     A,R3
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   F9           MOV     R1,A
    412                numIds = entry->numClusterIds;
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V0 + 1,A
    413          
    414                // Copy the new list over
    415                for ( x = 0; x < numIds; x++ )
   \   000029   75..00       MOV     ?V0 + 0,#0x0
   \   00002C   8011         SJMP    ??bindRemoveClusterIdFromList_1
    416                {
    417                  if ( entry->clusterIdList[x] != clusterId )
    418                  {
    419                    *listPtr++ = entry->clusterIdList[x];
    420                  }
    421                  else
    422                  {
    423                    entry->numClusterIds--;
   \                     ??bindRemoveClusterIdFromList_2:
   \   00002E   EA           MOV     A,R2
   \   00002F   2405         ADD     A,#0x5
   \   000031   F582         MOV     DPL,A
   \   000033   EB           MOV     A,R3
   \   000034   3400         ADDC    A,#0x0
   \   000036   F583         MOV     DPH,A
   \   000038   E0           MOVX    A,@DPTR
   \   000039   14           DEC     A
   \   00003A   F0           MOVX    @DPTR,A
    424                    if ( entry->numClusterIds == 0 )
   \   00003B   6046         JZ      ??bindRemoveClusterIdFromList_0
    425                    {
    426                      break;
    427                    }
    428                  }
   \                     ??bindRemoveClusterIdFromList_3:
   \   00003D   05..         INC     ?V0 + 0
   \                     ??bindRemoveClusterIdFromList_1:
   \   00003F   E5..         MOV     A,?V0 + 0
   \   000041   C3           CLR     C
   \   000042   95..         SUBB    A,?V0 + 1
   \   000044   502D         JNC     ??bindRemoveClusterIdFromList_4
   \   000046   E5..         MOV     A,?V0 + 0
   \   000048   C3           CLR     C
   \   000049   33           RLC     A
   \   00004A   FE           MOV     R6,A
   \   00004B   E4           CLR     A
   \   00004C   33           RLC     A
   \   00004D   FF           MOV     R7,A
   \   00004E   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000051   6C           XRL     A,R4
   \   000052   7003         JNZ     ??bindRemoveClusterIdFromList_5
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   6D           XRL     A,R5
   \                     ??bindRemoveClusterIdFromList_5:
   \   000057   60D5         JZ      ??bindRemoveClusterIdFromList_2
   \   000059   12....       LCALL   ?Subroutine29 & 0xFFFF
    429                }
    430              }
    431            }
   \                     ??CrossCallReturnLabel_46:
   \   00005C   FE           MOV     R6,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FF           MOV     R7,A
   \   000060   8882         MOV     DPL,R0
   \   000062   8983         MOV     DPH,R1
   \   000064   EE           MOV     A,R6
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   EF           MOV     A,R7
   \   000068   F0           MOVX    @DPTR,A
   \   000069   E8           MOV     A,R0
   \   00006A   2402         ADD     A,#0x2
   \   00006C   F8           MOV     R0,A
   \   00006D   E9           MOV     A,R1
   \   00006E   3400         ADDC    A,#0x0
   \   000070   F9           MOV     R1,A
   \   000071   80CA         SJMP    ??bindRemoveClusterIdFromList_3
   \                     ??bindRemoveClusterIdFromList_4:
   \   000073   8A82         MOV     DPL,R2
   \   000075   8B83         MOV     DPH,R3
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   6004         JZ      ??bindRemoveClusterIdFromList_0
    432          
    433            if ( entry && (entry->numClusterIds > 0) )
    434            {
    435              return ( TRUE );
   \   00007F   7901         MOV     R1,#0x1
   \   000081   8002         SJMP    ??bindRemoveClusterIdFromList_6
    436            }
    437            else
    438            {
    439              return ( FALSE );
   \                     ??bindRemoveClusterIdFromList_0:
   \   000083   7900         MOV     R1,#0x0
    440            }
   \                     ??bindRemoveClusterIdFromList_6:
   \   000085   02....       LJMP    ?Subroutine3 & 0xFFFF
    441          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EA           MOV     A,R2
   \   000001   2E           ADD     A,R6
   \   000002   F582         MOV     DPL,A
   \   000004   EB           MOV     A,R3
   \   000005   3F           ADDC    A,R7
   \   000006   F583         MOV     DPH,A
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET
    442          
    443          /*********************************************************************
    444           * @fn      bindAddClusterIdToList()
    445           *
    446           * @brief   Adds a ClusterID to a list of ClusterIDs.
    447           *
    448           * @param   enter - binding table entry
    449           * @param   clusterId  - Cluster ID to Add
    450           *
    451           * @return  TRUE if Added, FALSE if not
    452           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    453          byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindAddClusterIdToList:
    454          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    455            if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   603A         JZ      ??bindAddClusterIdToList_0
   \   000009   90....       MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   C3           CLR     C
   \   00001A   98           SUBB    A,R0
   \   00001B   5026         JNC     ??bindAddClusterIdToList_0
    456            {
    457              // Add the new one
    458              entry->clusterIdList[entry->numClusterIds] = clusterId;
   \   00001D   EA           MOV     A,R2
   \   00001E   2405         ADD     A,#0x5
   \   000020   F8           MOV     R0,A
   \   000021   EB           MOV     A,R3
   \   000022   3400         ADDC    A,#0x0
   \   000024   F9           MOV     R1,A
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C3           CLR     C
   \   00002B   33           RLC     A
   \   00002C   FE           MOV     R6,A
   \   00002D   E4           CLR     A
   \   00002E   33           RLC     A
   \   00002F   FF           MOV     R7,A
   \   000030   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000033   EC           MOV     A,R4
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   ED           MOV     A,R5
   \   000037   F0           MOVX    @DPTR,A
    459              entry->numClusterIds++;
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   04           INC     A
   \   00003E   F0           MOVX    @DPTR,A
    460              return ( TRUE );
   \   00003F   7901         MOV     R1,#0x1
   \   000041   8002         SJMP    ??bindAddClusterIdToList_1
    461            }
    462            return ( FALSE );
   \                     ??bindAddClusterIdToList_0:
   \   000043   7900         MOV     R1,#0x0
   \                     ??bindAddClusterIdToList_1:
   \   000045                REQUIRE ?Subroutine2
   \   000045                ; // Fall through to label ?Subroutine2
    463          }
    464          
    465          /*********************************************************************
    466           * @fn      bindFindExisting
    467           *
    468           * @brief   Finds an existing src/epint to dst/epint bind record
    469           *
    470           * @param   srcAddr - Source address
    471           * @param   srcEpInt - Source Endpoint/Interface
    472           * @param   dstAddr - Destination address
    473           * @param   dstEpInt - Destination Endpoint/Interface
    474           *
    475           * @return  pointer to existing entry or NULL
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          BindingEntry_t *bindFindExisting( byte srcEpInt,
   \                     bindFindExisting:
    478                                            zAddrType_t *dstAddr, byte dstEpInt )
    479          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 1,R4
    480            uint16 dstIdx;
    481            uint16 x;
    482          
    483            // Find the records in the assoc list
    484            if ( dstAddr->addrMode == AddrGroup )
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6401         XRL     A,#0x1
   \   00001C   700B         JNZ     ??bindFindExisting_0
    485            {
    486              dstIdx = dstAddr->addr.shortAddr;
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FC           MOV     R4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FD           MOV     R5,A
   \   000027   800B         SJMP    ??bindFindExisting_1
    487            }
    488            else
    489            {
    490              dstIdx = bindingAddrMgsHelperFind( dstAddr );
   \                     ??bindFindExisting_0:
   \   000029                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000029   12....       LCALL   ??bindingAddrMgsHelperFind?relay
   \   00002C   8A..         MOV     ?V0 + 2,R2
   \   00002E   8B..         MOV     ?V0 + 3,R3
   \   000030   AC..         MOV     R4,?V0 + 2
   \   000032   AD..         MOV     R5,?V0 + 3
    491            }
    492          
    493            if ( dstIdx == INVALID_NODE_ADDR )
   \                     ??bindFindExisting_1:
   \   000034   74FE         MOV     A,#-0x2
   \   000036   6C           XRL     A,R4
   \   000037   7003         JNZ     ??bindFindExisting_2
   \   000039   74FF         MOV     A,#-0x1
   \   00003B   6D           XRL     A,R5
   \                     ??bindFindExisting_2:
   \   00003C   7003         JNZ     $+5
   \   00003E   02....       LJMP    ??bindFindExisting_3 & 0xFFFF
    494            {
    495              return ( (BindingEntry_t *)NULL );
    496            }
    497          
    498            // Start at the beginning
    499            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000041   7800         MOV     R0,#0x0
   \   000043   7900         MOV     R1,#0x0
   \   000045   8014         SJMP    ??CrossCallReturnLabel_22
    500            {
    501              if ( (BindingTable[x].srcEP == srcEpInt) )
    502              {
    503                if ( ((dstAddr->addrMode == AddrGroup)
    504                        && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    505                        && (dstIdx == BindingTable[x].dstIdx))
    506                   || ((dstAddr->addrMode != AddrGroup)
    507                       && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    508                       && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
   \                     ??bindFindExisting_4:
   \   000047   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00004A   6401         XRL     A,#0x1
   \   00004C   700A         JNZ     ??bindFindExisting_5
   \   00004E   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000051   7003         JNZ     ??bindFindExisting_6
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6D           XRL     A,R5
   \                     ??bindFindExisting_6:
   \   000056   6064         JZ      ??bindFindExisting_7
   \                     ??bindFindExisting_5:
   \   000058   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00005B   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00005E   5061         JNC     ??bindFindExisting_3
   \   000060   E8           MOV     A,R0
   \   000061   FA           MOV     R2,A
   \   000062   E9           MOV     A,R1
   \   000063   FB           MOV     R3,A
   \   000064   EA           MOV     A,R2
   \   000065   75F00E       MOV     B,#0xe
   \   000068   A4           MUL     AB
   \   000069   FA           MOV     R2,A
   \   00006A   85F0..       MOV     ?V0 + 2,B
   \   00006D   75F00E       MOV     B,#0xe
   \   000070   EB           MOV     A,R3
   \   000071   A4           MUL     AB
   \   000072   25..         ADD     A,?V0 + 2
   \   000074   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000077   65..         XRL     A,?V0 + 0
   \   000079   70DD         JNZ     ??bindFindExisting_5
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   6401         XRL     A,#0x1
   \   00008A   60BB         JZ      ??bindFindExisting_4
   \   00008C   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00008F   70C7         JNZ     ??bindFindExisting_5
   \   000091   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000094   7003         JNZ     ??bindFindExisting_8
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   6D           XRL     A,R5
   \                     ??bindFindExisting_8:
   \   000099   70BD         JNZ     ??bindFindExisting_5
   \   00009B   E8           MOV     A,R0
   \   00009C   FA           MOV     R2,A
   \   00009D   E9           MOV     A,R1
   \   00009E   FB           MOV     R3,A
   \   00009F   EA           MOV     A,R2
   \   0000A0   75F00E       MOV     B,#0xe
   \   0000A3   A4           MUL     AB
   \   0000A4   FA           MOV     R2,A
   \   0000A5   75F00E       MOV     B,#0xe
   \   0000A8   EB           MOV     A,R3
   \   0000A9   A4           MUL     AB
   \   0000AA   25..         ADD     A,?V0 + 2
   \   0000AC   FB           MOV     R3,A
   \   0000AD   74..         MOV     A,#(BindingTable + 4) & 0xff
   \   0000AF   2A           ADD     A,R2
   \   0000B0   F582         MOV     DPL,A
   \   0000B2   74..         MOV     A,#((BindingTable + 4) >> 8) & 0xff
   \   0000B4   3B           ADDC    A,R3
   \   0000B5   F583         MOV     DPH,A
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   65..         XRL     A,?V0 + 1
   \   0000BA   709C         JNZ     ??bindFindExisting_5
    509                {
    510                  return ( &BindingTable[x] );
   \                     ??bindFindExisting_7:
   \   0000BC   12....       LCALL   ?Subroutine15 & 0xFFFF
    511                }
    512              }
    513            }
   \                     ??CrossCallReturnLabel_61:
   \   0000BF   8004         SJMP    ??bindFindExisting_9
    514          
    515            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindExisting_3:
   \   0000C1   7A00         MOV     R2,#0x0
   \   0000C3   7B00         MOV     R3,#0x0
   \                     ??bindFindExisting_9:
   \   0000C5   02....       LJMP    ??Subroutine40_0 & 0xFFFF
    516          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E8           MOV     A,R0
   \   000001   FA           MOV     R2,A
   \   000002   E9           MOV     A,R1
   \   000003   FB           MOV     R3,A
   \   000004   EA           MOV     A,R2
   \   000005   75F00E       MOV     B,#0xe
   \   000008   A4           MUL     AB
   \   000009   FA           MOV     R2,A
   \   00000A   75F00E       MOV     B,#0xe
   \   00000D   EB           MOV     A,R3
   \   00000E   A4           MUL     AB
   \   00000F   25..         ADD     A,?V0 + 2
   \   000011   FB           MOV     R3,A
   \   000012   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   000014   2A           ADD     A,R2
   \   000015   F582         MOV     DPL,A
   \   000017   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   000019   3B           ADDC    A,R3
   \   00001A   F583         MOV     DPH,A
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E8           MOV     A,R0
   \   000001   FA           MOV     R2,A
   \   000002   E9           MOV     A,R1
   \   000003   FB           MOV     R3,A
   \   000004   EA           MOV     A,R2
   \   000005   75F00E       MOV     B,#0xe
   \   000008   A4           MUL     AB
   \   000009   FA           MOV     R2,A
   \   00000A   75F00E       MOV     B,#0xe
   \   00000D   EB           MOV     A,R3
   \   00000E   A4           MUL     AB
   \   00000F   25..         ADD     A,?V0 + 2
   \   000011   FB           MOV     R3,A
   \   000012   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   000014   2A           ADD     A,R2
   \   000015   F582         MOV     DPL,A
   \   000017   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   000019   3B           ADDC    A,R3
   \   00001A   F583         MOV     DPH,A
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6C           XRL     A,R4
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    517          
    518          /*********************************************************************
    519           * @fn       bindRemoveDev()
    520           *
    521           * @brief
    522           *
    523           *   Remove all bind(s) entries associated to a device address (destination).
    524           *   Updates binding table.
    525           *
    526           * @param   Addr - address of device to be removed from Binding Table
    527           *
    528           * @return  none
    529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          void bindRemoveDev( zAddrType_t *Addr )
   \                     bindRemoveDev:
    531          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    532            uint16 idx;
    533            uint16 x;
    534          
    535            if ( Addr->addrMode == AddrGroup )
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6401         XRL     A,#0x1
   \   000018   700D         JNZ     ??bindRemoveDev_0
    536            {
    537              idx = Addr->addr.shortAddr;
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 2,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 3,A
   \   000025   8007         SJMP    ??bindRemoveDev_1
    538            }
    539            else
    540            {
    541              idx = bindingAddrMgsHelperFind( Addr );
   \                     ??bindRemoveDev_0:
   \   000027                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000027   12....       LCALL   ??bindingAddrMgsHelperFind?relay
   \   00002A   8A..         MOV     ?V0 + 2,R2
   \   00002C   8B..         MOV     ?V0 + 3,R3
    542            }
    543          
    544            if ( idx == INVALID_NODE_ADDR )
   \                     ??bindRemoveDev_1:
   \   00002E   74FE         MOV     A,#-0x2
   \   000030   65..         XRL     A,?V0 + 2
   \   000032   7004         JNZ     ??bindRemoveDev_2
   \   000034   74FF         MOV     A,#-0x1
   \   000036   65..         XRL     A,?V0 + 3
   \                     ??bindRemoveDev_2:
   \   000038   6055         JZ      ??bindRemoveDev_3
    545            {
    546              return;
    547            }
    548          
    549            // Removes all the entries that match the destination Address/Index
    550            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00003A   7E00         MOV     R6,#0x0
   \   00003C   7F00         MOV     R7,#0x0
   \   00003E   8023         SJMP    ??CrossCallReturnLabel_31
    551            {
    552              if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    553                                                   && (BindingTable[x].dstIdx == idx) ) ||
    554                   ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    555                                                   && (BindingTable[x].dstIdx == idx) ) )
   \                     ??bindRemoveDev_4:
   \   000040   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000043   701B         JNZ     ??bindRemoveDev_5
   \   000045   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000048   7004         JNZ     ??bindRemoveDev_6
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   65..         XRL     A,?V0 + 3
   \                     ??bindRemoveDev_6:
   \   00004E   7010         JNZ     ??bindRemoveDev_5
    556              {
    557                bindRemoveEntry( &BindingTable[x] );
   \                     ??bindRemoveDev_7:
   \   000050                ; Setup parameters for call to function bindRemoveEntry
   \   000050   EE           MOV     A,R6
   \   000051   F8           MOV     R0,A
   \   000052   EF           MOV     A,R7
   \   000053   F9           MOV     R1,A
   \   000054   E8           MOV     A,R0
   \   000055   75F00E       MOV     B,#0xe
   \   000058   A4           MUL     AB
   \   000059   F8           MOV     R0,A
   \   00005A   12....       LCALL   ??Subroutine37_0 & 0xFFFF
    558              }
   \                     ??CrossCallReturnLabel_59:
   \   00005D   12....       LCALL   ??bindRemoveEntry?relay
   \                     ??bindRemoveDev_5:
   \   000060   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000063   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000066   5027         JNC     ??bindRemoveDev_3
   \   000068   85..82       MOV     DPL,?V0 + 0
   \   00006B   85..83       MOV     DPH,?V0 + 1
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   6401         XRL     A,#0x1
   \   000079   70C5         JNZ     ??bindRemoveDev_4
   \   00007B   12....       LCALL   ?Subroutine11 & 0xFFFF
    559            }
   \                     ??CrossCallReturnLabel_65:
   \   00007E   6401         XRL     A,#0x1
   \   000080   70DE         JNZ     ??bindRemoveDev_5
   \   000082   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000085   7004         JNZ     ??bindRemoveDev_8
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   65..         XRL     A,?V0 + 3
   \                     ??bindRemoveDev_8:
   \   00008B   60C3         JZ      ??bindRemoveDev_7
   \   00008D   80D1         SJMP    ??bindRemoveDev_5
   \                     ??bindRemoveDev_3:
   \   00008F                REQUIRE ?Subroutine5
   \   00008F                ; // Fall through to label ?Subroutine5
    560          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   EE           MOV     A,R6
   \   000001   F8           MOV     R0,A
   \   000002   EF           MOV     A,R7
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   75F00E       MOV     B,#0xe
   \   000008   A4           MUL     AB
   \   000009   F8           MOV     R0,A
   \   00000A   75F00E       MOV     B,#0xe
   \   00000D   E9           MOV     A,R1
   \   00000E   A4           MUL     AB
   \   00000F   2A           ADD     A,R2
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000014   65..         XRL     A,?V0 + 2
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   EE           MOV     A,R6
   \   000001   F8           MOV     R0,A
   \   000002   EF           MOV     A,R7
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   75F00E       MOV     B,#0xe
   \   000008   A4           MUL     AB
   \   000009   F8           MOV     R0,A
   \   00000A   AAF0         MOV     R2,B
   \   00000C   75F00E       MOV     B,#0xe
   \   00000F   E9           MOV     A,R1
   \   000010   A4           MUL     AB
   \   000011   2A           ADD     A,R2
   \   000012   F9           MOV     R1,A
   \   000013                REQUIRE ??Subroutine38_0
   \   000013                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   EE           MOV     A,R6
   \   000001   2401         ADD     A,#0x1
   \   000003   0E           INC     R6
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000003   E4           CLR     A
   \   000004   93           MOVC    A,@A+DPTR
   \   000005   F8           MOV     R0,A
   \   000006   7401         MOV     A,#0x1
   \   000008   93           MOVC    A,@A+DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   C3           CLR     C
   \   00000B   EE           MOV     A,R6
   \   00000C   98           SUBB    A,R0
   \   00000D   EF           MOV     A,R7
   \   00000E   99           SUBB    A,R1
   \   00000F   22           RET
    561          
    562          /*********************************************************************
    563           * @fn       bindRemoveSrcDev()
    564           *
    565           * @brief
    566           *
    567           *   Remove binds(s) associated to device address (source).
    568           *   Updates binding table.
    569           *
    570           * @param   srcAddr - address of device
    571           * @param   ep - endpoint to remove, 0xFF is all endpoints
    572           *
    573           * @return  none
    574           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    575          void bindRemoveSrcDev( uint8 ep )
   \                     bindRemoveSrcDev:
    576          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
    577            uint16 x;
    578          
    579            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000007   7E00         MOV     R6,#0x0
   \   000009   7F00         MOV     R7,#0x0
   \   00000B   801A         SJMP    ??CrossCallReturnLabel_32
    580            {
    581              if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
   \                     ??bindRemoveSrcDev_0:
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   65..         XRL     A,?V0 + 0
   \   000011   6007         JZ      ??bindRemoveSrcDev_1
   \   000013   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000016   65..         XRL     A,?V0 + 0
   \   000018   700A         JNZ     ??bindRemoveSrcDev_2
    582              {
    583                bindRemoveEntry( &BindingTable[x] );
   \                     ??bindRemoveSrcDev_1:
   \   00001A                ; Setup parameters for call to function bindRemoveEntry
   \   00001A   EE           MOV     A,R6
   \   00001B   F8           MOV     R0,A
   \   00001C   EF           MOV     A,R7
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ?Subroutine15 & 0xFFFF
    584              }
    585            }
   \                     ??CrossCallReturnLabel_62:
   \   000021   12....       LCALL   ??bindRemoveEntry?relay
   \                     ??bindRemoveSrcDev_2:
   \   000024   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000027   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00002A   40E1         JC      ??bindRemoveSrcDev_0
    586          }
   \   00002C   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EE           MOV     A,R6
   \   000001   F8           MOV     R0,A
   \   000002   EF           MOV     A,R7
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   75F00E       MOV     B,#0xe
   \   000008   A4           MUL     AB
   \   000009   F8           MOV     R0,A
   \   00000A   AAF0         MOV     R2,B
   \   00000C   75F00E       MOV     B,#0xe
   \   00000F   E9           MOV     A,R1
   \   000010   A4           MUL     AB
   \   000011   2A           ADD     A,R2
   \   000012   F9           MOV     R1,A
   \   000013                REQUIRE ??Subroutine39_0
   \   000013                ; // Fall through to label ??Subroutine39_0
    587          
    588          /*********************************************************************
    589           * @fn          bindNumBoundTo
    590           *
    591           * @brief       Calculate the number items this device is bound to.
    592           *              When srcMode is set to TRUE, discard what value devAddr
    593           *              has, it returns number count bound to the local dev.
    594           *
    595           * @param       devAddr - device Address
    596           * @param       devEP - endpoint
    597           * @param       srcMode - TRUE - assume devHandle is a source address
    598           *                        FALSE - destination address
    599           *
    600           * @return      status
    601           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    602          byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
   \                     bindNumBoundTo:
    603          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 1,R1
   \   00000B   8C..         MOV     ?V0 + 2,R4
    604            BindingEntry_t *pBind;
    605            uint16 idx;
    606            byte   num;
    607            uint16 x;
    608          
    609            // Init
    610            num = 0;
   \   00000D   75..00       MOV     ?V0 + 0,#0x0
    611          
    612            if ( devAddr->addrMode == AddrGroup )
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   700B         JNZ     ??bindNumBoundTo_0
    613            {
    614              idx = devAddr->addr.shortAddr;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FC           MOV     R4,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FD           MOV     R5,A
   \   00002A   800B         SJMP    ??bindNumBoundTo_1
    615            }
    616            else
    617            {
    618              idx = bindingAddrMgsHelperFind( devAddr );
   \                     ??bindNumBoundTo_0:
   \   00002C                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   00002C   12....       LCALL   ??bindingAddrMgsHelperFind?relay
   \   00002F   8A..         MOV     ?V0 + 4,R2
   \   000031   8B..         MOV     ?V0 + 5,R3
   \   000033   AC..         MOV     R4,?V0 + 4
   \   000035   AD..         MOV     R5,?V0 + 5
    619            }
    620          
    621            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \                     ??bindNumBoundTo_1:
   \   000037   7800         MOV     R0,#0x0
   \   000039   7900         MOV     R1,#0x0
   \   00003B   8024         SJMP    ??CrossCallReturnLabel_23
    622            {
    623              pBind = &BindingTable[x];
    624              if ( srcMode )
    625              {
    626                if ( pBind->srcEP == devEpInt )
    627                {
    628                  num++;
    629                }
    630              }
    631              else
    632              {
    633                if ( ((devAddr->addrMode == AddrGroup)
    634                        && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
    635                    || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
    636                                          && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
   \                     ??bindNumBoundTo_2:
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   701E         JNZ     ??bindNumBoundTo_3
   \   000040   8A82         MOV     DPL,R2
   \   000042   8B83         MOV     DPH,R3
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   6C           XRL     A,R4
   \   000048   7003         JNZ     ??bindNumBoundTo_4
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   6D           XRL     A,R5
   \                     ??bindNumBoundTo_4:
   \   00004D   700F         JNZ     ??bindNumBoundTo_3
   \   00004F   8A82         MOV     DPL,R2
   \   000051   8B83         MOV     DPH,R3
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   65..         XRL     A,?V0 + 1
   \   00005A   7002         JNZ     ??bindNumBoundTo_3
    637                {
    638                  num++;
   \                     ??bindNumBoundTo_5:
   \   00005C   05..         INC     ?V0 + 0
    639                }
   \                     ??bindNumBoundTo_3:
   \   00005E   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000061   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000064   5058         JNC     ??bindNumBoundTo_6
   \   000066   E8           MOV     A,R0
   \   000067   FA           MOV     R2,A
   \   000068   E9           MOV     A,R1
   \   000069   FB           MOV     R3,A
   \   00006A   EA           MOV     A,R2
   \   00006B   75F00E       MOV     B,#0xe
   \   00006E   A4           MUL     AB
   \   00006F   FA           MOV     R2,A
   \   000070   85F0..       MOV     ?V0 + 3,B
   \   000073   75F00E       MOV     B,#0xe
   \   000076   EB           MOV     A,R3
   \   000077   A4           MUL     AB
   \   000078   25..         ADD     A,?V0 + 3
   \   00007A   FB           MOV     R3,A
   \   00007B   74..         MOV     A,#BindingTable & 0xff
   \   00007D   2A           ADD     A,R2
   \   00007E   FA           MOV     R2,A
   \   00007F   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000081   3B           ADDC    A,R3
   \   000082   FB           MOV     R3,A
   \   000083   E5..         MOV     A,?V0 + 2
   \   000085   600B         JZ      ??bindNumBoundTo_7
   \   000087   8A82         MOV     DPL,R2
   \   000089   8B83         MOV     DPH,R3
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   65..         XRL     A,?V0 + 1
   \   00008E   70CE         JNZ     ??bindNumBoundTo_3
   \   000090   80CA         SJMP    ??bindNumBoundTo_5
   \                     ??bindNumBoundTo_7:
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   6401         XRL     A,#0x1
   \   0000A1   8A82         MOV     DPL,R2
   \   0000A3   8B83         MOV     DPH,R3
   \   0000A5   A3           INC     DPTR
   \   0000A6   7095         JNZ     ??bindNumBoundTo_2
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   6401         XRL     A,#0x1
   \   0000AB   70B1         JNZ     ??bindNumBoundTo_3
   \   0000AD   8A82         MOV     DPL,R2
   \   0000AF   8B83         MOV     DPH,R3
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   6C           XRL     A,R4
   \   0000B5   7003         JNZ     ??bindNumBoundTo_8
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   6D           XRL     A,R5
   \                     ??bindNumBoundTo_8:
   \   0000BA   60A0         JZ      ??bindNumBoundTo_5
   \   0000BC   80A0         SJMP    ??bindNumBoundTo_3
    640              }
    641            }
    642          
    643            return num;
   \                     ??bindNumBoundTo_6:
   \   0000BE   A9..         MOV     R1,?V0 + 0
   \   0000C0   02....       LJMP    ?Subroutine5 & 0xFFFF
    644          }
    645          
    646          /*********************************************************************
    647           * @fn          bindNumReflections
    648           *
    649           * @brief       Counts the number of reflections needed for a
    650           *              endpoint and cluster ID combo.
    651           *
    652           * @param       ep - source endpoint
    653           * @param       clusterID - matching clusterID
    654           *
    655           * @return      number of reflections needed.
    656           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    657          uint16 bindNumReflections( uint8 ep, uint16 clusterID )
   \                     bindNumReflections:
    658          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   8A..         MOV     ?V0 + 2,R2
   \   000009   8B..         MOV     ?V0 + 3,R3
    659            uint16 x;
    660            BindingEntry_t *pBind;
    661            uint16 cnt = 0;
   \   00000B   75..00       MOV     ?V0 + 0,#0x0
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
    662            uint8 bindEP;
    663          
    664            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000011   7E00         MOV     R6,#0x0
   \   000013   7F00         MOV     R7,#0x0
   \   000015   801B         SJMP    ??CrossCallReturnLabel_33
    665            {
    666              pBind = &BindingTable[x];
   \                     ??bindNumReflections_0:
   \   000017   12....       LCALL   ?Subroutine10 & 0xFFFF
    667              bindEP = pBind->srcEP;
    668          
    669              if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
   \                     ??CrossCallReturnLabel_66:
   \   00001A   65..         XRL     A,?V0 + 4
   \   00001C   7011         JNZ     ??CrossCallReturnLabel_27
   \   00001E                ; Setup parameters for call to function bindIsClusterIDinList
   \   00001E   AC..         MOV     R4,?V0 + 2
   \   000020   AD..         MOV     R5,?V0 + 3
   \   000022   AA82         MOV     R2,DPL
   \   000024   AB83         MOV     R3,DPH
   \   000026   12....       LCALL   ??bindIsClusterIDinList?relay
   \   000029   E9           MOV     A,R1
   \   00002A   6003         JZ      ??CrossCallReturnLabel_27
    670              {
    671                cnt++;
   \   00002C   12....       LCALL   ?Subroutine21 & 0xFFFF
    672              }
    673            }
   \                     ??CrossCallReturnLabel_27:
   \   00002F   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000032   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000035   40E0         JC      ??bindNumReflections_0
    674          
    675            return ( cnt );
   \   000037   AA..         MOV     R2,?V0 + 0
   \   000039   AB..         MOV     R3,?V0 + 1
   \   00003B   7F05         MOV     R7,#0x5
   \   00003D   02....       LJMP    ?BANKED_LEAVE_XDATA
    676          }
    677          
    678          /*********************************************************************
    679           * @fn          bindFind
    680           *
    681           * @brief       Finds the binding entry for the source address, endpoint
    682           *              and cluster ID passed in as a parameter.
    683           *
    684           * @param       ep - source endpoint
    685           * @param       clusterID - matching clusterID
    686           * @param       skip - number of matches to skip before returning
    687           *
    688           * @return      pointer to the binding table entry, NULL if not found
    689           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    690          BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
   \                     bindFind:
    691          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 5,R1
   \   000007   8A..         MOV     ?V0 + 2,R2
   \   000009   8B..         MOV     ?V0 + 3,R3
   \   00000B   8C..         MOV     ?V0 + 6,R4
    692            BindingEntry_t *pBind;
    693            byte skipped = 0;
   \   00000D   75..00       MOV     ?V0 + 4,#0x0
    694            uint16 x;
    695          
    696            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000010   75..00       MOV     ?V0 + 0,#0x0
   \   000013   75..00       MOV     ?V0 + 1,#0x0
   \   000016   8005         SJMP    ??CrossCallReturnLabel_28
    697            {
    698              pBind = &BindingTable[x];
    699          
    700              if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
    701              {
    702                if ( skipped < skipping )
    703                {
    704                  skipped++;
   \                     ??bindFind_0:
   \   000018   05..         INC     ?V0 + 4
    705                }
   \                     ??bindFind_1:
   \   00001A   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00001D   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000020   C3           CLR     C
   \   000021   E5..         MOV     A,?V0 + 0
   \   000023   98           SUBB    A,R0
   \   000024   E5..         MOV     A,?V0 + 1
   \   000026   99           SUBB    A,R1
   \   000027   503A         JNC     ??bindFind_2
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   75F00E       MOV     B,#0xe
   \   00002E   A4           MUL     AB
   \   00002F   F8           MOV     R0,A
   \   000030   AAF0         MOV     R2,B
   \   000032   75F00E       MOV     B,#0xe
   \   000035   E5..         MOV     A,?V0 + 1
   \   000037   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00003A   FE           MOV     R6,A
   \   00003B   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00003D   39           ADDC    A,R1
   \   00003E   FF           MOV     R7,A
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   E0           MOVX    A,@DPTR
   \   000044   65..         XRL     A,?V0 + 5
   \   000046   70D2         JNZ     ??bindFind_1
   \   000048                ; Setup parameters for call to function bindIsClusterIDinList
   \   000048   AC..         MOV     R4,?V0 + 2
   \   00004A   AD..         MOV     R5,?V0 + 3
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   12....       LCALL   ??bindIsClusterIDinList?relay
   \   000053   E9           MOV     A,R1
   \   000054   60C4         JZ      ??bindFind_1
   \   000056   E5..         MOV     A,?V0 + 4
   \   000058   C3           CLR     C
   \   000059   95..         SUBB    A,?V0 + 6
   \   00005B   40BB         JC      ??bindFind_0
    706                else
    707                {
    708                  return ( pBind );
   \   00005D   EE           MOV     A,R6
   \   00005E   FA           MOV     R2,A
   \   00005F   EF           MOV     A,R7
   \   000060   FB           MOV     R3,A
   \   000061   8004         SJMP    ??bindFind_3
    709                }
    710              }
    711            }
    712          
    713            return ( (BindingEntry_t *)NULL );
   \                     ??bindFind_2:
   \   000063   7A00         MOV     R2,#0x0
   \   000065   7B00         MOV     R3,#0x0
   \                     ??bindFind_3:
   \   000067                REQUIRE ?Subroutine6
   \   000067                ; // Fall through to label ?Subroutine6
    714          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    715          
    716          /*********************************************************************
    717           * @fn          BindInitNV
    718           *
    719           * @brief       Initialize the Binding NV Item
    720           *
    721           * @param       none
    722           *
    723           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    724           *              exist in NV, NV_OPER_FAILED if failure.
    725           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    726          byte BindInitNV( void )
   \                     BindInitNV:
    727          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    728            byte ret;
    729          
    730            // Initialize the device list
    731            ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
    732                            (uint16)(gBIND_REC_SIZE + NV_BIND_ITEM_SIZE), NULL );
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   E4           CLR     A
   \   000006   F5..         MOV     ?V0 + 0,A
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   78..         MOV     R0,#?V0 + 0
   \   00000C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000F   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000012   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000015   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000018   E8           MOV     A,R0
   \   000019   85..F0       MOV     B,?V0 + 0
   \   00001C   A4           MUL     AB
   \   00001D   C8           XCH     A,R0
   \   00001E   AAF0         MOV     R2,B
   \   000020   85..F0       MOV     B,?V0 + 1
   \   000023   A4           MUL     AB
   \   000024   2A           ADD     A,R2
   \   000025   FA           MOV     R2,A
   \   000026   85..F0       MOV     B,?V0 + 0
   \   000029   E9           MOV     A,R1
   \   00002A   A4           MUL     AB
   \   00002B   2A           ADD     A,R2
   \   00002C   F9           MOV     R1,A
   \   00002D   7583..       MOV     DPH,#(gBIND_REC_SIZE >> 8) & 0xff
   \   000030   7582..       MOV     DPL,#gBIND_REC_SIZE & 0xff
   \   000033   E4           CLR     A
   \   000034   93           MOVC    A,@A+DPTR
   \   000035   28           ADD     A,R0
   \   000036   FC           MOV     R4,A
   \   000037   A3           INC     DPTR
   \   000038   E4           CLR     A
   \   000039   93           MOVC    A,@A+DPTR
   \   00003A   39           ADDC    A,R1
   \   00003B   FD           MOV     R5,A
   \   00003C   7A41         MOV     R2,#0x41
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??osal_nv_item_init?relay
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   FE           MOV     R6,A
    733          
    734            if ( ret != ZSUCCESS )
   \   00004A   6003         JZ      ??BindInitNV_0
    735            {
    736              BindSetDefaultNV();
   \   00004C                ; Setup parameters for call to function BindSetDefaultNV
   \   00004C   12....       LCALL   ??BindSetDefaultNV?relay
    737            }
    738          
    739            return ( ret );
   \                     ??BindInitNV_0:
   \   00004F   EE           MOV     A,R6
   \   000050   F9           MOV     R1,A
   \   000051   02....       LJMP    ??Subroutine34_0 & 0xFFFF
    740          }
    741          
    742          /*********************************************************************
    743           * @fn          BindSetDefaultNV
    744           *
    745           * @brief       Write the defaults to NV
    746           *
    747           * @param       none
    748           *
    749           * @return      none
    750           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine34_0
   \   000003                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    751          void BindSetDefaultNV( void )
   \                     BindSetDefaultNV:
    752          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    753            nvBindingHdr_t hdr;
    754          
    755            // Initialize the header
    756            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   12....       LCALL   ?Subroutine31 & 0xFFFF
    757          
    758            // Save off the header
    759            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
   \                     ??CrossCallReturnLabel_79:
   \   000016   8582..       MOV     ?V0 + 0,DPL
   \   000019   8583..       MOV     ?V0 + 1,DPH
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   75..02       MOV     ?V0 + 0,#0x2
   \   000024   75..00       MOV     ?V0 + 1,#0x0
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   7C00         MOV     R4,#0x0
   \   00002E   7D00         MOV     R5,#0x0
   \   000030   7A41         MOV     R2,#0x41
   \   000032   7B00         MOV     R3,#0x0
   \   000034   12....       LCALL   ??osal_nv_write?relay
   \   000037   7404         MOV     A,#0x4
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
    760          }
   \   00003C   7402         MOV     A,#0x2
   \   00003E   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000001                ; Setup parameters for call to function AddrMgrEntryGet
   \   000001                ; Setup parameters for call to function AddrMgrEntryGet
   \   000001                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000001                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000001                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    761          
    762          /*********************************************************************
    763           * @fn          BindRestoreFromNV
    764           *
    765           * @brief       Restore the binding table from NV
    766           *
    767           * @param       none
    768           *
    769           * @return      Number of entries restored
    770           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    771          uint16 BindRestoreFromNV( void )
   \                     BindRestoreFromNV:
    772          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    773            nvBindingHdr_t hdr;
    774            uint16 numAdded = 0;
   \   00000A   7E00         MOV     R6,#0x0
   \   00000C   7F00         MOV     R7,#0x0
    775          
    776            if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
   \   00000E                ; Setup parameters for call to function osal_nv_read
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   8582..       MOV     ?V0 + 0,DPL
   \   000017   8583..       MOV     ?V0 + 1,DPH
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV     ?V0 + 0,#0x2
   \   000022   8E..         MOV     ?V0 + 1,R6
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A41         MOV     R2,#0x41
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   ??osal_nv_read?relay
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039   E9           MOV     A,R1
   \   00003A   7063         JNZ     ??BindRestoreFromNV_0
    777            {
    778              if (hdr.numRecs > 0)
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F8           MOV     R0,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   E8           MOV     A,R0
   \   000048   49           ORL     A,R1
   \   000049   6054         JZ      ??BindRestoreFromNV_0
    779              {
    780                // Read the whole table at once
    781                if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
    782                                   (uint16)(sizeof(nvBindingHdr_t)),
    783                                   (NV_BIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES), BindingTable ) == ZSUCCESS )
   \   00004B                ; Setup parameters for call to function osal_nv_read
   \   00004B   75....       MOV     ?V0 + 0,#BindingTable & 0xff
   \   00004E   75....       MOV     ?V0 + 1,#(BindingTable >> 8) & 0xff
   \   000051   78..         MOV     R0,#?V0 + 0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000059   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00005C   E5..         MOV     A,?V0 + 2
   \   00005E   85..F0       MOV     B,?V0 + 0
   \   000061   A4           MUL     AB
   \   000062   C5..         XCH     A,?V0 + 2
   \   000064   A8F0         MOV     R0,B
   \   000066   85..F0       MOV     B,?V0 + 1
   \   000069   A4           MUL     AB
   \   00006A   28           ADD     A,R0
   \   00006B   F8           MOV     R0,A
   \   00006C   85..F0       MOV     B,?V0 + 0
   \   00006F   E5..         MOV     A,?V0 + 3
   \   000071   A4           MUL     AB
   \   000072   28           ADD     A,R0
   \   000073   F5..         MOV     ?V0 + 3,A
   \   000075   78..         MOV     R0,#?V0 + 2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   7C02         MOV     R4,#0x2
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   7A41         MOV     R2,#0x41
   \   000080   7B00         MOV     R3,#0x0
   \   000082   12....       LCALL   ??osal_nv_read?relay
   \   000085   7404         MOV     A,#0x4
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008A   E9           MOV     A,R1
   \   00008B   7012         JNZ     ??BindRestoreFromNV_0
    784                {
    785                  numAdded = gNWK_MAX_BINDING_ENTRIES;
   \   00008D   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000090   E4           CLR     A
   \   000091   93           MOVC    A,@A+DPTR
   \   000092   C0E0         PUSH    A
   \   000094   7401         MOV     A,#0x1
   \   000096   93           MOVC    A,@A+DPTR
   \   000097   F583         MOV     DPH,A
   \   000099   D082         POP     DPL
   \   00009B   AE82         MOV     R6,DPL
   \   00009D   AF83         MOV     R7,DPH
    786                }
    787              }
    788            }
    789            return ( numAdded );
   \                     ??BindRestoreFromNV_0:
   \   00009F   EE           MOV     A,R6
   \   0000A0   FA           MOV     R2,A
   \   0000A1   EF           MOV     A,R7
   \   0000A2   FB           MOV     R3,A
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5                REQUIRE ?Subroutine4
   \   0000A5                ; // Fall through to label ?Subroutine4
    790          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine40_0
   \   000003                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000003   E4           CLR     A
   \   000004   93           MOVC    A,@A+DPTR
   \   000005   F5..         MOV     ?V0 + 2,A
   \   000007   7401         MOV     A,#0x1
   \   000009   93           MOVC    A,@A+DPTR
   \   00000A   F5..         MOV     ?V0 + 3,A
   \   00000C   22           RET
    791          
    792          /*********************************************************************
    793           * @fn          BindWriteNV
    794           *
    795           * @brief       Save the Binding Table in NV
    796           *
    797           * @param       none
    798           *
    799           * @return      none
    800           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    801          void BindWriteNV( void )
   \                     BindWriteNV:
    802          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    803            BindingEntry_t *pBind;
    804            BindingEntry_t bind;
    805            nvBindingHdr_t hdr;
    806            uint16 x;
    807          
    808            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
    809          
    810            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000014   FE           MOV     R6,A
   \   000015   02....       LJMP    ??BindWriteNV_0 & 0xFFFF
    811            {
    812              pBind = &BindingTable[x];
   \                     ??BindWriteNV_1:
   \   000018   EE           MOV     A,R6
   \   000019   F8           MOV     R0,A
   \   00001A   EF           MOV     A,R7
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000023   39           ADDC    A,R1
   \   000024   F5..         MOV     ?V0 + 1,A
    813          
    814              osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
   \   000026                ; Setup parameters for call to function osal_memcpy
   \   000026   85....       MOV     ?V0 + 4,?V0 + 0
   \   000029   F5..         MOV     ?V0 + 5,A
   \   00002B   75..00       MOV     ?V0 + 6,#0x0
   \   00002E   78..         MOV     R0,#?V0 + 4
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000033   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000036   7405         MOV     A,#0x5
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   AA82         MOV     R2,DPL
   \   00003D   AB83         MOV     R3,DPH
   \   00003F   12....       LCALL   ??osal_memcpy?relay
   \   000042   7403         MOV     A,#0x3
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
    815          
    816              // Save the record to NV
    817              osal_nv_write( ZCD_NV_BINDING_TABLE,
    818                             (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
    819                             NV_BIND_REC_SIZE, &bind );
   \   000047                ; Setup parameters for call to function osal_nv_write
   \   000047   7402         MOV     A,#0x2
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   8582..       MOV     ?V0 + 2,DPL
   \   00004F   8583..       MOV     ?V0 + 3,DPH
   \   000052   78..         MOV     R0,#?V0 + 2
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   00005A   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   00005D   EE           MOV     A,R6
   \   00005E   F8           MOV     R0,A
   \   00005F   EF           MOV     A,R7
   \   000060   F9           MOV     R1,A
   \   000061   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000064   E8           MOV     A,R0
   \   000065   85..F0       MOV     B,?V0 + 2
   \   000068   A4           MUL     AB
   \   000069   C8           XCH     A,R0
   \   00006A   AAF0         MOV     R2,B
   \   00006C   85..F0       MOV     B,?V0 + 3
   \   00006F   A4           MUL     AB
   \   000070   2A           ADD     A,R2
   \   000071   FA           MOV     R2,A
   \   000072   85..F0       MOV     B,?V0 + 2
   \   000075   E9           MOV     A,R1
   \   000076   A4           MUL     AB
   \   000077   2A           ADD     A,R2
   \   000078   F9           MOV     R1,A
   \   000079   E8           MOV     A,R0
   \   00007A   2402         ADD     A,#0x2
   \   00007C   FC           MOV     R4,A
   \   00007D   E9           MOV     A,R1
   \   00007E   3400         ADDC    A,#0x0
   \   000080   FD           MOV     R5,A
   \   000081   7A41         MOV     R2,#0x41
   \   000083   7B00         MOV     R3,#0x0
   \   000085   12....       LCALL   ??osal_nv_write?relay
   \   000088   7404         MOV     A,#0x4
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
    820          
    821              if ( pBind->srcEP != NV_BIND_EMPTY )
   \   00008D   85..82       MOV     DPL,?V0 + 0
   \   000090   85..83       MOV     DPH,?V0 + 1
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F4           CPL     A
   \   000095   600F         JZ      ??BindWriteNV_2
    822              {
    823                hdr.numRecs++;
   \   000097   85..82       MOV     DPL,?XSP + 0
   \   00009A   85..83       MOV     DPH,?XSP + 1
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   2401         ADD     A,#0x1
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   3400         ADDC    A,#0x0
   \   0000A5   F0           MOVX    @DPTR,A
    824              }
    825            }
   \                     ??BindWriteNV_2:
   \   0000A6   EE           MOV     A,R6
   \   0000A7   2401         ADD     A,#0x1
   \   0000A9   0E           INC     R6
   \   0000AA   EF           MOV     A,R7
   \   0000AB   3400         ADDC    A,#0x0
   \                     ??BindWriteNV_0:
   \   0000AD   FF           MOV     R7,A
   \   0000AE   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000B1   5003         JNC     $+5
   \   0000B3   02....       LJMP    ??BindWriteNV_1 & 0xFFFF
    826          
    827            // Save off the header
    828            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \   0000B6                ; Setup parameters for call to function osal_nv_write
   \   0000B6   85..82       MOV     DPL,?XSP + 0
   \   0000B9   85..83       MOV     DPH,?XSP + 1
   \   0000BC   8582..       MOV     ?V0 + 0,DPL
   \   0000BF   8583..       MOV     ?V0 + 1,DPH
   \   0000C2   78..         MOV     R0,#?V0 + 0
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   75..02       MOV     ?V0 + 0,#0x2
   \   0000CA   75..00       MOV     ?V0 + 1,#0x0
   \   0000CD   78..         MOV     R0,#?V0 + 0
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D2   7C00         MOV     R4,#0x0
   \   0000D4   7D00         MOV     R5,#0x0
   \   0000D6   7A41         MOV     R2,#0x41
   \   0000D8   7B00         MOV     R3,#0x0
   \   0000DA   12....       LCALL   ??osal_nv_write?relay
   \   0000DD   7404         MOV     A,#0x4
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
    829          }
   \   0000E2   7410         MOV     A,#0x10
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E8           MOV     A,R0
   \   000001   75F00E       MOV     B,#0xe
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   AAF0         MOV     R2,B
   \   000008                REQUIRE ??Subroutine41_0
   \   000008                ; // Fall through to label ??Subroutine41_0
    830          
    831          /*********************************************************************
    832           * @fn          bindUpdateAddr
    833           *
    834           * @brief       Update the network address in the binding table.
    835           *
    836           * @param       oldAddr - old network address
    837           * @param       newAddr - new network address
    838           *
    839           * @return      none
    840           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    841          void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
   \                     bindUpdateAddr:
    842          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    843            uint16 oldIdx;
    844            uint16 newIdx;
    845            zAddrType_t addr;
    846            uint16 x;
    847            BindingEntry_t *pBind;
    848          
    849            addr.addrMode = Addr16Bit;
   \   00000E   7408         MOV     A,#0x8
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7402         MOV     A,#0x2
   \   000015   12....       LCALL   ?Subroutine31 & 0xFFFF
    850            addr.addr.shortAddr = oldAddr;
   \                     ??CrossCallReturnLabel_80:
   \   000018   12....       LCALL   ?Subroutine19 & 0xFFFF
    851            oldIdx = bindingAddrMgsHelperFind( &addr );
   \                     ??CrossCallReturnLabel_73:
   \   00001B   12....       LCALL   ??bindingAddrMgsHelperFind?relay
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
    852            addr.addr.shortAddr = newAddr;
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   EE           MOV     A,R6
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   EF           MOV     A,R7
   \   00002C   12....       LCALL   ??Subroutine45_0 & 0xFFFF
    853            newIdx = bindingAddrMgsHelperFind( &addr );
   \                     ??CrossCallReturnLabel_76:
   \   00002F   12....       LCALL   ??bindingAddrMgsHelperFind?relay
   \   000032   8A..         MOV     ?V0 + 2,R2
   \   000034   8B..         MOV     ?V0 + 3,R3
    854          
    855            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000036   7800         MOV     R0,#0x0
   \   000038   7900         MOV     R1,#0x0
   \   00003A   803C         SJMP    ??CrossCallReturnLabel_24
    856            {
    857              pBind = &BindingTable[x];
   \                     ??bindUpdateAddr_0:
   \   00003C   E8           MOV     A,R0
   \   00003D   FA           MOV     R2,A
   \   00003E   E9           MOV     A,R1
   \   00003F   FB           MOV     R3,A
   \   000040   EA           MOV     A,R2
   \   000041   75F00E       MOV     B,#0xe
   \   000044   A4           MUL     AB
   \   000045   FA           MOV     R2,A
   \   000046   ACF0         MOV     R4,B
   \   000048   75F00E       MOV     B,#0xe
   \   00004B   EB           MOV     A,R3
   \   00004C   A4           MUL     AB
   \   00004D   2C           ADD     A,R4
   \   00004E   FB           MOV     R3,A
   \   00004F   74..         MOV     A,#BindingTable & 0xff
   \   000051   2A           ADD     A,R2
   \   000052   FA           MOV     R2,A
   \   000053   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000055   3B           ADDC    A,R3
   \   000056   FB           MOV     R3,A
    858          
    859              if ( pBind->dstIdx == oldIdx )
   \   000057   8A82         MOV     DPL,R2
   \   000059   8B83         MOV     DPH,R3
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   65..         XRL     A,?V0 + 0
   \   000060   7004         JNZ     ??bindUpdateAddr_1
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   65..         XRL     A,?V0 + 1
   \                     ??bindUpdateAddr_1:
   \   000066   700D         JNZ     ??bindUpdateAddr_2
    860              {
    861                pBind->dstIdx = newIdx;
   \   000068   8A82         MOV     DPL,R2
   \   00006A   8B83         MOV     DPH,R3
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E5..         MOV     A,?V0 + 2
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   E5..         MOV     A,?V0 + 3
   \   000074   F0           MOVX    @DPTR,A
    862              }
    863            }
   \                     ??bindUpdateAddr_2:
   \   000075   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000078   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00007B   40BF         JC      ??bindUpdateAddr_0
    864          }
   \   00007D   7409         MOV     A,#0x9
   \   00007F   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004                REQUIRE ??Subroutine45_0
   \   000004                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   AA82         MOV     R2,DPL
   \   000005   AB83         MOV     R3,DPH
   \   000007   22           RET
    865          
    866          /*********************************************************************
    867           * @fn      bindingAddrMgsHelperFind
    868           *
    869           * @brief   Turns an zAddrType_t to an Addr Manager index
    870           *
    871           * @param   addr - zAddrType_t
    872           *
    873           * @return  INVALID_NODE_ADDR if not found, otherwise an index
    874           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    875          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
   \                     bindingAddrMgsHelperFind:
    876          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    877            AddrMgrEntry_t entry;
    878          
    879            // Resolve addresses with the address manager
    880            entry.user = ADDRMGR_USER_BINDING;
   \   000009   12....       LCALL   ?Subroutine22 & 0xFFFF
    881            if ( addr->addrMode == Addr16Bit )
   \                     ??CrossCallReturnLabel_29:
   \   00000C   7016         JNZ     ??bindingAddrMgsHelperFind_0
    882            {
    883              entry.nwkAddr = addr->addr.shortAddr;
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   12....       LCALL   ?Subroutine27 & 0xFFFF
    884              AddrMgrEntryLookupNwk( &entry );
    885            }
   \                     ??CrossCallReturnLabel_40:
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E8           MOV     A,R0
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   E9           MOV     A,R1
   \   00001C   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00001F   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   000022   801D         SJMP    ??bindingAddrMgsHelperFind_1
    886            else
    887            {
    888              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \                     ??bindingAddrMgsHelperFind_0:
   \   000024                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000024   EA           MOV     A,R2
   \   000025   FC           MOV     R4,A
   \   000026   EB           MOV     A,R3
   \   000027   FD           MOV     R5,A
   \   000028   7403         MOV     A,#0x3
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   AA82         MOV     R2,DPL
   \   00002F   AB83         MOV     R3,DPH
   \   000031   12....       LCALL   ??AddrMgrExtAddrSet?relay
    889              AddrMgrEntryLookupExt( &entry );
   \   000034                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   AA82         MOV     R2,DPL
   \   00003C   AB83         MOV     R3,DPH
   \   00003E   12....       LCALL   ??AddrMgrEntryLookupExt?relay
    890            }
    891          
    892            return ( entry.index );
   \                     ??bindingAddrMgsHelperFind_1:
   \   000041   80..         SJMP    ?Subroutine1
    893          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   740B         MOV     A,#0xb
   \   000002                REQUIRE ??Subroutine43_0
   \   000002                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL   ?XSTACK_DISP0_8
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   740D         MOV     A,#0xd
   \   00000A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000D                REQUIRE ??Subroutine44_0
   \   00000D                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   7401         MOV     A,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7404         MOV     A,#0x4
   \   000008   F0           MOVX    @DPTR,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6402         XRL     A,#0x2
   \   000018   22           RET
    894          
    895          /*********************************************************************
    896           * @fn      bindingAddrMgsHelperConvert
    897           *
    898           * @brief   Convert an index into an zAddrType_t
    899           *
    900           * @param   idx -
    901           * @param   addr - zAddrType_t
    902           *
    903           * @return  TRUE if found, FALSE if not
    904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    905          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
   \                     bindingAddrMgsHelperConvert:
    906          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    907            AddrMgrEntry_t entry;
    908            uint8 stat;
    909          
    910            // Resolve addresses with the address manager
    911            entry.user = ADDRMGR_USER_BINDING;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7404         MOV     A,#0x4
   \   000016   F0           MOVX    @DPTR,A
    912            entry.index = idx;
   \   000017   740B         MOV     A,#0xb
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine19 & 0xFFFF
    913            stat = AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_74:
   \   00001F   12....       LCALL   ??AddrMgrEntryGet?relay
   \   000022   E9           MOV     A,R1
   \   000023   F5..         MOV     ?V0 + 0,A
    914            if ( stat )
   \   000025   601D         JZ      ??bindingAddrMgsHelperConvert_0
    915            {
    916              addr->addrMode = Addr64Bit;
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   7403         MOV     A,#0x3
   \   000035   F0           MOVX    @DPTR,A
    917              osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
   \   000036                ; Setup parameters for call to function sAddrExtCpy
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   AC82         MOV     R4,DPL
   \   00003B   AD83         MOV     R5,DPH
   \   00003D   EE           MOV     A,R6
   \   00003E   FA           MOV     R2,A
   \   00003F   EF           MOV     A,R7
   \   000040   FB           MOV     R3,A
   \   000041   12....       LCALL   ??sAddrExtCpy?relay
    918            }
    919          
    920            return ( stat );
   \                     ??bindingAddrMgsHelperConvert_0:
   \   000044   A9..         MOV     R1,?V0 + 0
   \   000046   740D         MOV     A,#0xd
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   02....       LJMP    ?Subroutine2 & 0xFFFF
    921          }
    922          
    923          /*********************************************************************
    924           * @fn      bindingAddrMgsHelperConvertShort
    925           *
    926           * @brief   Convert an index into a short address
    927           *
    928           * @param   idx -
    929           *
    930           * @return  INVALID_NODE_ADDR if not available, otherwise the short address
    931           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    932          uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
   \                     bindingAddrMgsHelperConvertShort:
    933          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    934            AddrMgrEntry_t entry;
    935          
    936            // Resolve addresses with the address manager
    937            entry.user = ADDRMGR_USER_BINDING;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7404         MOV     A,#0x4
   \   000011   F0           MOVX    @DPTR,A
    938            entry.index = idx;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine19 & 0xFFFF
    939            AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_75:
   \   00001A   12....       LCALL   ??AddrMgrEntryGet?relay
    940          
    941            return ( entry.nwkAddr );
   \   00001D   7401         MOV     A,#0x1
   \   00001F   80..         SJMP    ??Subroutine43_0
    942          }
    943          
    944          /*********************************************************************
    945           * @fn      bindAddrMgrLocalLoad
    946           *
    947           * @brief   Load local(self and parent) address information into
    948           *          Address Manager
    949           *
    950           * @param   none
    951           *
    952           * @return  none
    953           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    954          void bindAddrMgrLocalLoad( void )
   \                     bindAddrMgrLocalLoad:
    955          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    956            AddrMgrEntry_t entry;
    957            uint16         parent;
    958          
    959            // add "local"(self and parent) address informtion into the Address
    960            // Manager
    961            if ( bindAddrMgrLocalLoaded == FALSE )
   \   00000A   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6003         JZ      $+5
   \   000010   02....       LJMP    ??bindAddrMgrLocalLoad_0 & 0xFFFF
    962            {
    963              // add the device's address information
    964              entry.user    = ADDRMGR_USER_BINDING;
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   7404         MOV     A,#0x4
   \   00001B   F0           MOVX    @DPTR,A
    965              entry.nwkAddr = _NIB.nwkDevAddress;
   \   00001C   90....       MOV     DPTR,#_NIB + 20
   \   00001F   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E8           MOV     A,R0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   E9           MOV     A,R1
   \   000029   F0           MOVX    @DPTR,A
    966              AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
   \   00002A                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00002A                ; Setup parameters for call to function NLME_GetExtAddr
   \   00002A   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00002D   EA           MOV     A,R2
   \   00002E   FC           MOV     R4,A
   \   00002F   EB           MOV     A,R3
   \   000030   FD           MOV     R5,A
   \   000031   7403         MOV     A,#0x3
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   AA82         MOV     R2,DPL
   \   000038   AB83         MOV     R3,DPH
   \   00003A   12....       LCALL   ??AddrMgrExtAddrSet?relay
    967              AddrMgrEntryUpdate( &entry );
   \   00003D                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   AA82         MOV     R2,DPL
   \   000045   AB83         MOV     R3,DPH
   \   000047   12....       LCALL   ??AddrMgrEntryUpdate?relay
    968          
    969              // make sure parent address is valid
    970              parent = NLME_GetCoordShortAddr();
   \   00004A                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00004A   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   00004D   8A..         MOV     ?V0 + 0,R2
   \   00004F   8B..         MOV     ?V0 + 1,R3
   \   000051   A8..         MOV     R0,?V0 + 0
   \   000053   A9..         MOV     R1,?V0 + 1
    971              if ( ( parent != entry.nwkAddr     ) &&
    972                   ( parent != INVALID_NODE_ADDR )    )
   \   000055   7401         MOV     A,#0x1
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   68           XRL     A,R0
   \   00005C   7003         JNZ     ??bindAddrMgrLocalLoad_1
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   69           XRL     A,R1
   \                     ??bindAddrMgrLocalLoad_1:
   \   000061   602D         JZ      ??bindAddrMgrLocalLoad_2
   \   000063   74FE         MOV     A,#-0x2
   \   000065   68           XRL     A,R0
   \   000066   7003         JNZ     ??bindAddrMgrLocalLoad_3
   \   000068   74FF         MOV     A,#-0x1
   \   00006A   69           XRL     A,R1
   \                     ??bindAddrMgrLocalLoad_3:
   \   00006B   6023         JZ      ??bindAddrMgrLocalLoad_2
    973              {
    974                // add the parent's address information
    975                entry.nwkAddr = parent;
   \   00006D   7401         MOV     A,#0x1
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   E8           MOV     A,R0
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   E9           MOV     A,R1
   \   000076   F0           MOVX    @DPTR,A
    976                NLME_GetCoordExtAddr( entry.extAddr );
   \   000077                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000077   7403         MOV     A,#0x3
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   AA82         MOV     R2,DPL
   \   00007E   AB83         MOV     R3,DPH
   \   000080   12....       LCALL   ??NLME_GetCoordExtAddr?relay
    977                AddrMgrEntryUpdate( &entry );
   \   000083                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000083   85..82       MOV     DPL,?XSP + 0
   \   000086   85..83       MOV     DPH,?XSP + 1
   \   000089   AA82         MOV     R2,DPL
   \   00008B   AB83         MOV     R3,DPH
   \   00008D   12....       LCALL   ??AddrMgrEntryUpdate?relay
    978              }
    979          
    980              bindAddrMgrLocalLoaded = TRUE;
   \                     ??bindAddrMgrLocalLoad_2:
   \   000090   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   000093   7401         MOV     A,#0x1
   \   000095   F0           MOVX    @DPTR,A
    981            }
    982          }
   \                     ??bindAddrMgrLocalLoad_0:
   \   000096   740D         MOV     A,#0xd
   \   000098   02....       LJMP    ?Subroutine0 & 0xFFFF
    983          
    984          /*********************************************************************
    985           * @fn      bindAddrIndexGet
    986           *
    987           * @brief   Get bind address index.
    988           *
    989           * @param   addr - <zAddrType_t>
    990           *
    991           * @return  (uint16) address index
    992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    993          uint16 bindAddrIndexGet( zAddrType_t* addr )
   \                     bindAddrIndexGet:
    994          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    995            AddrMgrEntry_t entry;
    996            uint8          update;
    997          
    998            update = FALSE;
    999          
   1000            // sync binding addresses with the address manager
   1001            entry.user = ADDRMGR_USER_BINDING;
   \   000009   12....       LCALL   ?Subroutine22 & 0xFFFF
   1002          
   1003            if ( addr->addrMode == Addr16Bit )
   \                     ??CrossCallReturnLabel_30:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   7015         JNZ     ??bindAddrIndexGet_0
   1004            {
   1005              entry.nwkAddr = addr->addr.shortAddr;
   \   000012   12....       LCALL   ?Subroutine27 & 0xFFFF
   1006          
   1007              if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
   1008              {
   1009                update = TRUE;
   1010              }
   1011            }
   \                     ??CrossCallReturnLabel_42:
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E8           MOV     A,R0
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   E9           MOV     A,R1
   \   00001C   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00001F   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   000022   E9           MOV     A,R1
   \   000023   706E         JNZ     ??bindAddrIndexGet_1
   \   000025   802D         SJMP    ??bindAddrIndexGet_2
   1012            else if ( addr->addrMode == Addr64Bit )
   \                     ??bindAddrIndexGet_0:
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6403         XRL     A,#0x3
   \   000032   702F         JNZ     ??bindAddrIndexGet_3
   1013            {
   1014              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \   000034                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000034   EA           MOV     A,R2
   \   000035   FC           MOV     R4,A
   \   000036   EB           MOV     A,R3
   \   000037   FD           MOV     R5,A
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   AA82         MOV     R2,DPL
   \   00003F   AB83         MOV     R3,DPH
   \   000041   12....       LCALL   ??AddrMgrExtAddrSet?relay
   1015          
   1016              if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
   \   000044                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   AA82         MOV     R2,DPL
   \   00004C   AB83         MOV     R3,DPH
   \   00004E   12....       LCALL   ??AddrMgrEntryLookupExt?relay
   \   000051   E9           MOV     A,R1
   \   000052   703F         JNZ     ??bindAddrIndexGet_1
   1017              {
   1018                update = TRUE;
   1019              }
   1020            }
   1021            else if ( addr->addrMode == AddrGroup )
   1022            {
   1023              entry.index = addr->addr.shortAddr;
   1024            }
   1025            else
   1026            {
   1027              entry.index = INVALID_NODE_ADDR;
   1028            }
   1029          
   1030            if ( update )
   1031            {
   1032              AddrMgrEntryUpdate( &entry );
   \                     ??bindAddrIndexGet_2:
   \   000054                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   AA82         MOV     R2,DPL
   \   00005C   AB83         MOV     R3,DPH
   \   00005E   12....       LCALL   ??AddrMgrEntryUpdate?relay
   \   000061   8030         SJMP    ??bindAddrIndexGet_1
   1033            }
   \                     ??bindAddrIndexGet_3:
   \   000063   8A82         MOV     DPL,R2
   \   000065   8B83         MOV     DPH,R3
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   6401         XRL     A,#0x1
   \   000072   7014         JNZ     ??bindAddrIndexGet_4
   \   000074   8A82         MOV     DPL,R2
   \   000076   8B83         MOV     DPH,R3
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F8           MOV     R0,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   740B         MOV     A,#0xb
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E8           MOV     A,R0
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   E9           MOV     A,R1
   \   000086   800A         SJMP    ??bindAddrIndexGet_5
   \                     ??bindAddrIndexGet_4:
   \   000088   740B         MOV     A,#0xb
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   74FE         MOV     A,#-0x2
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   04           INC     A
   \                     ??bindAddrIndexGet_5:
   \   000092   F0           MOVX    @DPTR,A
   1034          
   1035            return entry.index;
   \                     ??bindAddrIndexGet_1:
   \   000093   02....       LJMP    ?Subroutine1 & 0xFFFF
   1036          }
   1037          
   1038          /*********************************************************************
   1039           * @fn      GetBindingTableEntry
   1040           *
   1041           * @brief   Get a pointer to the Nth valid binding table entry.
   1042           *
   1043           * @param   Nth valid entry being requested.
   1044           *
   1045           * @return  The Nth valid binding table entry.
   1046           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1047          BindingEntry_t *GetBindingTableEntry( uint16 Nth )
   \                     GetBindingTableEntry:
   1048          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   1049            BindingEntry_t *rtrn = NULL;
   \   000005   7C00         MOV     R4,#0x0
   \   000007   7D00         MOV     R5,#0x0
   1050          
   1051          #if defined ( REFLECTOR )
   1052            uint16 idx, cnt = 0;
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8C..         MOV     ?V0 + 1,R4
   1053          
   1054            for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
   \   00000D   7800         MOV     R0,#0x0
   \   00000F   7900         MOV     R1,#0x0
   \   000011   8003         SJMP    ??CrossCallReturnLabel_25
   \                     ??GetBindingTableEntry_0:
   \   000013   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000016   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000019   5023         JNC     ??GetBindingTableEntry_1
   1055            {
   1056              if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
   \   00001B   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00001E   60F3         JZ      ??GetBindingTableEntry_0
   1057              {
   1058                if ( cnt++ == Nth )
   \   000020   AE..         MOV     R6,?V0 + 0
   \   000022   AF..         MOV     R7,?V0 + 1
   \   000024   EE           MOV     A,R6
   \   000025   2401         ADD     A,#0x1
   \   000027   F5..         MOV     ?V0 + 0,A
   \   000029   EF           MOV     A,R7
   \   00002A   3400         ADDC    A,#0x0
   \   00002C   F5..         MOV     ?V0 + 1,A
   \   00002E   EA           MOV     A,R2
   \   00002F   6E           XRL     A,R6
   \   000030   7002         JNZ     ??GetBindingTableEntry_2
   \   000032   EB           MOV     A,R3
   \   000033   6F           XRL     A,R7
   \                     ??GetBindingTableEntry_2:
   \   000034   70DD         JNZ     ??GetBindingTableEntry_0
   1059                {
   1060                  rtrn = BindingTable+idx;
   \   000036   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000039   FC           MOV     R4,A
   \   00003A   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00003C   39           ADDC    A,R1
   \   00003D   FD           MOV     R5,A
   1061                  break;
   1062                }
   1063              }
   1064            }
   1065          #else
   1066            (void)Nth;
   1067          #endif
   1068          
   1069            return rtrn;
   \                     ??GetBindingTableEntry_1:
   \   00003E   EC           MOV     A,R4
   \   00003F   FA           MOV     R2,A
   \   000040   ED           MOV     A,R5
   \   000041   FB           MOV     R3,A
   \   000042   02....       LJMP    ?Subroutine3 & 0xFFFF
   1070          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??InitBindingTable?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBindingTable

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindFindEmpty?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFindEmpty

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindNumOfEntries?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumOfEntries

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindCapacity?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindCapacity

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindAddEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindRemoveEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindIsClusterIDinList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindIsClusterIDinList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindRemoveClusterIdFromList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveClusterIdFromList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindAddClusterIdToList?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddClusterIdToList

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindFindExisting?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFindExisting

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindRemoveDev?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveDev

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindRemoveSrcDev?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveSrcDev

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindNumBoundTo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumBoundTo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindNumReflections?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumReflections

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindFind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BindInitNV?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindInitNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BindSetDefaultNV?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindSetDefaultNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BindRestoreFromNV?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindRestoreFromNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??BindWriteNV?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindWriteNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindUpdateAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindUpdateAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindingAddrMgsHelperFind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindingAddrMgsHelperConvert?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperConvert

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindingAddrMgsHelperConvertShort?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperConvertShort

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindAddrMgrLocalLoad?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddrMgrLocalLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??bindAddrIndexGet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddrIndexGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetBindingTableEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetBindingTableEntry
   1071          
   1072          /*********************************************************************
   1073          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0     12  BindInitNV
                          0 0 10 -> BindSetDefaultNV
                          0 0 12 -> osal_nv_item_init
       0      0     18  BindRestoreFromNV
                          0 0 18 -> osal_nv_read
       0      0     26  BindSetDefaultNV
                          0 0 16 -> osal_nv_write
       0      0     35  BindWriteNV
                          0 0 34 -> osal_memcpy
                          0 0 35 -> osal_nv_write
       0      0     11  GetBindingTableEntry
       0      0     10  InitBindingTable
                          0 0 10 -> osal_memset
       0      0     29  bindAddClusterIdToList
       1      0     25  bindAddEntry
                          0 0 20 -> bindAddClusterIdToList
                          0 0 20 -> bindAddrIndexGet
                          0 0 20 -> bindAddrMgrLocalLoad
                          0 0 20 -> bindFindEmpty
                          0 0 20 -> bindIsClusterIDinList
                          0 0 23 -> osal_memcpy
       2      0     33  bindAddrIndexGet
                          2 0 13 -> AddrMgrEntryLookupExt
                          2 0 13 -> AddrMgrEntryLookupNwk
                          2 0 13 -> AddrMgrEntryUpdate
                          2 0 13 -> AddrMgrExtAddrSet
       0      0     43  bindAddrMgrLocalLoad
                          0 0 23 -> AddrMgrEntryUpdate
                          0 0 23 -> AddrMgrExtAddrSet
                          0 0 23 -> NLME_GetCoordExtAddr
                          0 0 23 -> NLME_GetCoordShortAddr
                          0 0 23 -> NLME_GetExtAddr
       0      0     11  bindCapacity
       0      0     15  bindFind
                          0 0 15 -> bindIsClusterIDinList
       2      0     20  bindFindEmpty
       0      0     12  bindFindExisting
                          0 0 12 -> bindingAddrMgsHelperFind
       0      0     29  bindIsClusterIDinList
       0      0     14  bindNumBoundTo
                          0 0 14 -> bindingAddrMgsHelperFind
       0      0      9  bindNumOfEntries
       0      0     13  bindNumReflections
                          0 0 13 -> bindIsClusterIDinList
       0      0     11  bindRemoveClusterIdFromList
       0      0     14  bindRemoveDev
                          0 0 14 -> bindRemoveEntry
                          0 0 14 -> bindingAddrMgsHelperFind
       2      0     14  bindRemoveEntry
                          2 0  0 -> osal_memset
       0      0      9  bindRemoveSrcDev
                          0 0  9 -> bindRemoveEntry
       0      0     21  bindUpdateAddr
                          0 0 21 -> bindingAddrMgsHelperFind
       0      0     22  bindingAddrMgsHelperConvert
                          0 0 22 -> AddrMgrEntryGet
                          0 0 22 -> sAddrExtCpy
       2      0     13  bindingAddrMgsHelperConvertShort
                          2 0 13 -> AddrMgrEntryGet
       2      0     34  bindingAddrMgsHelperFind
                          2 0 13 -> AddrMgrEntryLookupExt
                          2 0 13 -> AddrMgrEntryLookupNwk
                          2 0 13 -> AddrMgrExtAddrSet


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??BindInitNV?relay
       6  ??BindRestoreFromNV?relay
       6  ??BindSetDefaultNV?relay
       6  ??BindWriteNV?relay
       6  ??GetBindingTableEntry?relay
       6  ??InitBindingTable?relay
       5  ??Subroutine34_0
       8  ??Subroutine35_0
       8  ??Subroutine36_0
       9  ??Subroutine37_0
      12  ??Subroutine38_0
      12  ??Subroutine39_0
       5  ??Subroutine40_0
       4  ??Subroutine41_0
       7  ??Subroutine42_0
      13  ??Subroutine43_0
       7  ??Subroutine44_0
       8  ??Subroutine45_0
       6  ??bindAddClusterIdToList?relay
       6  ??bindAddEntry?relay
       6  ??bindAddrIndexGet?relay
       6  ??bindAddrMgrLocalLoad?relay
       6  ??bindCapacity?relay
       6  ??bindFind?relay
       6  ??bindFindEmpty?relay
       6  ??bindFindExisting?relay
       6  ??bindIsClusterIDinList?relay
       6  ??bindNumBoundTo?relay
       6  ??bindNumOfEntries?relay
       6  ??bindNumReflections?relay
       6  ??bindRemoveClusterIdFromList?relay
       6  ??bindRemoveDev?relay
       6  ??bindRemoveEntry?relay
       6  ??bindRemoveSrcDev?relay
       6  ??bindUpdateAddr?relay
       6  ??bindingAddrMgsHelperConvert?relay
       6  ??bindingAddrMgsHelperConvertShort?relay
       6  ??bindingAddrMgsHelperFind?relay
       3  ?Subroutine0
       2  ?Subroutine1
      19  ?Subroutine10
      19  ?Subroutine11
      13  ?Subroutine12
       3  ?Subroutine13
       3  ?Subroutine14
       8  ?Subroutine15
      16  ?Subroutine16
      23  ?Subroutine17
      13  ?Subroutine18
       4  ?Subroutine19
       5  ?Subroutine2
       9  ?Subroutine20
      13  ?Subroutine21
      25  ?Subroutine22
       9  ?Subroutine23
      31  ?Subroutine24
      13  ?Subroutine25
      30  ?Subroutine26
       8  ?Subroutine27
      34  ?Subroutine28
       5  ?Subroutine29
       5  ?Subroutine3
      15  ?Subroutine30
       8  ?Subroutine31
      12  ?Subroutine32
       8  ?Subroutine33
       3  ?Subroutine4
       5  ?Subroutine5
       5  ?Subroutine6
      16  ?Subroutine7
      16  ?Subroutine8
      28  ?Subroutine9
      84  BindInitNV
     165  BindRestoreFromNV
      65  BindSetDefaultNV
     234  BindWriteNV
      69  GetBindingTableEntry
     118  InitBindingTable
      69  bindAddClusterIdToList
     332  bindAddEntry
     150  bindAddrIndexGet
     155  bindAddrMgrLocalLoad
       1  bindAddrMgrLocalLoaded
      56  bindCapacity
     103  bindFind
      54  bindFindEmpty
     200  bindFindExisting
      69  bindIsClusterIDinList
     195  bindNumBoundTo
     103  bindNumOfEntries
      64  bindNumReflections
     136  bindRemoveClusterIdFromList
     143  bindRemoveDev
      17  bindRemoveEntry
      47  bindRemoveSrcDev
     130  bindUpdateAddr
      78  bindingAddrMgsHelperConvert
      33  bindingAddrMgsHelperConvertShort
      67  bindingAddrMgsHelperFind
       2  pBindInitNV
       2  pBindRestoreFromNV
       2  pBindSetDefaultNV
       2  pBindWriteNV
       2  pbindAddEntry
       2  pbindNumOfEntries
       2  pbindRemoveDev

 
 3 463 bytes in segment BANKED_CODE
   156 bytes in segment BANK_RELAYS
    15 bytes in segment XDATA_Z
 
 3 619 bytes of CODE  memory
    15 bytes of XDATA memory

Errors: none
Warnings: none
